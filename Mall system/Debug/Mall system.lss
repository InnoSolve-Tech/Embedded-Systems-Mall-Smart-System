
Mall system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000396  00800060  00001f9a  0000202e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029a  008003f6  008003f6  000023c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00002460  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002315  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca8  00000000  00000000  00004935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001178  00000000  00000000  000055dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00006758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00006b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe4  00000000  00000000  0000727b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000825f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	13 e0       	ldi	r17, 0x03	; 3
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	ea e9       	ldi	r30, 0x9A	; 154
      74:	ff e1       	ldi	r31, 0x1F	; 31
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a6 3f       	cpi	r26, 0xF6	; 246
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	26 e0       	ldi	r18, 0x06	; 6
      84:	a6 ef       	ldi	r26, 0xF6	; 246
      86:	b3 e0       	ldi	r27, 0x03	; 3
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a0 39       	cpi	r26, 0x90	; 144
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <main>
      96:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <init_access_control>:
TempAccess temp_access_list[MAX_TEMP_ACCESS];
uint8_t temp_access_count = 0;

void init_access_control(void) {
	// Initialize temp access list
	memset(temp_access_list, 0, sizeof(temp_access_list));
      9e:	86 e4       	ldi	r24, 0x46	; 70
      a0:	e1 e0       	ldi	r30, 0x01	; 1
      a2:	f4 e0       	ldi	r31, 0x04	; 4
      a4:	df 01       	movw	r26, r30
      a6:	1d 92       	st	X+, r1
      a8:	8a 95       	dec	r24
      aa:	e9 f7       	brne	.-6      	; 0xa6 <init_access_control+0x8>
	
	// Load temp access list from EEPROM
	eeprom_read_block((void*)&temp_access_count, (const void*)0, sizeof(uint8_t));
      ac:	41 e0       	ldi	r20, 0x01	; 1
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	86 ef       	ldi	r24, 0xF6	; 246
      b6:	93 e0       	ldi	r25, 0x03	; 3
      b8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
	eeprom_read_block((void*)temp_access_list, (const void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
      bc:	46 e4       	ldi	r20, 0x46	; 70
      be:	50 e0       	ldi	r21, 0x00	; 0
      c0:	61 e0       	ldi	r22, 0x01	; 1
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	94 e0       	ldi	r25, 0x04	; 4
      c8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
      cc:	08 95       	ret

000000ce <save_temp_access>:
}

void save_temp_access(void) {
	// Save temp access list to EEPROM
	eeprom_write_block((const void*)&temp_access_count, (void*)0, sizeof(uint8_t));
      ce:	41 e0       	ldi	r20, 0x01	; 1
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	86 ef       	ldi	r24, 0xF6	; 246
      d8:	93 e0       	ldi	r25, 0x03	; 3
      da:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_write_block>
	eeprom_write_block((const void*)temp_access_list, (void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
      de:	46 e4       	ldi	r20, 0x46	; 70
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	94 e0       	ldi	r25, 0x04	; 4
      ea:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_write_block>
      ee:	08 95       	ret

000000f0 <check_washroom_access>:
		} else {
		uart_print("Unknown access command\n");
	}
}

uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
      f0:	cf 92       	push	r12
      f2:	df 92       	push	r13
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	d8 2e       	mov	r13, r24
     102:	8b 01       	movw	r16, r22
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	2f c0       	rjmp	.+94     	; 0x168 <check_washroom_access+0x78>
		if (tenants[i].id == tenant_id) {
     10a:	8d e1       	ldi	r24, 0x1D	; 29
     10c:	8c 9f       	mul	r24, r28
     10e:	f0 01       	movw	r30, r0
     110:	8d 9f       	mul	r24, r29
     112:	f0 0d       	add	r31, r0
     114:	11 24       	eor	r1, r1
     116:	e9 5b       	subi	r30, 0xB9	; 185
     118:	fb 4f       	sbci	r31, 0xFB	; 251
     11a:	80 81       	ld	r24, Z
     11c:	8d 11       	cpse	r24, r13
     11e:	23 c0       	rjmp	.+70     	; 0x166 <check_washroom_access+0x76>
			if (memcmp(tenants[i].washroom_code, code, 4) == 0 && tenants[i].rent_paid >= tenants[i].rent) {
     120:	2d e1       	ldi	r18, 0x1D	; 29
     122:	2c 9f       	mul	r18, r28
     124:	c0 01       	movw	r24, r0
     126:	2d 9f       	mul	r18, r29
     128:	90 0d       	add	r25, r0
     12a:	11 24       	eor	r1, r1
     12c:	44 e0       	ldi	r20, 0x04	; 4
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	b8 01       	movw	r22, r16
     132:	81 5a       	subi	r24, 0xA1	; 161
     134:	9b 4f       	sbci	r25, 0xFB	; 251
     136:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <memcmp>
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <check_washroom_access+0x50>
     13e:	8b c0       	rjmp	.+278    	; 0x256 <check_washroom_access+0x166>
     140:	8d e1       	ldi	r24, 0x1D	; 29
     142:	8c 9f       	mul	r24, r28
     144:	f0 01       	movw	r30, r0
     146:	8d 9f       	mul	r24, r29
     148:	f0 0d       	add	r31, r0
     14a:	11 24       	eor	r1, r1
     14c:	e9 5b       	subi	r30, 0xB9	; 185
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	84 8d       	ldd	r24, Z+28	; 0x1c
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	26 89       	ldd	r18, Z+22	; 0x16
     156:	37 89       	ldd	r19, Z+23	; 0x17
     158:	82 17       	cp	r24, r18
     15a:	93 07       	cpc	r25, r19
     15c:	08 f0       	brcs	.+2      	; 0x160 <check_washroom_access+0x70>
     15e:	87 c0       	rjmp	.+270    	; 0x26e <check_washroom_access+0x17e>
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	7a c0       	rjmp	.+244    	; 0x25a <check_washroom_access+0x16a>
	}
}

uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
     166:	21 96       	adiw	r28, 0x01	; 1
     168:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <tenant_count>
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	c8 17       	cp	r28, r24
     170:	d9 07       	cpc	r29, r25
     172:	5c f2       	brlt	.-106    	; 0x10a <check_washroom_access+0x1a>
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
     178:	70 c0       	rjmp	.+224    	; 0x25a <check_washroom_access+0x16a>
		}
	}
	
	// Check temporary access
	for (int i = 0; i < temp_access_count; i++) {
		if (temp_access_list[i].tenant_id == tenant_id && memcmp(temp_access_list[i].temp_code, code, 4) == 0) {
     17a:	fe 01       	movw	r30, r28
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ee 0f       	add	r30, r30
     186:	ff 1f       	adc	r31, r31
     188:	ec 1b       	sub	r30, r28
     18a:	fd 0b       	sbc	r31, r29
     18c:	ef 5f       	subi	r30, 0xFF	; 255
     18e:	fb 4f       	sbci	r31, 0xFB	; 251
     190:	80 81       	ld	r24, Z
     192:	d8 12       	cpse	r13, r24
     194:	5e c0       	rjmp	.+188    	; 0x252 <check_washroom_access+0x162>
     196:	ce 01       	movw	r24, r28
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	8c 1b       	sub	r24, r28
     1a6:	9d 0b       	sbc	r25, r29
     1a8:	44 e0       	ldi	r20, 0x04	; 4
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	b8 01       	movw	r22, r16
     1ae:	8e 5f       	subi	r24, 0xFE	; 254
     1b0:	9b 4f       	sbci	r25, 0xFB	; 251
     1b2:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <memcmp>
     1b6:	89 2b       	or	r24, r25
     1b8:	09 f0       	breq	.+2      	; 0x1bc <check_washroom_access+0xcc>
     1ba:	4b c0       	rjmp	.+150    	; 0x252 <check_washroom_access+0x162>
			if (temp_access_list[i].timeout > 0) {
     1bc:	fe 01       	movw	r30, r28
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	ee 0f       	add	r30, r30
     1c4:	ff 1f       	adc	r31, r31
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	ec 1b       	sub	r30, r28
     1cc:	fd 0b       	sbc	r31, r29
     1ce:	ef 5f       	subi	r30, 0xFF	; 255
     1d0:	fb 4f       	sbci	r31, 0xFB	; 251
     1d2:	85 81       	ldd	r24, Z+5	; 0x05
     1d4:	96 81       	ldd	r25, Z+6	; 0x06
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	81 f1       	breq	.+96     	; 0x23a <check_washroom_access+0x14a>
				temp_access_list[i].timeout--;
     1da:	fe 01       	movw	r30, r28
     1dc:	ee 0f       	add	r30, r30
     1de:	ff 1f       	adc	r31, r31
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	ec 1b       	sub	r30, r28
     1ea:	fd 0b       	sbc	r31, r29
     1ec:	ef 5f       	subi	r30, 0xFF	; 255
     1ee:	fb 4f       	sbci	r31, 0xFB	; 251
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	96 83       	std	Z+6, r25	; 0x06
     1f4:	85 83       	std	Z+5, r24	; 0x05
				save_temp_access();
     1f6:	0e 94 67 00 	call	0xce	; 0xce <save_temp_access>
				return 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	39 c0       	rjmp	.+114    	; 0x270 <check_washroom_access+0x180>
				} else {
				// Remove expired temporary access
				for (int j = i; j < temp_access_count - 1; j++) {
					temp_access_list[j] = temp_access_list[j+1];
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	de 01       	movw	r26, r28
     204:	aa 0f       	add	r26, r26
     206:	bb 1f       	adc	r27, r27
     208:	aa 0f       	add	r26, r26
     20a:	bb 1f       	adc	r27, r27
     20c:	aa 0f       	add	r26, r26
     20e:	bb 1f       	adc	r27, r27
     210:	ac 1b       	sub	r26, r28
     212:	bd 0b       	sbc	r27, r29
     214:	af 5f       	subi	r26, 0xFF	; 255
     216:	bb 4f       	sbci	r27, 0xFB	; 251
     218:	fc 01       	movw	r30, r24
     21a:	ee 0f       	add	r30, r30
     21c:	ff 1f       	adc	r31, r31
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	ee 0f       	add	r30, r30
     224:	ff 1f       	adc	r31, r31
     226:	e8 1b       	sub	r30, r24
     228:	f9 0b       	sbc	r31, r25
     22a:	ef 5f       	subi	r30, 0xFF	; 255
     22c:	fb 4f       	sbci	r31, 0xFB	; 251
     22e:	27 e0       	ldi	r18, 0x07	; 7
     230:	01 90       	ld	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	2a 95       	dec	r18
     236:	e1 f7       	brne	.-8      	; 0x230 <check_washroom_access+0x140>
				temp_access_list[i].timeout--;
				save_temp_access();
				return 1;
				} else {
				// Remove expired temporary access
				for (int j = i; j < temp_access_count - 1; j++) {
     238:	ec 01       	movw	r28, r24
     23a:	c7 01       	movw	r24, r14
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	c8 17       	cp	r28, r24
     240:	d9 07       	cpc	r29, r25
     242:	ec f2       	brlt	.-70     	; 0x1fe <check_washroom_access+0x10e>
					temp_access_list[j] = temp_access_list[j+1];
				}
				temp_access_count--;
     244:	ca 94       	dec	r12
     246:	c0 92 f6 03 	sts	0x03F6, r12	; 0x8003f6 <__data_end>
				save_temp_access();
     24a:	0e 94 67 00 	call	0xce	; 0xce <save_temp_access>
				break;
			}
		}
	}
	
	return 0;
     24e:	80 e0       	ldi	r24, 0x00	; 0
				for (int j = i; j < temp_access_count - 1; j++) {
					temp_access_list[j] = temp_access_list[j+1];
				}
				temp_access_count--;
				save_temp_access();
				break;
     250:	0f c0       	rjmp	.+30     	; 0x270 <check_washroom_access+0x180>
			break;
		}
	}
	
	// Check temporary access
	for (int i = 0; i < temp_access_count; i++) {
     252:	21 96       	adiw	r28, 0x01	; 1
     254:	02 c0       	rjmp	.+4      	; 0x25a <check_washroom_access+0x16a>
     256:	c0 e0       	ldi	r28, 0x00	; 0
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	c0 90 f6 03 	lds	r12, 0x03F6	; 0x8003f6 <__data_end>
     25e:	ec 2c       	mov	r14, r12
     260:	f1 2c       	mov	r15, r1
     262:	ce 15       	cp	r28, r14
     264:	df 05       	cpc	r29, r15
     266:	0c f4       	brge	.+2      	; 0x26a <check_washroom_access+0x17a>
     268:	88 cf       	rjmp	.-240    	; 0x17a <check_washroom_access+0x8a>
				break;
			}
		}
	}
	
	return 0;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <check_washroom_access+0x180>
uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
		if (tenants[i].id == tenant_id) {
			if (memcmp(tenants[i].washroom_code, code, 4) == 0 && tenants[i].rent_paid >= tenants[i].rent) {
				return 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	df 90       	pop	r13
     27e:	cf 90       	pop	r12
     280:	08 95       	ret

00000282 <set_temporary_access>:

void set_temporary_access(uint8_t tenant_id, uint8_t* temp_code, uint16_t timeout) {
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	27 97       	sbiw	r28, 0x07	; 7
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
	if (temp_access_count < MAX_TEMP_ACCESS) {
     29a:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <__data_end>
     29e:	9a 30       	cpi	r25, 0x0A	; 10
     2a0:	58 f5       	brcc	.+86     	; 0x2f8 <set_temporary_access+0x76>
		TempAccess new_temp_access;
		new_temp_access.tenant_id = tenant_id;
     2a2:	89 83       	std	Y+1, r24	; 0x01
		memcpy(new_temp_access.temp_code, temp_code, 4);
     2a4:	fb 01       	movw	r30, r22
     2a6:	00 81       	ld	r16, Z
     2a8:	11 81       	ldd	r17, Z+1	; 0x01
     2aa:	22 81       	ldd	r18, Z+2	; 0x02
     2ac:	33 81       	ldd	r19, Z+3	; 0x03
     2ae:	0a 83       	std	Y+2, r16	; 0x02
     2b0:	1b 83       	std	Y+3, r17	; 0x03
     2b2:	2c 83       	std	Y+4, r18	; 0x04
     2b4:	3d 83       	std	Y+5, r19	; 0x05
		new_temp_access.timeout = timeout;
     2b6:	5f 83       	std	Y+7, r21	; 0x07
     2b8:	4e 83       	std	Y+6, r20	; 0x06
		
		temp_access_list[temp_access_count++] = new_temp_access;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	89 0f       	add	r24, r25
     2be:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <__data_end>
     2c2:	89 2f       	mov	r24, r25
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	dc 01       	movw	r26, r24
     2c8:	aa 0f       	add	r26, r26
     2ca:	bb 1f       	adc	r27, r27
     2cc:	aa 0f       	add	r26, r26
     2ce:	bb 1f       	adc	r27, r27
     2d0:	aa 0f       	add	r26, r26
     2d2:	bb 1f       	adc	r27, r27
     2d4:	a8 1b       	sub	r26, r24
     2d6:	b9 0b       	sbc	r27, r25
     2d8:	af 5f       	subi	r26, 0xFF	; 255
     2da:	bb 4f       	sbci	r27, 0xFB	; 251
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	fe 01       	movw	r30, r28
     2e0:	31 96       	adiw	r30, 0x01	; 1
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <set_temporary_access+0x60>
		save_temp_access();
     2ea:	0e 94 67 00 	call	0xce	; 0xce <save_temp_access>
		
		uart_print("Temporary access set\n");
     2ee:	84 e6       	ldi	r24, 0x64	; 100
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <set_temporary_access+0x7e>
		} else {
		uart_print("Error: Maximum number of temporary access codes reached\n");
     2f8:	8a e7       	ldi	r24, 0x7A	; 122
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
     300:	27 96       	adiw	r28, 0x07	; 7
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	08 95       	ret

00000316 <process_access_command>:
	// Save temp access list to EEPROM
	eeprom_write_block((const void*)&temp_access_count, (void*)0, sizeof(uint8_t));
	eeprom_write_block((const void*)temp_access_list, (void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
}

void process_access_command(char* command) {
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	27 97       	sbiw	r28, 0x07	; 7
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	8c 01       	movw	r16, r24
	if (strncmp(command, "check ", 6) == 0) {
     334:	46 e0       	ldi	r20, 0x06	; 6
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	63 eb       	ldi	r22, 0xB3	; 179
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     340:	89 2b       	or	r24, r25
     342:	91 f5       	brne	.+100    	; 0x3a8 <process_access_command+0x92>
		uint8_t tenant_id;
		uint8_t code[4];
		sscanf(command + 6, "%hhu %hhu%hhu%hhu%hhu", &tenant_id, &code[0], &code[1], &code[2], &code[3]);
     344:	ce 01       	movw	r24, r28
     346:	04 96       	adiw	r24, 0x04	; 4
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	9f 93       	push	r25
     350:	8f 93       	push	r24
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	9e 01       	movw	r18, r28
     35a:	2f 5f       	subi	r18, 0xFF	; 255
     35c:	3f 4f       	sbci	r19, 0xFF	; 255
     35e:	79 01       	movw	r14, r18
     360:	3f 93       	push	r19
     362:	2f 93       	push	r18
     364:	03 96       	adiw	r24, 0x03	; 3
     366:	9f 93       	push	r25
     368:	8f 93       	push	r24
     36a:	8a eb       	ldi	r24, 0xBA	; 186
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	0a 5f       	subi	r16, 0xFA	; 250
     374:	1f 4f       	sbci	r17, 0xFF	; 255
     376:	1f 93       	push	r17
     378:	0f 93       	push	r16
     37a:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		if (check_washroom_access(tenant_id, code)) {
     37e:	b7 01       	movw	r22, r14
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	0e 94 78 00 	call	0xf0	; 0xf0 <check_washroom_access>
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	88 23       	and	r24, r24
     392:	29 f0       	breq	.+10     	; 0x39e <process_access_command+0x88>
			uart_print("Access granted\n");
     394:	80 ed       	ldi	r24, 0xD0	; 208
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     39c:	3c c0       	rjmp	.+120    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			} else {
			uart_print("Access denied\n");
     39e:	80 ee       	ldi	r24, 0xE0	; 224
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     3a6:	37 c0       	rjmp	.+110    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		}
		} else if (strncmp(command, "temp ", 5) == 0) {
     3a8:	45 e0       	ldi	r20, 0x05	; 5
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	6f ee       	ldi	r22, 0xEF	; 239
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	c8 01       	movw	r24, r16
     3b2:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     3b6:	89 2b       	or	r24, r25
     3b8:	51 f5       	brne	.+84     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		uint8_t tenant_id, temp_code[4];
		uint16_t timeout;
		sscanf(command + 5, "%hhu %hhu%hhu%hhu%hhu %hu", &tenant_id, &temp_code[0], &temp_code[1], &temp_code[2], &temp_code[3], &timeout);
     3ba:	ce 01       	movw	r24, r28
     3bc:	05 96       	adiw	r24, 0x05	; 5
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	7c 01       	movw	r14, r24
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	06 96       	adiw	r24, 0x06	; 6
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	85 ef       	ldi	r24, 0xF5	; 245
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	0b 5f       	subi	r16, 0xFB	; 251
     3ec:	1f 4f       	sbci	r17, 0xFF	; 255
     3ee:	1f 93       	push	r17
     3f0:	0f 93       	push	r16
     3f2:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		set_temporary_access(tenant_id, temp_code, timeout);
     3f6:	4d 81       	ldd	r20, Y+5	; 0x05
     3f8:	5e 81       	ldd	r21, Y+6	; 0x06
     3fa:	b7 01       	movw	r22, r14
     3fc:	8f 81       	ldd	r24, Y+7	; 0x07
     3fe:	0e 94 41 01 	call	0x282	; 0x282 <set_temporary_access>
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	04 c0       	rjmp	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		} else {
		uart_print("Unknown access command\n");
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
}
     416:	27 96       	adiw	r28, 0x07	; 7
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	f8 94       	cli
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	0f be       	out	0x3f, r0	; 63
     420:	cd bf       	out	0x3d, r28	; 61
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	08 95       	ret

00000430 <init_system>:
    return 0;
}

void init_system(void) {
    // Initialize I/O
    DDRD &= ~((1 << ENTRANCE_1_PIN) | (1 << ENTRANCE_2_PIN) | (1 << EXIT_PIN)); // Set as inputs
     430:	81 b3       	in	r24, 0x11	; 17
     432:	83 7e       	andi	r24, 0xE3	; 227
     434:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << ENTRANCE_1_PIN) | (1 << ENTRANCE_2_PIN) | (1 << EXIT_PIN);   // Enable pull-up resistors
     436:	82 b3       	in	r24, 0x12	; 18
     438:	8c 61       	ori	r24, 0x1C	; 28
     43a:	82 bb       	out	0x12, r24	; 18

    // Initialize UART
    uart_init();
     43c:	0e 94 43 08 	call	0x1086	; 0x1086 <uart_init>
    uart_print("Hello, UART!\r\n");  
     440:	87 e2       	ldi	r24, 0x27	; 39
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>

    // Initialize tenant system
    init_tenant_system();
     448:	0e 94 11 06 	call	0xc22	; 0xc22 <init_tenant_system>

    // Initialize access control system
    init_access_control();
     44c:	0e 94 4f 00 	call	0x9e	; 0x9e <init_access_control>

    // Initialize mall management system
    init_mall_management();
     450:	0e 94 a5 03 	call	0x74a	; 0x74a <init_mall_management>

    // Enable global interrupts
    sei();
     454:	78 94       	sei
     456:	08 95       	ret

00000458 <debounce>:
}

uint8_t debounce(uint8_t pin) {
    if (!(PIND & (1 << pin))) {
     458:	20 b3       	in	r18, 0x10	; 16
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	08 2e       	mov	r0, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <debounce+0xc>
     460:	35 95       	asr	r19
     462:	27 95       	ror	r18
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <debounce+0x8>
     468:	20 fd       	sbrc	r18, 0
     46a:	15 c0       	rjmp	.+42     	; 0x496 <debounce+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46c:	2f e3       	ldi	r18, 0x3F	; 63
     46e:	3d e0       	ldi	r19, 0x0D	; 13
     470:	43 e0       	ldi	r20, 0x03	; 3
     472:	21 50       	subi	r18, 0x01	; 1
     474:	30 40       	sbci	r19, 0x00	; 0
     476:	40 40       	sbci	r20, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <debounce+0x1a>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <debounce+0x24>
     47c:	00 00       	nop
        _delay_ms(DEBOUNCE_TIME);
        if (!(PIND & (1 << pin))) {
     47e:	20 b3       	in	r18, 0x10	; 16
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a9 01       	movw	r20, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <debounce+0x32>
     486:	55 95       	asr	r21
     488:	47 95       	ror	r20
     48a:	8a 95       	dec	r24
     48c:	e2 f7       	brpl	.-8      	; 0x486 <debounce+0x2e>
     48e:	40 fd       	sbrc	r20, 0
     490:	04 c0       	rjmp	.+8      	; 0x49a <debounce+0x42>
            return 1; // Button is pressed
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	08 95       	ret
        }
    }
    return 0; // Button is not pressed
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret
     49a:	80 e0       	ldi	r24, 0x00	; 0
}
     49c:	08 95       	ret

0000049e <process_entrance_exit>:

void process_entrance_exit(void) {
    // Check entrance 1
    if (debounce(ENTRANCE_1_PIN)) {
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 2c 02 	call	0x458	; 0x458 <debounce>
     4a4:	88 23       	and	r24, r24
     4a6:	71 f0       	breq	.+28     	; 0x4c4 <process_entrance_exit+0x26>
        people_count++;
     4a8:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <people_count>
     4ac:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <people_count+0x1>
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <people_count+0x1>
     4b6:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <people_count>
        floor_count[0]++;
     4ba:	e7 ef       	ldi	r30, 0xF7	; 247
     4bc:	f3 e0       	ldi	r31, 0x03	; 3
     4be:	80 81       	ld	r24, Z
     4c0:	8f 5f       	subi	r24, 0xFF	; 255
     4c2:	80 83       	st	Z, r24
    }

    // Check entrance 2
    if (debounce(ENTRANCE_2_PIN)) {
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	0e 94 2c 02 	call	0x458	; 0x458 <debounce>
     4ca:	88 23       	and	r24, r24
     4cc:	71 f0       	breq	.+28     	; 0x4ea <process_entrance_exit+0x4c>
        people_count++;
     4ce:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <people_count>
     4d2:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <people_count+0x1>
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <people_count+0x1>
     4dc:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <people_count>
        floor_count[0]++;
     4e0:	e7 ef       	ldi	r30, 0xF7	; 247
     4e2:	f3 e0       	ldi	r31, 0x03	; 3
     4e4:	80 81       	ld	r24, Z
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 83       	st	Z, r24
    }

    // Check exit
    if (debounce(EXIT_PIN)) {
     4ea:	84 e0       	ldi	r24, 0x04	; 4
     4ec:	0e 94 2c 02 	call	0x458	; 0x458 <debounce>
     4f0:	88 23       	and	r24, r24
     4f2:	c1 f0       	breq	.+48     	; 0x524 <process_entrance_exit+0x86>
        if (people_count > 0) {
     4f4:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <people_count>
     4f8:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <people_count+0x1>
     4fc:	89 2b       	or	r24, r25
     4fe:	91 f0       	breq	.+36     	; 0x524 <process_entrance_exit+0x86>
            people_count--;
     500:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <people_count>
     504:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <people_count+0x1>
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <people_count+0x1>
     50e:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <people_count>
            if (floor_count[0] > 0) floor_count[0]--;
     512:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <floor_count>
     516:	88 23       	and	r24, r24
     518:	29 f0       	breq	.+10     	; 0x524 <process_entrance_exit+0x86>
     51a:	e7 ef       	ldi	r30, 0xF7	; 247
     51c:	f3 e0       	ldi	r31, 0x03	; 3
     51e:	80 81       	ld	r24, Z
     520:	81 50       	subi	r24, 0x01	; 1
     522:	80 83       	st	Z, r24
     524:	08 95       	ret

00000526 <process_command>:
        }
    }
}

void process_command(char* command) {
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	c4 56       	subi	r28, 0x64	; 100
     534:	d1 09       	sbc	r29, r1
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	8c 01       	movw	r16, r24
    char response[100];

    if (strcmp(command, "count") == 0) {
     542:	66 e3       	ldi	r22, 0x36	; 54
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	0e 94 fd 08 	call	0x11fa	; 0x11fa <strcmp>
     54a:	89 2b       	or	r24, r25
     54c:	29 f5       	brne	.+74     	; 0x598 <process_command+0x72>
        sprintf(response, "Total people: %d\r\nGround floor: %d\r\nFirst floor: %d\r\nSecond floor: %d\r\n",
                people_count, floor_count[0], floor_count[1], floor_count[2]);
     54e:	e7 ef       	ldi	r30, 0xF7	; 247
     550:	f3 e0       	ldi	r31, 0x03	; 3
     552:	42 81       	ldd	r20, Z+2	; 0x02
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	20 81       	ld	r18, Z

void process_command(char* command) {
    char response[100];

    if (strcmp(command, "count") == 0) {
        sprintf(response, "Total people: %d\r\nGround floor: %d\r\nFirst floor: %d\r\nSecond floor: %d\r\n",
     558:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <people_count>
     55c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <people_count+0x1>
     560:	1f 92       	push	r1
     562:	4f 93       	push	r20
     564:	1f 92       	push	r1
     566:	3f 93       	push	r19
     568:	1f 92       	push	r1
     56a:	2f 93       	push	r18
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	8c e3       	ldi	r24, 0x3C	; 60
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	8e 01       	movw	r16, r28
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	1f 93       	push	r17
     580:	0f 93       	push	r16
     582:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
                people_count, floor_count[0], floor_count[1], floor_count[2]);
        uart_print(response);
     586:	c8 01       	movw	r24, r16
     588:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	94 c0       	rjmp	.+296    	; 0x6c0 <process_command+0x19a>
    } else if (strncmp(command, "move ", 5) == 0) {
     598:	45 e0       	ldi	r20, 0x05	; 5
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	6e ec       	ldi	r22, 0xCE	; 206
     59e:	73 e0       	ldi	r23, 0x03	; 3
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     5a6:	89 2b       	or	r24, r25
     5a8:	09 f0       	breq	.+2      	; 0x5ac <process_command+0x86>
     5aa:	5c c0       	rjmp	.+184    	; 0x664 <process_command+0x13e>
        int from_floor = command[5] - '0';
     5ac:	f8 01       	movw	r30, r16
     5ae:	85 81       	ldd	r24, Z+5	; 0x05
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	c0 97       	sbiw	r24, 0x30	; 48
        int to_floor = command[7] - '0';
     5b4:	27 81       	ldd	r18, Z+7	; 0x07
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	20 53       	subi	r18, 0x30	; 48
     5ba:	31 09       	sbc	r19, r1
        if (from_floor >= 0 && from_floor < 3 && to_floor >= 0 && to_floor < 3 && from_floor != to_floor) {
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <process_command+0x9e>
     5c2:	42 c0       	rjmp	.+132    	; 0x648 <process_command+0x122>
     5c4:	33 23       	and	r19, r19
     5c6:	0c f4       	brge	.+2      	; 0x5ca <process_command+0xa4>
     5c8:	3f c0       	rjmp	.+126    	; 0x648 <process_command+0x122>
     5ca:	23 30       	cpi	r18, 0x03	; 3
     5cc:	31 05       	cpc	r19, r1
     5ce:	e4 f5       	brge	.+120    	; 0x648 <process_command+0x122>
     5d0:	82 17       	cp	r24, r18
     5d2:	93 07       	cpc	r25, r19
     5d4:	c9 f1       	breq	.+114    	; 0x648 <process_command+0x122>
            if (floor_count[from_floor] > 0) {
     5d6:	fc 01       	movw	r30, r24
     5d8:	e9 50       	subi	r30, 0x09	; 9
     5da:	fc 4f       	sbci	r31, 0xFC	; 252
     5dc:	40 81       	ld	r20, Z
     5de:	44 23       	and	r20, r20
     5e0:	01 f1       	breq	.+64     	; 0x622 <process_command+0xfc>
                floor_count[from_floor]--;
     5e2:	fc 01       	movw	r30, r24
     5e4:	e9 50       	subi	r30, 0x09	; 9
     5e6:	fc 4f       	sbci	r31, 0xFC	; 252
     5e8:	40 81       	ld	r20, Z
     5ea:	41 50       	subi	r20, 0x01	; 1
     5ec:	40 83       	st	Z, r20
                floor_count[to_floor]++;
     5ee:	f9 01       	movw	r30, r18
     5f0:	e9 50       	subi	r30, 0x09	; 9
     5f2:	fc 4f       	sbci	r31, 0xFC	; 252
     5f4:	40 81       	ld	r20, Z
     5f6:	4f 5f       	subi	r20, 0xFF	; 255
     5f8:	40 83       	st	Z, r20
                sprintf(response, "Moved 1 person from floor %d to floor %d\r\n", from_floor, to_floor);
     5fa:	3f 93       	push	r19
     5fc:	2f 93       	push	r18
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	84 e8       	ldi	r24, 0x84	; 132
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	1c c0       	rjmp	.+56     	; 0x65a <process_command+0x134>
            } else {
                sprintf(response, "Error: No people on floor %d\r\n", from_floor);
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	8f ea       	ldi	r24, 0xAF	; 175
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	9f 93       	push	r25
     62c:	8f 93       	push	r24
     62e:	ce 01       	movw	r24, r28
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	9f 93       	push	r25
     634:	8f 93       	push	r24
     636:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	09 c0       	rjmp	.+18     	; 0x65a <process_command+0x134>
            }
        } else {
            sprintf(response, "Error: Invalid floor numbers\r\n");
     648:	8f e1       	ldi	r24, 0x1F	; 31
     64a:	ee ec       	ldi	r30, 0xCE	; 206
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	de 01       	movw	r26, r28
     650:	11 96       	adiw	r26, 0x01	; 1
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	8a 95       	dec	r24
     658:	e1 f7       	brne	.-8      	; 0x652 <process_command+0x12c>
        }
        uart_print(response);
     65a:	ce 01       	movw	r24, r28
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     662:	2e c0       	rjmp	.+92     	; 0x6c0 <process_command+0x19a>
    } else if (strncmp(command, "tenant ", 7) == 0) {
     664:	47 e0       	ldi	r20, 0x07	; 7
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	6d ee       	ldi	r22, 0xED	; 237
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	c8 01       	movw	r24, r16
     66e:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     672:	89 2b       	or	r24, r25
     674:	29 f4       	brne	.+10     	; 0x680 <process_command+0x15a>
        process_tenant_command(command + 7);
     676:	c8 01       	movw	r24, r16
     678:	07 96       	adiw	r24, 0x07	; 7
     67a:	0e 94 af 07 	call	0xf5e	; 0xf5e <process_tenant_command>
     67e:	20 c0       	rjmp	.+64     	; 0x6c0 <process_command+0x19a>
    } else if (strncmp(command, "access ", 7) == 0) {
     680:	47 e0       	ldi	r20, 0x07	; 7
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	65 ef       	ldi	r22, 0xF5	; 245
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	c8 01       	movw	r24, r16
     68a:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     68e:	89 2b       	or	r24, r25
     690:	29 f4       	brne	.+10     	; 0x69c <process_command+0x176>
        process_access_command(command + 7);
     692:	c8 01       	movw	r24, r16
     694:	07 96       	adiw	r24, 0x07	; 7
     696:	0e 94 8b 01 	call	0x316	; 0x316 <process_access_command>
     69a:	12 c0       	rjmp	.+36     	; 0x6c0 <process_command+0x19a>
    } else if (strncmp(command, "manage ", 7) == 0) {
     69c:	47 e0       	ldi	r20, 0x07	; 7
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	6d ef       	ldi	r22, 0xFD	; 253
     6a2:	71 e0       	ldi	r23, 0x01	; 1
     6a4:	c8 01       	movw	r24, r16
     6a6:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     6aa:	89 2b       	or	r24, r25
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <process_command+0x192>
        process_management_command(command + 7);
     6ae:	c8 01       	movw	r24, r16
     6b0:	07 96       	adiw	r24, 0x07	; 7
     6b2:	0e 94 2a 05 	call	0xa54	; 0xa54 <process_management_command>
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <process_command+0x19a>
    } else {
        uart_print("Unknown command\r\n");
     6b8:	85 e0       	ldi	r24, 0x05	; 5
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
    }
}
     6c0:	cc 59       	subi	r28, 0x9C	; 156
     6c2:	df 4f       	sbci	r29, 0xFF	; 255
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <main>:
void init_system(void);
void process_entrance_exit(void);
void process_command(char* command);
uint8_t debounce(uint8_t pin);

int main(void) {
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	e2 97       	sbiw	r28, 0x32	; 50
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
    init_system();
     6ec:	0e 94 18 02 	call	0x430	; 0x430 <init_system>
    
    char command[50];
    uint8_t index = 0;
     6f0:	00 e0       	ldi	r16, 0x00	; 0

    while (1) {
        process_entrance_exit();
     6f2:	0e 94 4f 02 	call	0x49e	; 0x49e <process_entrance_exit>

        // Check for incoming commands
        if (UCSRA & (1<<RXC)) {
     6f6:	5f 9b       	sbis	0x0b, 7	; 11
     6f8:	fc cf       	rjmp	.-8      	; 0x6f2 <main+0x1a>
            char c = uart_receive();
     6fa:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_receive>
     6fe:	18 2f       	mov	r17, r24
			
			 // Echo the received character back to the terminal
			 uart_transmit(c);
     700:	0e 94 4b 08 	call	0x1096	; 0x1096 <uart_transmit>
			
            if (c == '\n' || c == '\r') {
     704:	1a 30       	cpi	r17, 0x0A	; 10
     706:	11 f0       	breq	.+4      	; 0x70c <main+0x34>
     708:	1d 30       	cpi	r17, 0x0D	; 13
     70a:	69 f4       	brne	.+26     	; 0x726 <main+0x4e>
                command[index] = '\0';
     70c:	e1 e0       	ldi	r30, 0x01	; 1
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ec 0f       	add	r30, r28
     712:	fd 1f       	adc	r31, r29
     714:	e0 0f       	add	r30, r16
     716:	f1 1d       	adc	r31, r1
     718:	10 82       	st	Z, r1
                process_command(command);
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 93 02 	call	0x526	; 0x526 <process_command>
                index = 0;
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	e6 cf       	rjmp	.-52     	; 0x6f2 <main+0x1a>
            } else {
                command[index++] = c;
     726:	e1 e0       	ldi	r30, 0x01	; 1
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ec 0f       	add	r30, r28
     72c:	fd 1f       	adc	r31, r29
     72e:	e0 0f       	add	r30, r16
     730:	f1 1d       	adc	r31, r1
     732:	10 83       	st	Z, r17
     734:	0f 5f       	subi	r16, 0xFF	; 255
     736:	dd cf       	rjmp	.-70     	; 0x6f2 <main+0x1a>

00000738 <save_mall_config>:
    eeprom_read_block((void*)&total_earnings, (const void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
}

void save_mall_config(void) {
    // Save mall configuration to EEPROM
    eeprom_write_block((const void*)&mall_config, (void*)0, sizeof(MallConfig));
     738:	45 e0       	ldi	r20, 0x05	; 5
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	8b e8       	ldi	r24, 0x8B	; 139
     742:	96 e0       	ldi	r25, 0x06	; 6
     744:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_write_block>
     748:	08 95       	ret

0000074a <init_mall_management>:
static uint32_t total_earnings = 0;
#define EEPROM_TOTAL_EARNINGS_ADDR (sizeof(MallConfig))

void init_mall_management(void) {
    // Load mall configuration from EEPROM
    eeprom_read_block((void*)&mall_config, (const void*)0, sizeof(MallConfig));
     74a:	45 e0       	ldi	r20, 0x05	; 5
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8b e8       	ldi	r24, 0x8B	; 139
     754:	96 e0       	ldi	r25, 0x06	; 6
     756:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
    
    // Set default values if EEPROM is empty
    if (mall_config.base_rent == 0xFFFF) {
     75a:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <mall_config>
     75e:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <mall_config+0x1>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	a1 f4       	brne	.+40     	; 0x78e <init_mall_management+0x44>
        mall_config.base_rent = 1000;  // Default base rent
     766:	88 ee       	ldi	r24, 0xE8	; 232
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <mall_config+0x1>
     76e:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <mall_config>
        for (int i = 0; i < NUM_FLOORS; i++) {
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	06 c0       	rjmp	.+12     	; 0x784 <init_mall_management+0x3a>
            mall_config.escalator_state[i] = 1;  // Escalators on by default
     778:	fc 01       	movw	r30, r24
     77a:	e5 57       	subi	r30, 0x75	; 117
     77c:	f9 4f       	sbci	r31, 0xF9	; 249
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	22 83       	std	Z+2, r18	; 0x02
    eeprom_read_block((void*)&mall_config, (const void*)0, sizeof(MallConfig));
    
    // Set default values if EEPROM is empty
    if (mall_config.base_rent == 0xFFFF) {
        mall_config.base_rent = 1000;  // Default base rent
        for (int i = 0; i < NUM_FLOORS; i++) {
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	bc f3       	brlt	.-18     	; 0x778 <init_mall_management+0x2e>
            mall_config.escalator_state[i] = 1;  // Escalators on by default
        }
        save_mall_config();
     78a:	0e 94 9c 03 	call	0x738	; 0x738 <save_mall_config>
    }

    // Load total earnings from EEPROM
    eeprom_read_block((void*)&total_earnings, (const void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
     78e:	44 e0       	ldi	r20, 0x04	; 4
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	65 e0       	ldi	r22, 0x05	; 5
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	8c ef       	ldi	r24, 0xFC	; 252
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
     79e:	08 95       	ret

000007a0 <view_total_earnings>:
		} else {
		uart_print("Unknown management command\r\n");
	}
}

void view_total_earnings(void) {
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	e2 97       	sbiw	r28, 0x32	; 50
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
	char response[50];
	sprintf(response, "Total earnings: $%lu\r\n", total_earnings);
     7b8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <total_earnings+0x3>
     7bc:	8f 93       	push	r24
     7be:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <total_earnings+0x2>
     7c2:	8f 93       	push	r24
     7c4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <total_earnings+0x1>
     7c8:	8f 93       	push	r24
     7ca:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <total_earnings>
     7ce:	8f 93       	push	r24
     7d0:	87 e1       	ldi	r24, 0x17	; 23
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	8e 01       	movw	r16, r28
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
	uart_print(response);
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
}
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	e2 96       	adiw	r28, 0x32	; 50
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <set_base_rent>:

void set_base_rent(uint16_t rent) {
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	e2 97       	sbiw	r28, 0x32	; 50
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	8c 01       	movw	r16, r24
    mall_config.base_rent = rent;
     826:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <mall_config+0x1>
     82a:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <mall_config>
    save_mall_config();
     82e:	0e 94 9c 03 	call	0x738	; 0x738 <save_mall_config>
    
    // Update rent for all tenants
    for (int i = 0; i < tenant_count; i++) {
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4b c0       	rjmp	.+150    	; 0x8ce <__stack+0x6f>
        if (tenants[i].floor == 0) {
     838:	2d e1       	ldi	r18, 0x1D	; 29
     83a:	28 9f       	mul	r18, r24
     83c:	f0 01       	movw	r30, r0
     83e:	29 9f       	mul	r18, r25
     840:	f0 0d       	add	r31, r0
     842:	11 24       	eor	r1, r1
     844:	e9 5b       	subi	r30, 0xB9	; 185
     846:	fb 4f       	sbci	r31, 0xFB	; 251
     848:	25 89       	ldd	r18, Z+21	; 0x15
     84a:	21 11       	cpse	r18, r1
     84c:	0b c0       	rjmp	.+22     	; 0x864 <__stack+0x5>
            tenants[i].rent = rent;
     84e:	2d e1       	ldi	r18, 0x1D	; 29
     850:	28 9f       	mul	r18, r24
     852:	f0 01       	movw	r30, r0
     854:	29 9f       	mul	r18, r25
     856:	f0 0d       	add	r31, r0
     858:	11 24       	eor	r1, r1
     85a:	e9 5b       	subi	r30, 0xB9	; 185
     85c:	fb 4f       	sbci	r31, 0xFB	; 251
     85e:	17 8b       	std	Z+23, r17	; 0x17
     860:	06 8b       	std	Z+22, r16	; 0x16
     862:	34 c0       	rjmp	.+104    	; 0x8cc <__stack+0x6d>
        } else if (tenants[i].floor == 1) {
     864:	21 30       	cpi	r18, 0x01	; 1
     866:	a1 f4       	brne	.+40     	; 0x890 <__stack+0x31>
            tenants[i].rent = rent * 3 / 4;
     868:	98 01       	movw	r18, r16
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	20 0f       	add	r18, r16
     870:	31 1f       	adc	r19, r17
     872:	36 95       	lsr	r19
     874:	27 95       	ror	r18
     876:	36 95       	lsr	r19
     878:	27 95       	ror	r18
     87a:	4d e1       	ldi	r20, 0x1D	; 29
     87c:	48 9f       	mul	r20, r24
     87e:	f0 01       	movw	r30, r0
     880:	49 9f       	mul	r20, r25
     882:	f0 0d       	add	r31, r0
     884:	11 24       	eor	r1, r1
     886:	e9 5b       	subi	r30, 0xB9	; 185
     888:	fb 4f       	sbci	r31, 0xFB	; 251
     88a:	37 8b       	std	Z+23, r19	; 0x17
     88c:	26 8b       	std	Z+22, r18	; 0x16
     88e:	1e c0       	rjmp	.+60     	; 0x8cc <__stack+0x6d>
        } else if (tenants[i].floor == 2) {
     890:	22 30       	cpi	r18, 0x02	; 2
     892:	e1 f4       	brne	.+56     	; 0x8cc <__stack+0x6d>
            tenants[i].rent = rent * 3 / 4 * 3 / 4;
     894:	98 01       	movw	r18, r16
     896:	22 0f       	add	r18, r18
     898:	33 1f       	adc	r19, r19
     89a:	20 0f       	add	r18, r16
     89c:	31 1f       	adc	r19, r17
     89e:	36 95       	lsr	r19
     8a0:	27 95       	ror	r18
     8a2:	36 95       	lsr	r19
     8a4:	27 95       	ror	r18
     8a6:	a9 01       	movw	r20, r18
     8a8:	44 0f       	add	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	24 0f       	add	r18, r20
     8ae:	35 1f       	adc	r19, r21
     8b0:	36 95       	lsr	r19
     8b2:	27 95       	ror	r18
     8b4:	36 95       	lsr	r19
     8b6:	27 95       	ror	r18
     8b8:	4d e1       	ldi	r20, 0x1D	; 29
     8ba:	48 9f       	mul	r20, r24
     8bc:	f0 01       	movw	r30, r0
     8be:	49 9f       	mul	r20, r25
     8c0:	f0 0d       	add	r31, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e9 5b       	subi	r30, 0xB9	; 185
     8c6:	fb 4f       	sbci	r31, 0xFB	; 251
     8c8:	37 8b       	std	Z+23, r19	; 0x17
     8ca:	26 8b       	std	Z+22, r18	; 0x16
void set_base_rent(uint16_t rent) {
    mall_config.base_rent = rent;
    save_mall_config();
    
    // Update rent for all tenants
    for (int i = 0; i < tenant_count; i++) {
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <tenant_count>
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	0c f4       	brge	.+2      	; 0x8dc <__stack+0x7d>
     8da:	ae cf       	rjmp	.-164    	; 0x838 <set_base_rent+0x2c>
            tenants[i].rent = rent * 3 / 4;
        } else if (tenants[i].floor == 2) {
            tenants[i].rent = rent * 3 / 4 * 3 / 4;
        }
    }
    save_tenants();
     8dc:	0e 94 32 06 	call	0xc64	; 0xc64 <save_tenants>
    
    char response[50];
    sprintf(response, "Base rent set to %d\n", rent);
     8e0:	1f 93       	push	r17
     8e2:	0f 93       	push	r16
     8e4:	8e e2       	ldi	r24, 0x2E	; 46
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	8e 01       	movw	r16, r28
     8ee:	0f 5f       	subi	r16, 0xFF	; 255
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	1f 93       	push	r17
     8f4:	0f 93       	push	r16
     8f6:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
    uart_print(response);
     8fa:	c8 01       	movw	r24, r16
     8fc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	e2 96       	adiw	r28, 0x32	; 50
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <toggle_escalator>:

void toggle_escalator(uint8_t floor, uint8_t state) {
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	e2 97       	sbiw	r28, 0x32	; 50
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	18 2f       	mov	r17, r24
     93c:	06 2f       	mov	r16, r22
    if (floor < NUM_FLOORS) {
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	30 f5       	brcc	.+76     	; 0x98e <toggle_escalator+0x6c>
        mall_config.escalator_state[floor] = state;
     942:	e8 2f       	mov	r30, r24
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	e5 57       	subi	r30, 0x75	; 117
     948:	f9 4f       	sbci	r31, 0xF9	; 249
     94a:	62 83       	std	Z+2, r22	; 0x02
        save_mall_config();
     94c:	0e 94 9c 03 	call	0x738	; 0x738 <save_mall_config>
        
        char response[50];
        sprintf(response, "Escalator on floor %d set to %s\n", floor, state ? "ON" : "OFF");
     950:	00 23       	and	r16, r16
     952:	19 f0       	breq	.+6      	; 0x95a <toggle_escalator+0x38>
     954:	83 e4       	ldi	r24, 0x43	; 67
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	02 c0       	rjmp	.+4      	; 0x95e <toggle_escalator+0x3c>
     95a:	86 e4       	ldi	r24, 0x46	; 70
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	9f 93       	push	r25
     960:	8f 93       	push	r24
     962:	1f 92       	push	r1
     964:	1f 93       	push	r17
     966:	8a e4       	ldi	r24, 0x4A	; 74
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	8e 01       	movw	r16, r28
     970:	0f 5f       	subi	r16, 0xFF	; 255
     972:	1f 4f       	sbci	r17, 0xFF	; 255
     974:	1f 93       	push	r17
     976:	0f 93       	push	r16
     978:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
        uart_print(response);
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	04 c0       	rjmp	.+8      	; 0x996 <toggle_escalator+0x74>
    } else {
        uart_print("Error: Invalid floor number\n");
     98e:	8b e6       	ldi	r24, 0x6B	; 107
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
    }
}
     996:	e2 96       	adiw	r28, 0x32	; 50
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <disable_tenant_account>:

void disable_tenant_account(uint8_t tenant_id) {
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	e2 97       	sbiw	r28, 0x32	; 50
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	18 2f       	mov	r17, r24
    for (int i = 0; i < tenant_count; i++) {
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	2f c0       	rjmp	.+94     	; 0xa2a <disable_tenant_account+0x7e>
        if (tenants[i].id == tenant_id) {
     9cc:	8d e1       	ldi	r24, 0x1D	; 29
     9ce:	82 9f       	mul	r24, r18
     9d0:	f0 01       	movw	r30, r0
     9d2:	83 9f       	mul	r24, r19
     9d4:	f0 0d       	add	r31, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	e9 5b       	subi	r30, 0xB9	; 185
     9da:	fb 4f       	sbci	r31, 0xFB	; 251
     9dc:	80 81       	ld	r24, Z
     9de:	81 13       	cpse	r24, r17
     9e0:	22 c0       	rjmp	.+68     	; 0xa26 <disable_tenant_account+0x7a>
            tenants[i].rent_paid = 0;  // Reset rent paid to effectively disable the account
     9e2:	8d e1       	ldi	r24, 0x1D	; 29
     9e4:	82 9f       	mul	r24, r18
     9e6:	f0 01       	movw	r30, r0
     9e8:	83 9f       	mul	r24, r19
     9ea:	f0 0d       	add	r31, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	e9 5b       	subi	r30, 0xB9	; 185
     9f0:	fb 4f       	sbci	r31, 0xFB	; 251
     9f2:	14 8e       	std	Z+28, r1	; 0x1c
            save_tenants();
     9f4:	0e 94 32 06 	call	0xc64	; 0xc64 <save_tenants>
            
            char response[50];
            sprintf(response, "Tenant account %d disabled\n", tenant_id);
     9f8:	1f 92       	push	r1
     9fa:	1f 93       	push	r17
     9fc:	88 e8       	ldi	r24, 0x88	; 136
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	8e 01       	movw	r16, r28
     a06:	0f 5f       	subi	r16, 0xFF	; 255
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
     a0a:	1f 93       	push	r17
     a0c:	0f 93       	push	r16
     a0e:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
            uart_print(response);
     a12:	c8 01       	movw	r24, r16
     a14:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0c c0       	rjmp	.+24     	; 0xa3e <disable_tenant_account+0x92>
        uart_print("Error: Invalid floor number\n");
    }
}

void disable_tenant_account(uint8_t tenant_id) {
    for (int i = 0; i < tenant_count; i++) {
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <tenant_count>
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	28 17       	cp	r18, r24
     a32:	39 07       	cpc	r19, r25
     a34:	5c f2       	brlt	.-106    	; 0x9cc <disable_tenant_account+0x20>
            sprintf(response, "Tenant account %d disabled\n", tenant_id);
            uart_print(response);
            return;
        }
    }
    uart_print("Error: Tenant not found\n");
     a36:	84 ea       	ldi	r24, 0xA4	; 164
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
}
     a3e:	e2 96       	adiw	r28, 0x32	; 50
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <process_management_command>:
void save_mall_config(void) {
    // Save mall configuration to EEPROM
    eeprom_write_block((const void*)&mall_config, (void*)0, sizeof(MallConfig));
}

void process_management_command(char* command) {
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <process_management_command+0xa>
     a5e:	1f 92       	push	r1
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	8c 01       	movw	r16, r24
	if (strncmp(command, "rent ", 5) == 0) {
     a66:	45 e0       	ldi	r20, 0x05	; 5
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	6d eb       	ldi	r22, 0xBD	; 189
     a6c:	72 e0       	ldi	r23, 0x02	; 2
     a6e:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     a72:	89 2b       	or	r24, r25
     a74:	e9 f4       	brne	.+58     	; 0xab0 <process_management_command+0x5c>
		uint16_t new_rent;
		sscanf(command + 5, "%hu", &new_rent);
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	8b e0       	ldi	r24, 0x0B	; 11
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	0b 5f       	subi	r16, 0xFB	; 251
     a88:	1f 4f       	sbci	r17, 0xFF	; 255
     a8a:	1f 93       	push	r17
     a8c:	0f 93       	push	r16
     a8e:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		set_base_rent(new_rent);
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	0e 94 06 04 	call	0x80c	; 0x80c <set_base_rent>
		uart_print("\r\n");  // Add new line
     a9a:	83 e3       	ldi	r24, 0x33	; 51
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	5f c0       	rjmp	.+190    	; 0xb6e <process_management_command+0x11a>
		} else if (strncmp(command, "escalator ", 10) == 0) {
     ab0:	4a e0       	ldi	r20, 0x0A	; 10
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	63 ec       	ldi	r22, 0xC3	; 195
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	c8 01       	movw	r24, r16
     aba:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     abe:	89 2b       	or	r24, r25
     ac0:	f9 f4       	brne	.+62     	; 0xb00 <process_management_command+0xac>
		uint8_t floor, state;
		sscanf(command + 10, "%hhu %hhu", &floor, &state);
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	02 96       	adiw	r24, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	8e ec       	ldi	r24, 0xCE	; 206
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	06 5f       	subi	r16, 0xF6	; 246
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	1f 93       	push	r17
     ade:	0f 93       	push	r16
     ae0:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		toggle_escalator(floor, state);
     ae4:	69 81       	ldd	r22, Y+1	; 0x01
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	0e 94 91 04 	call	0x922	; 0x922 <toggle_escalator>
		uart_print("\r\n");  // Add new line
     aec:	83 e3       	ldi	r24, 0x33	; 51
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	37 c0       	rjmp	.+110    	; 0xb6e <process_management_command+0x11a>
		} else if (strncmp(command, "disable ", 8) == 0) {
     b00:	48 e0       	ldi	r20, 0x08	; 8
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	68 ed       	ldi	r22, 0xD8	; 216
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     b0e:	89 2b       	or	r24, r25
     b10:	e1 f4       	brne	.+56     	; 0xb4a <process_management_command+0xf6>
		uint8_t tenant_id;
		sscanf(command + 8, "%hhu", &tenant_id);
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	9f 93       	push	r25
     b18:	8f 93       	push	r24
     b1a:	87 ec       	ldi	r24, 0xC7	; 199
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	08 5f       	subi	r16, 0xF8	; 248
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	1f 93       	push	r17
     b28:	0f 93       	push	r16
     b2a:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		disable_tenant_account(tenant_id);
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	0e 94 d6 04 	call	0x9ac	; 0x9ac <disable_tenant_account>
		uart_print("\r\n");  // Add new line
     b34:	83 e3       	ldi	r24, 0x33	; 51
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <process_management_command+0x11a>
		} else if (strcmp(command, "earnings") == 0) {
     b4a:	61 ee       	ldi	r22, 0xE1	; 225
     b4c:	72 e0       	ldi	r23, 0x02	; 2
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 fd 08 	call	0x11fa	; 0x11fa <strcmp>
     b54:	89 2b       	or	r24, r25
     b56:	39 f4       	brne	.+14     	; 0xb66 <process_management_command+0x112>
		view_total_earnings();
     b58:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <view_total_earnings>
		uart_print("\r\n");  // Add new line
     b5c:	83 e3       	ldi	r24, 0x33	; 51
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <process_management_command+0x11a>
		} else {
		uart_print("Unknown management command\r\n");
     b66:	8a ee       	ldi	r24, 0xEA	; 234
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
}
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <update_total_earnings>:
        }
    }
    uart_print("Error: Tenant not found\n");
}

void update_total_earnings(uint16_t amount) {
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	e2 97       	sbiw	r28, 0x32	; 50
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
    total_earnings += amount;
     b96:	40 91 fc 03 	lds	r20, 0x03FC	; 0x8003fc <total_earnings>
     b9a:	50 91 fd 03 	lds	r21, 0x03FD	; 0x8003fd <total_earnings+0x1>
     b9e:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <total_earnings+0x2>
     ba2:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <total_earnings+0x3>
     ba6:	48 0f       	add	r20, r24
     ba8:	59 1f       	adc	r21, r25
     baa:	61 1d       	adc	r22, r1
     bac:	71 1d       	adc	r23, r1
     bae:	40 93 fc 03 	sts	0x03FC, r20	; 0x8003fc <total_earnings>
     bb2:	50 93 fd 03 	sts	0x03FD, r21	; 0x8003fd <total_earnings+0x1>
     bb6:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <total_earnings+0x2>
     bba:	70 93 ff 03 	sts	0x03FF, r23	; 0x8003ff <total_earnings+0x3>
    
    // Save total earnings in EEPROM
    eeprom_write_block((const void*)&total_earnings, (void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
     bbe:	44 e0       	ldi	r20, 0x04	; 4
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	65 e0       	ldi	r22, 0x05	; 5
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	8c ef       	ldi	r24, 0xFC	; 252
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_write_block>
    
    // Optionally, print the total earnings if needed
    char response[50];
    sprintf(response, "Total earnings updated: $%lu\n", total_earnings);
     bce:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <total_earnings+0x3>
     bd2:	8f 93       	push	r24
     bd4:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <total_earnings+0x2>
     bd8:	8f 93       	push	r24
     bda:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <total_earnings+0x1>
     bde:	8f 93       	push	r24
     be0:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <total_earnings>
     be4:	8f 93       	push	r24
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	8e 01       	movw	r16, r28
     bf0:	0f 5f       	subi	r16, 0xFF	; 255
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	1f 93       	push	r17
     bf6:	0f 93       	push	r16
     bf8:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
    uart_print(response);
     bfc:	c8 01       	movw	r24, r16
     bfe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
}
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	e2 96       	adiw	r28, 0x32	; 50
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <init_tenant_system>:
#define EEPROM_TENANT_COUNT_ADDR 0
#define EEPROM_TENANTS_ADDR (EEPROM_TENANT_COUNT_ADDR + sizeof(uint8_t))

void init_tenant_system(void) {
	// Load tenant count from EEPROM
	eeprom_read_block((void*)&tenant_count, (const void*)EEPROM_TENANT_COUNT_ADDR, sizeof(uint8_t));
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	94 e0       	ldi	r25, 0x04	; 4
     c2e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
	
	// Load tenants from EEPROM
	if (tenant_count > 0 && tenant_count <= MAX_TENANTS) {
     c32:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <tenant_count>
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	84 0f       	add	r24, r20
     c3a:	84 31       	cpi	r24, 0x14	; 20
     c3c:	58 f4       	brcc	.+22     	; 0xc54 <init_tenant_system+0x32>
		eeprom_read_block((void*)tenants, (const void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
     c3e:	8d e1       	ldi	r24, 0x1D	; 29
     c40:	48 9f       	mul	r20, r24
     c42:	a0 01       	movw	r20, r0
     c44:	11 24       	eor	r1, r1
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	87 e4       	ldi	r24, 0x47	; 71
     c4c:	94 e0       	ldi	r25, 0x04	; 4
     c4e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <eeprom_read_block>
     c52:	08 95       	ret
		} else {
		// Initialize tenant count if EEPROM is empty or invalid
		tenant_count = 0;
     c54:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <tenant_count>
		eeprom_write_byte((uint8_t*)EEPROM_TENANT_COUNT_ADDR, tenant_count);
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <eeprom_write_byte>
     c62:	08 95       	ret

00000c64 <save_tenants>:
	}
}

void save_tenants(void) {
	// Save tenant count to EEPROM
	eeprom_write_byte((uint8_t*)EEPROM_TENANT_COUNT_ADDR, tenant_count);
     c64:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <tenant_count>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <eeprom_write_byte>
	
	// Save tenants to EEPROM
	eeprom_write_block((const void*)tenants, (void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
     c70:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <tenant_count>
     c74:	8d e1       	ldi	r24, 0x1D	; 29
     c76:	48 9f       	mul	r20, r24
     c78:	a0 01       	movw	r20, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	87 e4       	ldi	r24, 0x47	; 71
     c82:	94 e0       	ldi	r25, 0x04	; 4
     c84:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <eeprom_write_block>
     c88:	08 95       	ret

00000c8a <add_tenant>:
		} else {
		uart_print("Unknown tenant command\n");
	}
}

void add_tenant(char* name, uint8_t floor) {
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	cf 54       	subi	r28, 0x4F	; 79
     c98:	d1 09       	sbc	r29, r1
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	9c 01       	movw	r18, r24
     ca6:	16 2f       	mov	r17, r22
	if (tenant_count < MAX_TENANTS) {
     ca8:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <tenant_count>
     cac:	94 31       	cpi	r25, 0x14	; 20
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <add_tenant+0x28>
     cb0:	58 c0       	rjmp	.+176    	; 0xd62 <add_tenant+0xd8>
		Tenant new_tenant;
		new_tenant.id = tenant_count + 1;
     cb2:	9f 5f       	subi	r25, 0xFF	; 255
     cb4:	9b ab       	std	Y+51, r25	; 0x33
		strncpy(new_tenant.name, name, 19);
     cb6:	43 e1       	ldi	r20, 0x13	; 19
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	b9 01       	movw	r22, r18
     cbc:	ce 01       	movw	r24, r28
     cbe:	c4 96       	adiw	r24, 0x34	; 52
     cc0:	0e 94 14 09 	call	0x1228	; 0x1228 <strncpy>
		new_tenant.name[19] = '\0';
     cc4:	28 96       	adiw	r28, 0x08	; 8
     cc6:	1f ae       	std	Y+63, r1	; 0x3f
     cc8:	28 97       	sbiw	r28, 0x08	; 8
		new_tenant.floor = floor;
     cca:	29 96       	adiw	r28, 0x09	; 9
     ccc:	1f af       	std	Y+63, r17	; 0x3f
     cce:	29 97       	sbiw	r28, 0x09	; 9
		new_tenant.rent = 0;  // Set initial rent
     cd0:	2b 96       	adiw	r28, 0x0b	; 11
     cd2:	1f ae       	std	Y+63, r1	; 0x3f
     cd4:	1e ae       	std	Y+62, r1	; 0x3e
     cd6:	2b 97       	sbiw	r28, 0x0b	; 11
		new_tenant.rent_paid = 0;
     cd8:	60 96       	adiw	r28, 0x10	; 16
     cda:	1f ae       	std	Y+63, r1	; 0x3f
     cdc:	60 97       	sbiw	r28, 0x10	; 16
		
		// Generate washroom code
		for (int i = 0; i < 4; i++) {
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	0f c0       	rjmp	.+30     	; 0xd02 <add_tenant+0x78>
			new_tenant.washroom_code[i] = rand() % 10;
     ce4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <rand>
     ce8:	6a e0       	ldi	r22, 0x0A	; 10
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__divmodhi4>
     cf0:	eb e4       	ldi	r30, 0x4B	; 75
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	ec 0f       	add	r30, r28
     cf6:	fd 1f       	adc	r31, r29
     cf8:	e0 0f       	add	r30, r16
     cfa:	f1 1f       	adc	r31, r17
     cfc:	80 83       	st	Z, r24
		new_tenant.floor = floor;
		new_tenant.rent = 0;  // Set initial rent
		new_tenant.rent_paid = 0;
		
		// Generate washroom code
		for (int i = 0; i < 4; i++) {
     cfe:	0f 5f       	subi	r16, 0xFF	; 255
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	04 30       	cpi	r16, 0x04	; 4
     d04:	11 05       	cpc	r17, r1
     d06:	74 f3       	brlt	.-36     	; 0xce4 <add_tenant+0x5a>
			new_tenant.washroom_code[i] = rand() % 10;
		}
		
		tenants[tenant_count++] = new_tenant;
     d08:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <tenant_count>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8a 0f       	add	r24, r26
     d10:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <tenant_count>
     d14:	8d e1       	ldi	r24, 0x1D	; 29
     d16:	a8 9f       	mul	r26, r24
     d18:	d0 01       	movw	r26, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	a9 5b       	subi	r26, 0xB9	; 185
     d1e:	bb 4f       	sbci	r27, 0xFB	; 251
     d20:	8d e1       	ldi	r24, 0x1D	; 29
     d22:	fe 01       	movw	r30, r28
     d24:	f3 96       	adiw	r30, 0x33	; 51
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	8a 95       	dec	r24
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <add_tenant+0x9c>
		save_tenants();
     d2e:	0e 94 32 06 	call	0xc64	; 0xc64 <save_tenants>
		
		char response[50];
		sprintf(response, "Tenant added. ID: %d\n", new_tenant.id);
     d32:	8b a9       	ldd	r24, Y+51	; 0x33
     d34:	1f 92       	push	r1
     d36:	8f 93       	push	r24
     d38:	85 e2       	ldi	r24, 0x25	; 37
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	8e 01       	movw	r16, r28
     d42:	0f 5f       	subi	r16, 0xFF	; 255
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	1f 93       	push	r17
     d48:	0f 93       	push	r16
     d4a:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
		uart_print(response);
     d4e:	c8 01       	movw	r24, r16
     d50:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <add_tenant+0xe0>
		} else {
		uart_print("Error: Maximum number of tenants reached\n");
     d62:	8b e3       	ldi	r24, 0x3B	; 59
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
}
     d6a:	c1 5b       	subi	r28, 0xB1	; 177
     d6c:	df 4f       	sbci	r29, 0xFF	; 255
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <remove_tenant>:

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	34 c0       	rjmp	.+104    	; 0xdf0 <remove_tenant+0x6e>
		if (tenants[i].id == id) {
     d88:	9d e1       	ldi	r25, 0x1D	; 29
     d8a:	92 9f       	mul	r25, r18
     d8c:	f0 01       	movw	r30, r0
     d8e:	93 9f       	mul	r25, r19
     d90:	f0 0d       	add	r31, r0
     d92:	11 24       	eor	r1, r1
     d94:	e9 5b       	subi	r30, 0xB9	; 185
     d96:	fb 4f       	sbci	r31, 0xFB	; 251
     d98:	90 81       	ld	r25, Z
     d9a:	98 13       	cpse	r25, r24
     d9c:	27 c0       	rjmp	.+78     	; 0xdec <remove_tenant+0x6a>
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <remove_tenant+0x4c>
			for (int j = i; j < tenant_count - 1; j++) {
				tenants[j] = tenants[j+1];
     da0:	c9 01       	movw	r24, r18
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	6d e1       	ldi	r22, 0x1D	; 29
     da6:	62 9f       	mul	r22, r18
     da8:	d0 01       	movw	r26, r0
     daa:	63 9f       	mul	r22, r19
     dac:	b0 0d       	add	r27, r0
     dae:	11 24       	eor	r1, r1
     db0:	a9 5b       	subi	r26, 0xB9	; 185
     db2:	bb 4f       	sbci	r27, 0xFB	; 251
     db4:	68 9f       	mul	r22, r24
     db6:	f0 01       	movw	r30, r0
     db8:	69 9f       	mul	r22, r25
     dba:	f0 0d       	add	r31, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	e9 5b       	subi	r30, 0xB9	; 185
     dc0:	fb 4f       	sbci	r31, 0xFB	; 251
     dc2:	2d e1       	ldi	r18, 0x1D	; 29
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	2a 95       	dec	r18
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <remove_tenant+0x42>
}

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
		if (tenants[i].id == id) {
			for (int j = i; j < tenant_count - 1; j++) {
     dcc:	9c 01       	movw	r18, r24
     dce:	ca 01       	movw	r24, r20
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	24 f3       	brlt	.-56     	; 0xda0 <remove_tenant+0x1e>
				tenants[j] = tenants[j+1];
			}
			tenant_count--;
     dd8:	71 50       	subi	r23, 0x01	; 1
     dda:	70 93 00 04 	sts	0x0400, r23	; 0x800400 <tenant_count>
			save_tenants();
     dde:	0e 94 32 06 	call	0xc64	; 0xc64 <save_tenants>
			uart_print("Tenant removed\n");
     de2:	85 e6       	ldi	r24, 0x65	; 101
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
			return;
     dea:	08 95       	ret
		uart_print("Error: Maximum number of tenants reached\n");
	}
}

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	70 91 00 04 	lds	r23, 0x0400	; 0x800400 <tenant_count>
     df4:	47 2f       	mov	r20, r23
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	24 17       	cp	r18, r20
     dfa:	35 07       	cpc	r19, r21
     dfc:	2c f2       	brlt	.-118    	; 0xd88 <remove_tenant+0x6>
			save_tenants();
			uart_print("Tenant removed\n");
			return;
		}
	}
	uart_print("Error: Tenant not found\n");
     dfe:	84 ea       	ldi	r24, 0xA4	; 164
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     e06:	08 95       	ret

00000e08 <pay_rent>:
}

void pay_rent(uint8_t id, uint16_t amount) {
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	e2 97       	sbiw	r28, 0x32	; 50
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	f6 2e       	mov	r15, r22
     e26:	e7 2e       	mov	r14, r23
	for (int i = 0; i < tenant_count; i++) {
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	30 c0       	rjmp	.+96     	; 0xe8e <pay_rent+0x86>
		if (tenants[i].id == id) {
     e2e:	9d e1       	ldi	r25, 0x1D	; 29
     e30:	94 9f       	mul	r25, r20
     e32:	f0 01       	movw	r30, r0
     e34:	95 9f       	mul	r25, r21
     e36:	f0 0d       	add	r31, r0
     e38:	11 24       	eor	r1, r1
     e3a:	e9 5b       	subi	r30, 0xB9	; 185
     e3c:	fb 4f       	sbci	r31, 0xFB	; 251
     e3e:	90 81       	ld	r25, Z
     e40:	98 13       	cpse	r25, r24
     e42:	23 c0       	rjmp	.+70     	; 0xe8a <pay_rent+0x82>
			tenants[i].rent_paid += amount;
     e44:	8f 01       	movw	r16, r30
     e46:	84 8d       	ldd	r24, Z+28	; 0x1c
     e48:	8f 0d       	add	r24, r15
     e4a:	84 8f       	std	Z+28, r24	; 0x1c
			save_tenants();
     e4c:	0e 94 32 06 	call	0xc64	; 0xc64 <save_tenants>
			
			// Update total earnings
			update_total_earnings(amount);
     e50:	8f 2d       	mov	r24, r15
     e52:	9e 2d       	mov	r25, r14
     e54:	0e 94 bf 05 	call	0xb7e	; 0xb7e <update_total_earnings>
			
			char response[50];
			sprintf(response, "Rent paid. New balance: $%d\n", tenants[i].rent_paid);
     e58:	f8 01       	movw	r30, r16
     e5a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e5c:	1f 92       	push	r1
     e5e:	8f 93       	push	r24
     e60:	85 e7       	ldi	r24, 0x75	; 117
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	9f 93       	push	r25
     e66:	8f 93       	push	r24
     e68:	8e 01       	movw	r16, r28
     e6a:	0f 5f       	subi	r16, 0xFF	; 255
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	1f 93       	push	r17
     e70:	0f 93       	push	r16
     e72:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
			uart_print(response);
     e76:	c8 01       	movw	r24, r16
     e78:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0c c0       	rjmp	.+24     	; 0xea2 <pay_rent+0x9a>
	}
	uart_print("Error: Tenant not found\n");
}

void pay_rent(uint8_t id, uint16_t amount) {
	for (int i = 0; i < tenant_count; i++) {
     e8a:	4f 5f       	subi	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <tenant_count>
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	42 17       	cp	r20, r18
     e96:	53 07       	cpc	r21, r19
     e98:	54 f2       	brlt	.-108    	; 0xe2e <pay_rent+0x26>
			sprintf(response, "Rent paid. New balance: $%d\n", tenants[i].rent_paid);
			uart_print(response);
			return;
		}
	}
	uart_print("Error: Tenant not found\n");
     e9a:	84 ea       	ldi	r24, 0xA4	; 164
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
}
     ea2:	e2 96       	adiw	r28, 0x32	; 50
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	08 95       	ret

00000ebc <list_tenants>:

void list_tenants(void) {
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	c4 56       	subi	r28, 0x64	; 100
     ece:	d1 09       	sbc	r29, r1
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < tenant_count; i++) {
     eda:	00 e0       	ldi	r16, 0x00	; 0
     edc:	10 e0       	ldi	r17, 0x00	; 0
     ede:	2b c0       	rjmp	.+86     	; 0xf36 <list_tenants+0x7a>
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
     ee0:	2d e1       	ldi	r18, 0x1D	; 29
     ee2:	20 9f       	mul	r18, r16
     ee4:	c0 01       	movw	r24, r0
     ee6:	21 9f       	mul	r18, r17
     ee8:	90 0d       	add	r25, r0
     eea:	11 24       	eor	r1, r1
     eec:	fc 01       	movw	r30, r24
     eee:	e9 5b       	subi	r30, 0xB9	; 185
     ef0:	fb 4f       	sbci	r31, 0xFB	; 251
     ef2:	44 8d       	ldd	r20, Z+28	; 0x1c
     ef4:	35 89       	ldd	r19, Z+21	; 0x15
     ef6:	88 5b       	subi	r24, 0xB8	; 184
     ef8:	9b 4f       	sbci	r25, 0xFB	; 251
     efa:	20 81       	ld	r18, Z
}

void list_tenants(void) {
	for (int i = 0; i < tenant_count; i++) {
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
     efc:	1f 92       	push	r1
     efe:	4f 93       	push	r20
     f00:	1f 92       	push	r1
     f02:	3f 93       	push	r19
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	1f 92       	push	r1
     f0a:	2f 93       	push	r18
     f0c:	82 e9       	ldi	r24, 0x92	; 146
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	7c 01       	movw	r14, r24
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	0e 94 23 09 	call	0x1246	; 0x1246 <sprintf>
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
		uart_print(tenant_info);
     f22:	c7 01       	movw	r24, r14
     f24:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
	uart_print("Error: Tenant not found\n");
}

void list_tenants(void) {
	for (int i = 0; i < tenant_count; i++) {
     f28:	0f 5f       	subi	r16, 0xFF	; 255
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <tenant_count>
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 17       	cp	r16, r24
     f3e:	19 07       	cpc	r17, r25
     f40:	7c f2       	brlt	.-98     	; 0xee0 <list_tenants+0x24>
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
		uart_print(tenant_info);
	}
     f42:	cc 59       	subi	r28, 0x9C	; 156
     f44:	df 4f       	sbci	r29, 0xFF	; 255
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	08 95       	ret

00000f5e <process_tenant_command>:
	
	// Save tenants to EEPROM
	eeprom_write_block((const void*)tenants, (void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
}

void process_tenant_command(char* command) {
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	65 97       	sbiw	r28, 0x15	; 21
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	8c 01       	movw	r16, r24
	char response[100];
	if (strncmp(command, "add ", 4) == 0) {
     f7c:	44 e0       	ldi	r20, 0x04	; 4
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	6f eb       	ldi	r22, 0xBF	; 191
     f82:	73 e0       	ldi	r23, 0x03	; 3
     f84:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     f88:	89 2b       	or	r24, r25
     f8a:	e1 f4       	brne	.+56     	; 0xfc4 <process_tenant_command+0x66>
		char name[20];
		uint8_t floor;
		sscanf(command + 4, "%s %hhu", name, &floor);
     f8c:	ce 01       	movw	r24, r28
     f8e:	45 96       	adiw	r24, 0x15	; 21
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	44 97       	sbiw	r24, 0x14	; 20
     f96:	7c 01       	movw	r14, r24
     f98:	9f 93       	push	r25
     f9a:	8f 93       	push	r24
     f9c:	84 ec       	ldi	r24, 0xC4	; 196
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	9f 93       	push	r25
     fa2:	8f 93       	push	r24
     fa4:	0c 5f       	subi	r16, 0xFC	; 252
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	1f 93       	push	r17
     faa:	0f 93       	push	r16
     fac:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		add_tenant(name, floor);
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	c7 01       	movw	r24, r14
     fb4:	0e 94 45 06 	call	0xc8a	; 0xc8a <add_tenant>
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	54 c0       	rjmp	.+168    	; 0x106c <process_tenant_command+0x10e>
		} else if (strncmp(command, "remove ", 7) == 0) {
     fc4:	47 e0       	ldi	r20, 0x07	; 7
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	6c ec       	ldi	r22, 0xCC	; 204
     fca:	73 e0       	ldi	r23, 0x03	; 3
     fcc:	c8 01       	movw	r24, r16
     fce:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
     fd2:	89 2b       	or	r24, r25
     fd4:	c1 f4       	brne	.+48     	; 0x1006 <process_tenant_command+0xa8>
		uint8_t id;
		sscanf(command + 7, "%hhu", &id);
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	9f 93       	push	r25
     fdc:	8f 93       	push	r24
     fde:	87 ec       	ldi	r24, 0xC7	; 199
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	9f 93       	push	r25
     fe4:	8f 93       	push	r24
     fe6:	09 5f       	subi	r16, 0xF9	; 249
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	1f 93       	push	r17
     fec:	0f 93       	push	r16
     fee:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		remove_tenant(id);
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	0e 94 c1 06 	call	0xd82	; 0xd82 <remove_tenant>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	33 c0       	rjmp	.+102    	; 0x106c <process_tenant_command+0x10e>
		} else if (strncmp(command, "pay ", 4) == 0) {
    1006:	44 e0       	ldi	r20, 0x04	; 4
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	64 ed       	ldi	r22, 0xD4	; 212
    100c:	73 e0       	ldi	r23, 0x03	; 3
    100e:	c8 01       	movw	r24, r16
    1010:	0e 94 06 09 	call	0x120c	; 0x120c <strncmp>
    1014:	89 2b       	or	r24, r25
    1016:	e1 f4       	brne	.+56     	; 0x1050 <process_tenant_command+0xf2>
		uint8_t id;
		uint16_t amount;
		sscanf(command + 4, "%hhu %hu", &id, &amount);
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	9f 93       	push	r25
    101e:	8f 93       	push	r24
    1020:	44 96       	adiw	r24, 0x14	; 20
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	9f 93       	push	r25
    102c:	8f 93       	push	r24
    102e:	0c 5f       	subi	r16, 0xFC	; 252
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	1f 93       	push	r17
    1034:	0f 93       	push	r16
    1036:	0e 94 45 09 	call	0x128a	; 0x128a <sscanf>
		pay_rent(id, amount);
    103a:	69 81       	ldd	r22, Y+1	; 0x01
    103c:	7a 81       	ldd	r23, Y+2	; 0x02
    103e:	8d 89       	ldd	r24, Y+21	; 0x15
    1040:	0e 94 04 07 	call	0xe08	; 0xe08 <pay_rent>
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	0e c0       	rjmp	.+28     	; 0x106c <process_tenant_command+0x10e>
		} else if (strcmp(command, "list") == 0) {
    1050:	69 ed       	ldi	r22, 0xD9	; 217
    1052:	73 e0       	ldi	r23, 0x03	; 3
    1054:	c8 01       	movw	r24, r16
    1056:	0e 94 fd 08 	call	0x11fa	; 0x11fa <strcmp>
    105a:	89 2b       	or	r24, r25
    105c:	19 f4       	brne	.+6      	; 0x1064 <process_tenant_command+0x106>
		list_tenants();
    105e:	0e 94 5e 07 	call	0xebc	; 0xebc <list_tenants>
    1062:	04 c0       	rjmp	.+8      	; 0x106c <process_tenant_command+0x10e>
		} else {
		uart_print("Unknown tenant command\n");
    1064:	8e ed       	ldi	r24, 0xDE	; 222
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	0e 94 59 08 	call	0x10b2	; 0x10b2 <uart_print>
	}
}
    106c:	65 96       	adiw	r28, 0x15	; 21
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	08 95       	ret

00001086 <uart_init>:
#include "uart.h"

#include <util/delay.h>

void uart_init(void) {
	UBRRH = 0x00;
    1086:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x33;
    1088:	83 e3       	ldi	r24, 0x33	; 51
    108a:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN);
    108c:	88 e1       	ldi	r24, 0x18	; 24
    108e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	80 bd       	out	0x20, r24	; 32
    1094:	08 95       	ret

00001096 <uart_transmit>:
	
}

void uart_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSRA & (1<<UDRE)));
    1096:	5d 9b       	sbis	0x0b, 5	; 11
    1098:	fe cf       	rjmp	.-4      	; 0x1096 <uart_transmit>
	// Put data into buffer, sends the data
	UDR = data;
    109a:	8c b9       	out	0x0c, r24	; 12
    109c:	89 ef       	ldi	r24, 0xF9	; 249
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <uart_transmit+0xa>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <uart_transmit+0x10>
    10a6:	00 00       	nop
    10a8:	08 95       	ret

000010aa <uart_receive>:
	_delay_ms(1);
}

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSRA & (1<<RXC)));
    10aa:	5f 9b       	sbis	0x0b, 7	; 11
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <uart_receive>
	// Get and return received data from buffer
	return UDR;
    10ae:	8c b1       	in	r24, 0x0c	; 12
}
    10b0:	08 95       	ret

000010b2 <uart_print>:

void uart_print(char* str) {
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
	while (*str) {
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <uart_print+0x1a>
		uart_transmit(*str);
    10ba:	0e 94 4b 08 	call	0x1096	; 0x1096 <uart_transmit>
    10be:	89 ef       	ldi	r24, 0xF9	; 249
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <uart_print+0x10>
    10c6:	00 c0       	rjmp	.+0      	; 0x10c8 <uart_print+0x16>
    10c8:	00 00       	nop
		_delay_ms(1);
		str++;
    10ca:	21 96       	adiw	r28, 0x01	; 1
	// Get and return received data from buffer
	return UDR;
}

void uart_print(char* str) {
	while (*str) {
    10cc:	88 81       	ld	r24, Y
    10ce:	81 11       	cpse	r24, r1
    10d0:	f4 cf       	rjmp	.-24     	; 0x10ba <uart_print+0x8>
		uart_transmit(*str);
		_delay_ms(1);
		str++;
	}
	// Add a delay after sending the entire string
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <__divmodhi4>:
    10d8:	97 fb       	bst	r25, 7
    10da:	07 2e       	mov	r0, r23
    10dc:	16 f4       	brtc	.+4      	; 0x10e2 <__divmodhi4+0xa>
    10de:	00 94       	com	r0
    10e0:	07 d0       	rcall	.+14     	; 0x10f0 <__divmodhi4_neg1>
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	09 d0       	rcall	.+18     	; 0x10f8 <__divmodhi4_neg2>
    10e6:	0e 94 80 08 	call	0x1100	; 0x1100 <__udivmodhi4>
    10ea:	07 fc       	sbrc	r0, 7
    10ec:	05 d0       	rcall	.+10     	; 0x10f8 <__divmodhi4_neg2>
    10ee:	3e f4       	brtc	.+14     	; 0x10fe <__divmodhi4_exit>

000010f0 <__divmodhi4_neg1>:
    10f0:	90 95       	com	r25
    10f2:	81 95       	neg	r24
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__divmodhi4_neg2>:
    10f8:	70 95       	com	r23
    10fa:	61 95       	neg	r22
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255

000010fe <__divmodhi4_exit>:
    10fe:	08 95       	ret

00001100 <__udivmodhi4>:
    1100:	aa 1b       	sub	r26, r26
    1102:	bb 1b       	sub	r27, r27
    1104:	51 e1       	ldi	r21, 0x11	; 17
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <__udivmodhi4_ep>

00001108 <__udivmodhi4_loop>:
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	a6 17       	cp	r26, r22
    110e:	b7 07       	cpc	r27, r23
    1110:	10 f0       	brcs	.+4      	; 0x1116 <__udivmodhi4_ep>
    1112:	a6 1b       	sub	r26, r22
    1114:	b7 0b       	sbc	r27, r23

00001116 <__udivmodhi4_ep>:
    1116:	88 1f       	adc	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	5a 95       	dec	r21
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__udivmodhi4_loop>
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	08 95       	ret

00001128 <do_rand>:
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    113e:	68 81       	ld	r22, Y
    1140:	79 81       	ldd	r23, Y+1	; 0x01
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	61 15       	cp	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	81 05       	cpc	r24, r1
    114c:	91 05       	cpc	r25, r1
    114e:	21 f4       	brne	.+8      	; 0x1158 <do_rand+0x30>
    1150:	64 e2       	ldi	r22, 0x24	; 36
    1152:	79 ed       	ldi	r23, 0xD9	; 217
    1154:	8b e5       	ldi	r24, 0x5B	; 91
    1156:	97 e0       	ldi	r25, 0x07	; 7
    1158:	2d e1       	ldi	r18, 0x1D	; 29
    115a:	33 ef       	ldi	r19, 0xF3	; 243
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__divmodsi4>
    1164:	49 01       	movw	r8, r18
    1166:	5a 01       	movw	r10, r20
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	a7 ea       	ldi	r26, 0xA7	; 167
    116e:	b1 e4       	ldi	r27, 0x41	; 65
    1170:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__muluhisi3>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	ac ee       	ldi	r26, 0xEC	; 236
    117a:	b4 ef       	ldi	r27, 0xF4	; 244
    117c:	a5 01       	movw	r20, r10
    117e:	94 01       	movw	r18, r8
    1180:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulohisi3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	8c 0d       	add	r24, r12
    118a:	9d 1d       	adc	r25, r13
    118c:	ae 1d       	adc	r26, r14
    118e:	bf 1d       	adc	r27, r15
    1190:	b7 ff       	sbrs	r27, 7
    1192:	03 c0       	rjmp	.+6      	; 0x119a <do_rand+0x72>
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	a1 09       	sbc	r26, r1
    1198:	b0 48       	sbci	r27, 0x80	; 128
    119a:	88 83       	st	Y, r24
    119c:	99 83       	std	Y+1, r25	; 0x01
    119e:	aa 83       	std	Y+2, r26	; 0x02
    11a0:	bb 83       	std	Y+3, r27	; 0x03
    11a2:	9f 77       	andi	r25, 0x7F	; 127
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	08 95       	ret

000011ba <rand_r>:
    11ba:	0e 94 94 08 	call	0x1128	; 0x1128 <do_rand>
    11be:	08 95       	ret

000011c0 <rand>:
    11c0:	80 e6       	ldi	r24, 0x60	; 96
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 94 08 	call	0x1128	; 0x1128 <do_rand>
    11c8:	08 95       	ret

000011ca <srand>:
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    11d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11d6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11da:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11de:	08 95       	ret

000011e0 <memcmp>:
    11e0:	fb 01       	movw	r30, r22
    11e2:	dc 01       	movw	r26, r24
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <memcmp+0xe>
    11e6:	8d 91       	ld	r24, X+
    11e8:	01 90       	ld	r0, Z+
    11ea:	80 19       	sub	r24, r0
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <memcmp+0x16>
    11ee:	41 50       	subi	r20, 0x01	; 1
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	c8 f7       	brcc	.-14     	; 0x11e6 <memcmp+0x6>
    11f4:	88 1b       	sub	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	08 95       	ret

000011fa <strcmp>:
    11fa:	fb 01       	movw	r30, r22
    11fc:	dc 01       	movw	r26, r24
    11fe:	8d 91       	ld	r24, X+
    1200:	01 90       	ld	r0, Z+
    1202:	80 19       	sub	r24, r0
    1204:	01 10       	cpse	r0, r1
    1206:	d9 f3       	breq	.-10     	; 0x11fe <strcmp+0x4>
    1208:	99 0b       	sbc	r25, r25
    120a:	08 95       	ret

0000120c <strncmp>:
    120c:	fb 01       	movw	r30, r22
    120e:	dc 01       	movw	r26, r24
    1210:	41 50       	subi	r20, 0x01	; 1
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	30 f0       	brcs	.+12     	; 0x1222 <strncmp+0x16>
    1216:	8d 91       	ld	r24, X+
    1218:	01 90       	ld	r0, Z+
    121a:	80 19       	sub	r24, r0
    121c:	19 f4       	brne	.+6      	; 0x1224 <strncmp+0x18>
    121e:	00 20       	and	r0, r0
    1220:	b9 f7       	brne	.-18     	; 0x1210 <strncmp+0x4>
    1222:	88 1b       	sub	r24, r24
    1224:	99 0b       	sbc	r25, r25
    1226:	08 95       	ret

00001228 <strncpy>:
    1228:	fb 01       	movw	r30, r22
    122a:	dc 01       	movw	r26, r24
    122c:	41 50       	subi	r20, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	48 f0       	brcs	.+18     	; 0x1244 <strncpy+0x1c>
    1232:	01 90       	ld	r0, Z+
    1234:	0d 92       	st	X+, r0
    1236:	00 20       	and	r0, r0
    1238:	c9 f7       	brne	.-14     	; 0x122c <strncpy+0x4>
    123a:	01 c0       	rjmp	.+2      	; 0x123e <strncpy+0x16>
    123c:	1d 92       	st	X+, r1
    123e:	41 50       	subi	r20, 0x01	; 1
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	e0 f7       	brcc	.-8      	; 0x123c <strncpy+0x14>
    1244:	08 95       	ret

00001246 <sprintf>:
    1246:	ae e0       	ldi	r26, 0x0E	; 14
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f9 e0       	ldi	r31, 0x09	; 9
    124e:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__prologue_saves__+0x1c>
    1252:	0d 89       	ldd	r16, Y+21	; 0x15
    1254:	1e 89       	ldd	r17, Y+22	; 0x16
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	8c 83       	std	Y+4, r24	; 0x04
    125a:	1a 83       	std	Y+2, r17	; 0x02
    125c:	09 83       	std	Y+1, r16	; 0x01
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	9f e7       	ldi	r25, 0x7F	; 127
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	ae 01       	movw	r20, r28
    1268:	47 5e       	subi	r20, 0xE7	; 231
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	6f 89       	ldd	r22, Y+23	; 0x17
    126e:	78 8d       	ldd	r23, Y+24	; 0x18
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 5e 09 	call	0x12bc	; 0x12bc <vfprintf>
    1278:	ef 81       	ldd	r30, Y+7	; 0x07
    127a:	f8 85       	ldd	r31, Y+8	; 0x08
    127c:	e0 0f       	add	r30, r16
    127e:	f1 1f       	adc	r31, r17
    1280:	10 82       	st	Z, r1
    1282:	2e 96       	adiw	r28, 0x0e	; 14
    1284:	e4 e0       	ldi	r30, 0x04	; 4
    1286:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__epilogue_restores__+0x1c>

0000128a <sscanf>:
    128a:	ae e0       	ldi	r26, 0x0E	; 14
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e4       	ldi	r30, 0x4B	; 75
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__prologue_saves__+0x20>
    1296:	85 e0       	ldi	r24, 0x05	; 5
    1298:	8c 83       	std	Y+4, r24	; 0x04
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	9a 83       	std	Y+2, r25	; 0x02
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	ae 01       	movw	r20, r28
    12a4:	49 5e       	subi	r20, 0xE9	; 233
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	6d 89       	ldd	r22, Y+21	; 0x15
    12aa:	7e 89       	ldd	r23, Y+22	; 0x16
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <vfscanf>
    12b4:	2e 96       	adiw	r28, 0x0e	; 14
    12b6:	e2 e0       	ldi	r30, 0x02	; 2
    12b8:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__epilogue_restores__+0x20>

000012bc <vfprintf>:
    12bc:	ab e0       	ldi	r26, 0x0B	; 11
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e4 e6       	ldi	r30, 0x64	; 100
    12c2:	f9 e0       	ldi	r31, 0x09	; 9
    12c4:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__>
    12c8:	6c 01       	movw	r12, r24
    12ca:	7b 01       	movw	r14, r22
    12cc:	8a 01       	movw	r16, r20
    12ce:	fc 01       	movw	r30, r24
    12d0:	17 82       	std	Z+7, r1	; 0x07
    12d2:	16 82       	std	Z+6, r1	; 0x06
    12d4:	83 81       	ldd	r24, Z+3	; 0x03
    12d6:	81 ff       	sbrs	r24, 1
    12d8:	cc c1       	rjmp	.+920    	; 0x1672 <vfprintf+0x3b6>
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	3c 01       	movw	r6, r24
    12e0:	f6 01       	movw	r30, r12
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	f7 01       	movw	r30, r14
    12e6:	93 fd       	sbrc	r25, 3
    12e8:	85 91       	lpm	r24, Z+
    12ea:	93 ff       	sbrs	r25, 3
    12ec:	81 91       	ld	r24, Z+
    12ee:	7f 01       	movw	r14, r30
    12f0:	88 23       	and	r24, r24
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <vfprintf+0x3a>
    12f4:	ba c1       	rjmp	.+884    	; 0x166a <vfprintf+0x3ae>
    12f6:	85 32       	cpi	r24, 0x25	; 37
    12f8:	39 f4       	brne	.+14     	; 0x1308 <vfprintf+0x4c>
    12fa:	93 fd       	sbrc	r25, 3
    12fc:	85 91       	lpm	r24, Z+
    12fe:	93 ff       	sbrs	r25, 3
    1300:	81 91       	ld	r24, Z+
    1302:	7f 01       	movw	r14, r30
    1304:	85 32       	cpi	r24, 0x25	; 37
    1306:	29 f4       	brne	.+10     	; 0x1312 <vfprintf+0x56>
    1308:	b6 01       	movw	r22, r12
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    1310:	e7 cf       	rjmp	.-50     	; 0x12e0 <vfprintf+0x24>
    1312:	91 2c       	mov	r9, r1
    1314:	21 2c       	mov	r2, r1
    1316:	31 2c       	mov	r3, r1
    1318:	ff e1       	ldi	r31, 0x1F	; 31
    131a:	f3 15       	cp	r31, r3
    131c:	d8 f0       	brcs	.+54     	; 0x1354 <vfprintf+0x98>
    131e:	8b 32       	cpi	r24, 0x2B	; 43
    1320:	79 f0       	breq	.+30     	; 0x1340 <vfprintf+0x84>
    1322:	38 f4       	brcc	.+14     	; 0x1332 <vfprintf+0x76>
    1324:	80 32       	cpi	r24, 0x20	; 32
    1326:	79 f0       	breq	.+30     	; 0x1346 <vfprintf+0x8a>
    1328:	83 32       	cpi	r24, 0x23	; 35
    132a:	a1 f4       	brne	.+40     	; 0x1354 <vfprintf+0x98>
    132c:	23 2d       	mov	r18, r3
    132e:	20 61       	ori	r18, 0x10	; 16
    1330:	1d c0       	rjmp	.+58     	; 0x136c <vfprintf+0xb0>
    1332:	8d 32       	cpi	r24, 0x2D	; 45
    1334:	61 f0       	breq	.+24     	; 0x134e <vfprintf+0x92>
    1336:	80 33       	cpi	r24, 0x30	; 48
    1338:	69 f4       	brne	.+26     	; 0x1354 <vfprintf+0x98>
    133a:	23 2d       	mov	r18, r3
    133c:	21 60       	ori	r18, 0x01	; 1
    133e:	16 c0       	rjmp	.+44     	; 0x136c <vfprintf+0xb0>
    1340:	83 2d       	mov	r24, r3
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	38 2e       	mov	r3, r24
    1346:	e3 2d       	mov	r30, r3
    1348:	e4 60       	ori	r30, 0x04	; 4
    134a:	3e 2e       	mov	r3, r30
    134c:	2a c0       	rjmp	.+84     	; 0x13a2 <vfprintf+0xe6>
    134e:	f3 2d       	mov	r31, r3
    1350:	f8 60       	ori	r31, 0x08	; 8
    1352:	1d c0       	rjmp	.+58     	; 0x138e <vfprintf+0xd2>
    1354:	37 fc       	sbrc	r3, 7
    1356:	2d c0       	rjmp	.+90     	; 0x13b2 <vfprintf+0xf6>
    1358:	20 ed       	ldi	r18, 0xD0	; 208
    135a:	28 0f       	add	r18, r24
    135c:	2a 30       	cpi	r18, 0x0A	; 10
    135e:	40 f0       	brcs	.+16     	; 0x1370 <vfprintf+0xb4>
    1360:	8e 32       	cpi	r24, 0x2E	; 46
    1362:	b9 f4       	brne	.+46     	; 0x1392 <vfprintf+0xd6>
    1364:	36 fc       	sbrc	r3, 6
    1366:	81 c1       	rjmp	.+770    	; 0x166a <vfprintf+0x3ae>
    1368:	23 2d       	mov	r18, r3
    136a:	20 64       	ori	r18, 0x40	; 64
    136c:	32 2e       	mov	r3, r18
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <vfprintf+0xe6>
    1370:	36 fe       	sbrs	r3, 6
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <vfprintf+0xc4>
    1374:	8a e0       	ldi	r24, 0x0A	; 10
    1376:	98 9e       	mul	r9, r24
    1378:	20 0d       	add	r18, r0
    137a:	11 24       	eor	r1, r1
    137c:	92 2e       	mov	r9, r18
    137e:	11 c0       	rjmp	.+34     	; 0x13a2 <vfprintf+0xe6>
    1380:	ea e0       	ldi	r30, 0x0A	; 10
    1382:	2e 9e       	mul	r2, r30
    1384:	20 0d       	add	r18, r0
    1386:	11 24       	eor	r1, r1
    1388:	22 2e       	mov	r2, r18
    138a:	f3 2d       	mov	r31, r3
    138c:	f0 62       	ori	r31, 0x20	; 32
    138e:	3f 2e       	mov	r3, r31
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <vfprintf+0xe6>
    1392:	8c 36       	cpi	r24, 0x6C	; 108
    1394:	21 f4       	brne	.+8      	; 0x139e <vfprintf+0xe2>
    1396:	83 2d       	mov	r24, r3
    1398:	80 68       	ori	r24, 0x80	; 128
    139a:	38 2e       	mov	r3, r24
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0xe6>
    139e:	88 36       	cpi	r24, 0x68	; 104
    13a0:	41 f4       	brne	.+16     	; 0x13b2 <vfprintf+0xf6>
    13a2:	f7 01       	movw	r30, r14
    13a4:	93 fd       	sbrc	r25, 3
    13a6:	85 91       	lpm	r24, Z+
    13a8:	93 ff       	sbrs	r25, 3
    13aa:	81 91       	ld	r24, Z+
    13ac:	7f 01       	movw	r14, r30
    13ae:	81 11       	cpse	r24, r1
    13b0:	b3 cf       	rjmp	.-154    	; 0x1318 <vfprintf+0x5c>
    13b2:	98 2f       	mov	r25, r24
    13b4:	9f 7d       	andi	r25, 0xDF	; 223
    13b6:	95 54       	subi	r25, 0x45	; 69
    13b8:	93 30       	cpi	r25, 0x03	; 3
    13ba:	28 f4       	brcc	.+10     	; 0x13c6 <vfprintf+0x10a>
    13bc:	0c 5f       	subi	r16, 0xFC	; 252
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	9f e3       	ldi	r25, 0x3F	; 63
    13c2:	99 83       	std	Y+1, r25	; 0x01
    13c4:	0d c0       	rjmp	.+26     	; 0x13e0 <vfprintf+0x124>
    13c6:	83 36       	cpi	r24, 0x63	; 99
    13c8:	31 f0       	breq	.+12     	; 0x13d6 <vfprintf+0x11a>
    13ca:	83 37       	cpi	r24, 0x73	; 115
    13cc:	71 f0       	breq	.+28     	; 0x13ea <vfprintf+0x12e>
    13ce:	83 35       	cpi	r24, 0x53	; 83
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <vfprintf+0x118>
    13d2:	59 c0       	rjmp	.+178    	; 0x1486 <vfprintf+0x1ca>
    13d4:	21 c0       	rjmp	.+66     	; 0x1418 <vfprintf+0x15c>
    13d6:	f8 01       	movw	r30, r16
    13d8:	80 81       	ld	r24, Z
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	0e 5f       	subi	r16, 0xFE	; 254
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	88 24       	eor	r8, r8
    13e2:	83 94       	inc	r8
    13e4:	91 2c       	mov	r9, r1
    13e6:	53 01       	movw	r10, r6
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <vfprintf+0x154>
    13ea:	28 01       	movw	r4, r16
    13ec:	f2 e0       	ldi	r31, 0x02	; 2
    13ee:	4f 0e       	add	r4, r31
    13f0:	51 1c       	adc	r5, r1
    13f2:	f8 01       	movw	r30, r16
    13f4:	a0 80       	ld	r10, Z
    13f6:	b1 80       	ldd	r11, Z+1	; 0x01
    13f8:	36 fe       	sbrs	r3, 6
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <vfprintf+0x146>
    13fc:	69 2d       	mov	r22, r9
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0x14a>
    1402:	6f ef       	ldi	r22, 0xFF	; 255
    1404:	7f ef       	ldi	r23, 0xFF	; 255
    1406:	c5 01       	movw	r24, r10
    1408:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <strnlen>
    140c:	4c 01       	movw	r8, r24
    140e:	82 01       	movw	r16, r4
    1410:	f3 2d       	mov	r31, r3
    1412:	ff 77       	andi	r31, 0x7F	; 127
    1414:	3f 2e       	mov	r3, r31
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <vfprintf+0x188>
    1418:	28 01       	movw	r4, r16
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	42 0e       	add	r4, r18
    141e:	51 1c       	adc	r5, r1
    1420:	f8 01       	movw	r30, r16
    1422:	a0 80       	ld	r10, Z
    1424:	b1 80       	ldd	r11, Z+1	; 0x01
    1426:	36 fe       	sbrs	r3, 6
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <vfprintf+0x174>
    142a:	69 2d       	mov	r22, r9
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <vfprintf+0x178>
    1430:	6f ef       	ldi	r22, 0xFF	; 255
    1432:	7f ef       	ldi	r23, 0xFF	; 255
    1434:	c5 01       	movw	r24, r10
    1436:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <strnlen_P>
    143a:	4c 01       	movw	r8, r24
    143c:	f3 2d       	mov	r31, r3
    143e:	f0 68       	ori	r31, 0x80	; 128
    1440:	3f 2e       	mov	r3, r31
    1442:	82 01       	movw	r16, r4
    1444:	33 fc       	sbrc	r3, 3
    1446:	1b c0       	rjmp	.+54     	; 0x147e <vfprintf+0x1c2>
    1448:	82 2d       	mov	r24, r2
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	88 16       	cp	r8, r24
    144e:	99 06       	cpc	r9, r25
    1450:	b0 f4       	brcc	.+44     	; 0x147e <vfprintf+0x1c2>
    1452:	b6 01       	movw	r22, r12
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    145c:	2a 94       	dec	r2
    145e:	f4 cf       	rjmp	.-24     	; 0x1448 <vfprintf+0x18c>
    1460:	f5 01       	movw	r30, r10
    1462:	37 fc       	sbrc	r3, 7
    1464:	85 91       	lpm	r24, Z+
    1466:	37 fe       	sbrs	r3, 7
    1468:	81 91       	ld	r24, Z+
    146a:	5f 01       	movw	r10, r30
    146c:	b6 01       	movw	r22, r12
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    1474:	21 10       	cpse	r2, r1
    1476:	2a 94       	dec	r2
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	82 1a       	sub	r8, r18
    147c:	91 08       	sbc	r9, r1
    147e:	81 14       	cp	r8, r1
    1480:	91 04       	cpc	r9, r1
    1482:	71 f7       	brne	.-36     	; 0x1460 <vfprintf+0x1a4>
    1484:	e8 c0       	rjmp	.+464    	; 0x1656 <vfprintf+0x39a>
    1486:	84 36       	cpi	r24, 0x64	; 100
    1488:	11 f0       	breq	.+4      	; 0x148e <vfprintf+0x1d2>
    148a:	89 36       	cpi	r24, 0x69	; 105
    148c:	41 f5       	brne	.+80     	; 0x14de <vfprintf+0x222>
    148e:	f8 01       	movw	r30, r16
    1490:	37 fe       	sbrs	r3, 7
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <vfprintf+0x1e6>
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	0c 5f       	subi	r16, 0xFC	; 252
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <vfprintf+0x1f6>
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	07 2e       	mov	r0, r23
    14a8:	00 0c       	add	r0, r0
    14aa:	88 0b       	sbc	r24, r24
    14ac:	99 0b       	sbc	r25, r25
    14ae:	0e 5f       	subi	r16, 0xFE	; 254
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	f3 2d       	mov	r31, r3
    14b4:	ff 76       	andi	r31, 0x6F	; 111
    14b6:	3f 2e       	mov	r3, r31
    14b8:	97 ff       	sbrs	r25, 7
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <vfprintf+0x212>
    14bc:	90 95       	com	r25
    14be:	80 95       	com	r24
    14c0:	70 95       	com	r23
    14c2:	61 95       	neg	r22
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	f0 68       	ori	r31, 0x80	; 128
    14cc:	3f 2e       	mov	r3, r31
    14ce:	2a e0       	ldi	r18, 0x0A	; 10
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	a3 01       	movw	r20, r6
    14d4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    14d8:	88 2e       	mov	r8, r24
    14da:	86 18       	sub	r8, r6
    14dc:	45 c0       	rjmp	.+138    	; 0x1568 <vfprintf+0x2ac>
    14de:	85 37       	cpi	r24, 0x75	; 117
    14e0:	31 f4       	brne	.+12     	; 0x14ee <vfprintf+0x232>
    14e2:	23 2d       	mov	r18, r3
    14e4:	2f 7e       	andi	r18, 0xEF	; 239
    14e6:	b2 2e       	mov	r11, r18
    14e8:	2a e0       	ldi	r18, 0x0A	; 10
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	25 c0       	rjmp	.+74     	; 0x1538 <vfprintf+0x27c>
    14ee:	93 2d       	mov	r25, r3
    14f0:	99 7f       	andi	r25, 0xF9	; 249
    14f2:	b9 2e       	mov	r11, r25
    14f4:	8f 36       	cpi	r24, 0x6F	; 111
    14f6:	c1 f0       	breq	.+48     	; 0x1528 <vfprintf+0x26c>
    14f8:	18 f4       	brcc	.+6      	; 0x1500 <vfprintf+0x244>
    14fa:	88 35       	cpi	r24, 0x58	; 88
    14fc:	79 f0       	breq	.+30     	; 0x151c <vfprintf+0x260>
    14fe:	b5 c0       	rjmp	.+362    	; 0x166a <vfprintf+0x3ae>
    1500:	80 37       	cpi	r24, 0x70	; 112
    1502:	19 f0       	breq	.+6      	; 0x150a <vfprintf+0x24e>
    1504:	88 37       	cpi	r24, 0x78	; 120
    1506:	21 f0       	breq	.+8      	; 0x1510 <vfprintf+0x254>
    1508:	b0 c0       	rjmp	.+352    	; 0x166a <vfprintf+0x3ae>
    150a:	e9 2f       	mov	r30, r25
    150c:	e0 61       	ori	r30, 0x10	; 16
    150e:	be 2e       	mov	r11, r30
    1510:	b4 fe       	sbrs	r11, 4
    1512:	0d c0       	rjmp	.+26     	; 0x152e <vfprintf+0x272>
    1514:	fb 2d       	mov	r31, r11
    1516:	f4 60       	ori	r31, 0x04	; 4
    1518:	bf 2e       	mov	r11, r31
    151a:	09 c0       	rjmp	.+18     	; 0x152e <vfprintf+0x272>
    151c:	34 fe       	sbrs	r3, 4
    151e:	0a c0       	rjmp	.+20     	; 0x1534 <vfprintf+0x278>
    1520:	29 2f       	mov	r18, r25
    1522:	26 60       	ori	r18, 0x06	; 6
    1524:	b2 2e       	mov	r11, r18
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x278>
    1528:	28 e0       	ldi	r18, 0x08	; 8
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <vfprintf+0x27c>
    152e:	20 e1       	ldi	r18, 0x10	; 16
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <vfprintf+0x27c>
    1534:	20 e1       	ldi	r18, 0x10	; 16
    1536:	32 e0       	ldi	r19, 0x02	; 2
    1538:	f8 01       	movw	r30, r16
    153a:	b7 fe       	sbrs	r11, 7
    153c:	07 c0       	rjmp	.+14     	; 0x154c <vfprintf+0x290>
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	0c 5f       	subi	r16, 0xFC	; 252
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x29c>
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 5f       	subi	r16, 0xFE	; 254
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	a3 01       	movw	r20, r6
    155a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__ultoa_invert>
    155e:	88 2e       	mov	r8, r24
    1560:	86 18       	sub	r8, r6
    1562:	fb 2d       	mov	r31, r11
    1564:	ff 77       	andi	r31, 0x7F	; 127
    1566:	3f 2e       	mov	r3, r31
    1568:	36 fe       	sbrs	r3, 6
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <vfprintf+0x2ca>
    156c:	23 2d       	mov	r18, r3
    156e:	2e 7f       	andi	r18, 0xFE	; 254
    1570:	a2 2e       	mov	r10, r18
    1572:	89 14       	cp	r8, r9
    1574:	58 f4       	brcc	.+22     	; 0x158c <vfprintf+0x2d0>
    1576:	34 fe       	sbrs	r3, 4
    1578:	0b c0       	rjmp	.+22     	; 0x1590 <vfprintf+0x2d4>
    157a:	32 fc       	sbrc	r3, 2
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <vfprintf+0x2d4>
    157e:	83 2d       	mov	r24, r3
    1580:	8e 7e       	andi	r24, 0xEE	; 238
    1582:	a8 2e       	mov	r10, r24
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <vfprintf+0x2d4>
    1586:	b8 2c       	mov	r11, r8
    1588:	a3 2c       	mov	r10, r3
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <vfprintf+0x2d6>
    158c:	b8 2c       	mov	r11, r8
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <vfprintf+0x2d6>
    1590:	b9 2c       	mov	r11, r9
    1592:	a4 fe       	sbrs	r10, 4
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <vfprintf+0x2f8>
    1596:	fe 01       	movw	r30, r28
    1598:	e8 0d       	add	r30, r8
    159a:	f1 1d       	adc	r31, r1
    159c:	80 81       	ld	r24, Z
    159e:	80 33       	cpi	r24, 0x30	; 48
    15a0:	21 f4       	brne	.+8      	; 0x15aa <vfprintf+0x2ee>
    15a2:	9a 2d       	mov	r25, r10
    15a4:	99 7e       	andi	r25, 0xE9	; 233
    15a6:	a9 2e       	mov	r10, r25
    15a8:	09 c0       	rjmp	.+18     	; 0x15bc <vfprintf+0x300>
    15aa:	a2 fe       	sbrs	r10, 2
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <vfprintf+0x2fe>
    15ae:	b3 94       	inc	r11
    15b0:	b3 94       	inc	r11
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <vfprintf+0x300>
    15b4:	8a 2d       	mov	r24, r10
    15b6:	86 78       	andi	r24, 0x86	; 134
    15b8:	09 f0       	breq	.+2      	; 0x15bc <vfprintf+0x300>
    15ba:	b3 94       	inc	r11
    15bc:	a3 fc       	sbrc	r10, 3
    15be:	11 c0       	rjmp	.+34     	; 0x15e2 <vfprintf+0x326>
    15c0:	a0 fe       	sbrs	r10, 0
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <vfprintf+0x314>
    15c4:	b2 14       	cp	r11, r2
    15c6:	88 f4       	brcc	.+34     	; 0x15ea <vfprintf+0x32e>
    15c8:	28 0c       	add	r2, r8
    15ca:	92 2c       	mov	r9, r2
    15cc:	9b 18       	sub	r9, r11
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <vfprintf+0x330>
    15d0:	b2 14       	cp	r11, r2
    15d2:	60 f4       	brcc	.+24     	; 0x15ec <vfprintf+0x330>
    15d4:	b6 01       	movw	r22, r12
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    15de:	b3 94       	inc	r11
    15e0:	f7 cf       	rjmp	.-18     	; 0x15d0 <vfprintf+0x314>
    15e2:	b2 14       	cp	r11, r2
    15e4:	18 f4       	brcc	.+6      	; 0x15ec <vfprintf+0x330>
    15e6:	2b 18       	sub	r2, r11
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vfprintf+0x332>
    15ea:	98 2c       	mov	r9, r8
    15ec:	21 2c       	mov	r2, r1
    15ee:	a4 fe       	sbrs	r10, 4
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <vfprintf+0x356>
    15f2:	b6 01       	movw	r22, r12
    15f4:	80 e3       	ldi	r24, 0x30	; 48
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    15fc:	a2 fe       	sbrs	r10, 2
    15fe:	17 c0       	rjmp	.+46     	; 0x162e <vfprintf+0x372>
    1600:	a1 fc       	sbrc	r10, 1
    1602:	03 c0       	rjmp	.+6      	; 0x160a <vfprintf+0x34e>
    1604:	88 e7       	ldi	r24, 0x78	; 120
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x352>
    160a:	88 e5       	ldi	r24, 0x58	; 88
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b6 01       	movw	r22, r12
    1610:	0c c0       	rjmp	.+24     	; 0x162a <vfprintf+0x36e>
    1612:	8a 2d       	mov	r24, r10
    1614:	86 78       	andi	r24, 0x86	; 134
    1616:	59 f0       	breq	.+22     	; 0x162e <vfprintf+0x372>
    1618:	a1 fe       	sbrs	r10, 1
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x364>
    161c:	8b e2       	ldi	r24, 0x2B	; 43
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <vfprintf+0x366>
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	a7 fc       	sbrc	r10, 7
    1624:	8d e2       	ldi	r24, 0x2D	; 45
    1626:	b6 01       	movw	r22, r12
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    162e:	89 14       	cp	r8, r9
    1630:	38 f4       	brcc	.+14     	; 0x1640 <vfprintf+0x384>
    1632:	b6 01       	movw	r22, r12
    1634:	80 e3       	ldi	r24, 0x30	; 48
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    163c:	9a 94       	dec	r9
    163e:	f7 cf       	rjmp	.-18     	; 0x162e <vfprintf+0x372>
    1640:	8a 94       	dec	r8
    1642:	f3 01       	movw	r30, r6
    1644:	e8 0d       	add	r30, r8
    1646:	f1 1d       	adc	r31, r1
    1648:	80 81       	ld	r24, Z
    164a:	b6 01       	movw	r22, r12
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    1652:	81 10       	cpse	r8, r1
    1654:	f5 cf       	rjmp	.-22     	; 0x1640 <vfprintf+0x384>
    1656:	22 20       	and	r2, r2
    1658:	09 f4       	brne	.+2      	; 0x165c <vfprintf+0x3a0>
    165a:	42 ce       	rjmp	.-892    	; 0x12e0 <vfprintf+0x24>
    165c:	b6 01       	movw	r22, r12
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <fputc>
    1666:	2a 94       	dec	r2
    1668:	f6 cf       	rjmp	.-20     	; 0x1656 <vfprintf+0x39a>
    166a:	f6 01       	movw	r30, r12
    166c:	86 81       	ldd	r24, Z+6	; 0x06
    166e:	97 81       	ldd	r25, Z+7	; 0x07
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x3ba>
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	2b 96       	adiw	r28, 0x0b	; 11
    1678:	e2 e1       	ldi	r30, 0x12	; 18
    167a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__>

0000167e <putval>:
    167e:	20 fd       	sbrc	r18, 0
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <putval+0x16>
    1682:	fc 01       	movw	r30, r24
    1684:	23 fd       	sbrc	r18, 3
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <putval+0x14>
    1688:	22 ff       	sbrs	r18, 2
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <putval+0x12>
    168c:	73 83       	std	Z+3, r23	; 0x03
    168e:	62 83       	std	Z+2, r22	; 0x02
    1690:	51 83       	std	Z+1, r21	; 0x01
    1692:	40 83       	st	Z, r20
    1694:	08 95       	ret

00001696 <mulacc>:
    1696:	44 fd       	sbrc	r20, 4
    1698:	17 c0       	rjmp	.+46     	; 0x16c8 <mulacc+0x32>
    169a:	46 fd       	sbrc	r20, 6
    169c:	17 c0       	rjmp	.+46     	; 0x16cc <mulacc+0x36>
    169e:	ab 01       	movw	r20, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	da 01       	movw	r26, r20
    16a4:	fb 01       	movw	r30, r22
    16a6:	aa 0f       	add	r26, r26
    16a8:	bb 1f       	adc	r27, r27
    16aa:	ee 1f       	adc	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	10 94       	com	r1
    16b0:	d1 f7       	brne	.-12     	; 0x16a6 <mulacc+0x10>
    16b2:	4a 0f       	add	r20, r26
    16b4:	5b 1f       	adc	r21, r27
    16b6:	6e 1f       	adc	r22, r30
    16b8:	7f 1f       	adc	r23, r31
    16ba:	cb 01       	movw	r24, r22
    16bc:	ba 01       	movw	r22, r20
    16be:	66 0f       	add	r22, r22
    16c0:	77 1f       	adc	r23, r23
    16c2:	88 1f       	adc	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <mulacc+0x44>
    16c8:	33 e0       	ldi	r19, 0x03	; 3
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <mulacc+0x38>
    16cc:	34 e0       	ldi	r19, 0x04	; 4
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	31 50       	subi	r19, 0x01	; 1
    16d8:	d1 f7       	brne	.-12     	; 0x16ce <mulacc+0x38>
    16da:	62 0f       	add	r22, r18
    16dc:	71 1d       	adc	r23, r1
    16de:	81 1d       	adc	r24, r1
    16e0:	91 1d       	adc	r25, r1
    16e2:	08 95       	ret

000016e4 <skip_spaces>:
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	8c 01       	movw	r16, r24
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    16f4:	ec 01       	movw	r28, r24
    16f6:	97 fd       	sbrc	r25, 7
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <skip_spaces+0x26>
    16fa:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <isspace>
    16fe:	89 2b       	or	r24, r25
    1700:	b1 f7       	brne	.-20     	; 0x16ee <skip_spaces+0xa>
    1702:	b8 01       	movw	r22, r16
    1704:	ce 01       	movw	r24, r28
    1706:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ungetc>
    170a:	ce 01       	movw	r24, r28
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	08 95       	ret

00001716 <conv_int>:
    1716:	8f 92       	push	r8
    1718:	9f 92       	push	r9
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	8c 01       	movw	r16, r24
    172c:	d6 2f       	mov	r29, r22
    172e:	7a 01       	movw	r14, r20
    1730:	b2 2e       	mov	r11, r18
    1732:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    1736:	9c 01       	movw	r18, r24
    1738:	33 27       	eor	r19, r19
    173a:	2b 32       	cpi	r18, 0x2B	; 43
    173c:	31 05       	cpc	r19, r1
    173e:	31 f0       	breq	.+12     	; 0x174c <conv_int+0x36>
    1740:	2d 32       	cpi	r18, 0x2D	; 45
    1742:	31 05       	cpc	r19, r1
    1744:	61 f4       	brne	.+24     	; 0x175e <conv_int+0x48>
    1746:	8b 2d       	mov	r24, r11
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	b8 2e       	mov	r11, r24
    174c:	d1 50       	subi	r29, 0x01	; 1
    174e:	11 f4       	brne	.+4      	; 0x1754 <conv_int+0x3e>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	68 c0       	rjmp	.+208    	; 0x1824 <conv_int+0x10e>
    1754:	c8 01       	movw	r24, r16
    1756:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    175a:	97 fd       	sbrc	r25, 7
    175c:	f9 cf       	rjmp	.-14     	; 0x1750 <conv_int+0x3a>
    175e:	cb 2d       	mov	r28, r11
    1760:	cd 7f       	andi	r28, 0xFD	; 253
    1762:	2b 2d       	mov	r18, r11
    1764:	20 73       	andi	r18, 0x30	; 48
    1766:	09 f5       	brne	.+66     	; 0x17aa <conv_int+0x94>
    1768:	80 33       	cpi	r24, 0x30	; 48
    176a:	f9 f4       	brne	.+62     	; 0x17aa <conv_int+0x94>
    176c:	aa 24       	eor	r10, r10
    176e:	aa 94       	dec	r10
    1770:	ad 0e       	add	r10, r29
    1772:	09 f4       	brne	.+2      	; 0x1776 <conv_int+0x60>
    1774:	43 c0       	rjmp	.+134    	; 0x17fc <conv_int+0xe6>
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    177c:	97 fd       	sbrc	r25, 7
    177e:	3e c0       	rjmp	.+124    	; 0x17fc <conv_int+0xe6>
    1780:	9c 01       	movw	r18, r24
    1782:	2f 7d       	andi	r18, 0xDF	; 223
    1784:	33 27       	eor	r19, r19
    1786:	28 35       	cpi	r18, 0x58	; 88
    1788:	31 05       	cpc	r19, r1
    178a:	49 f4       	brne	.+18     	; 0x179e <conv_int+0x88>
    178c:	c2 64       	ori	r28, 0x42	; 66
    178e:	d2 50       	subi	r29, 0x02	; 2
    1790:	a9 f1       	breq	.+106    	; 0x17fc <conv_int+0xe6>
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    1798:	97 ff       	sbrs	r25, 7
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <conv_int+0x94>
    179c:	2f c0       	rjmp	.+94     	; 0x17fc <conv_int+0xe6>
    179e:	b6 fe       	sbrs	r11, 6
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <conv_int+0x90>
    17a2:	c2 60       	ori	r28, 0x02	; 2
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <conv_int+0x92>
    17a6:	c2 61       	ori	r28, 0x12	; 18
    17a8:	da 2d       	mov	r29, r10
    17aa:	81 2c       	mov	r8, r1
    17ac:	91 2c       	mov	r9, r1
    17ae:	54 01       	movw	r10, r8
    17b0:	20 ed       	ldi	r18, 0xD0	; 208
    17b2:	28 0f       	add	r18, r24
    17b4:	28 30       	cpi	r18, 0x08	; 8
    17b6:	80 f0       	brcs	.+32     	; 0x17d8 <conv_int+0xc2>
    17b8:	c4 ff       	sbrs	r28, 4
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <conv_int+0xae>
    17bc:	b8 01       	movw	r22, r16
    17be:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ungetc>
    17c2:	19 c0       	rjmp	.+50     	; 0x17f6 <conv_int+0xe0>
    17c4:	2a 30       	cpi	r18, 0x0A	; 10
    17c6:	40 f0       	brcs	.+16     	; 0x17d8 <conv_int+0xc2>
    17c8:	c6 ff       	sbrs	r28, 6
    17ca:	f8 cf       	rjmp	.-16     	; 0x17bc <conv_int+0xa6>
    17cc:	2f 7d       	andi	r18, 0xDF	; 223
    17ce:	3f ee       	ldi	r19, 0xEF	; 239
    17d0:	32 0f       	add	r19, r18
    17d2:	36 30       	cpi	r19, 0x06	; 6
    17d4:	98 f7       	brcc	.-26     	; 0x17bc <conv_int+0xa6>
    17d6:	27 50       	subi	r18, 0x07	; 7
    17d8:	4c 2f       	mov	r20, r28
    17da:	c5 01       	movw	r24, r10
    17dc:	b4 01       	movw	r22, r8
    17de:	0e 94 4b 0b 	call	0x1696	; 0x1696 <mulacc>
    17e2:	4b 01       	movw	r8, r22
    17e4:	5c 01       	movw	r10, r24
    17e6:	c2 60       	ori	r28, 0x02	; 2
    17e8:	d1 50       	subi	r29, 0x01	; 1
    17ea:	59 f0       	breq	.+22     	; 0x1802 <conv_int+0xec>
    17ec:	c8 01       	movw	r24, r16
    17ee:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    17f2:	97 ff       	sbrs	r25, 7
    17f4:	dd cf       	rjmp	.-70     	; 0x17b0 <conv_int+0x9a>
    17f6:	c1 fd       	sbrc	r28, 1
    17f8:	04 c0       	rjmp	.+8      	; 0x1802 <conv_int+0xec>
    17fa:	aa cf       	rjmp	.-172    	; 0x1750 <conv_int+0x3a>
    17fc:	81 2c       	mov	r8, r1
    17fe:	91 2c       	mov	r9, r1
    1800:	54 01       	movw	r10, r8
    1802:	c7 ff       	sbrs	r28, 7
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <conv_int+0x100>
    1806:	b0 94       	com	r11
    1808:	a0 94       	com	r10
    180a:	90 94       	com	r9
    180c:	80 94       	com	r8
    180e:	81 1c       	adc	r8, r1
    1810:	91 1c       	adc	r9, r1
    1812:	a1 1c       	adc	r10, r1
    1814:	b1 1c       	adc	r11, r1
    1816:	2c 2f       	mov	r18, r28
    1818:	b5 01       	movw	r22, r10
    181a:	a4 01       	movw	r20, r8
    181c:	c7 01       	movw	r24, r14
    181e:	0e 94 3f 0b 	call	0x167e	; 0x167e <putval>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	08 95       	ret

0000183a <conv_brk>:
    183a:	a0 e2       	ldi	r26, 0x20	; 32
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e3 e2       	ldi	r30, 0x23	; 35
    1840:	fc e0       	ldi	r31, 0x0C	; 12
    1842:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__prologue_saves__+0x6>
    1846:	5c 01       	movw	r10, r24
    1848:	96 2e       	mov	r9, r22
    184a:	7a 01       	movw	r14, r20
    184c:	f9 01       	movw	r30, r18
    184e:	8e 01       	movw	r16, r28
    1850:	0f 5f       	subi	r16, 0xFF	; 255
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	68 01       	movw	r12, r16
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	d8 01       	movw	r26, r16
    185a:	1d 92       	st	X+, r1
    185c:	8a 95       	dec	r24
    185e:	e9 f7       	brne	.-6      	; 0x185a <conv_brk+0x20>
    1860:	d5 01       	movw	r26, r10
    1862:	13 96       	adiw	r26, 0x03	; 3
    1864:	8c 90       	ld	r8, X
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	61 2c       	mov	r6, r1
    186c:	71 2c       	mov	r7, r1
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	83 fc       	sbrc	r8, 3
    1876:	25 91       	lpm	r18, Z+
    1878:	83 fe       	sbrs	r8, 3
    187a:	21 91       	ld	r18, Z+
    187c:	8f 01       	movw	r16, r30
    187e:	52 2e       	mov	r5, r18
    1880:	21 11       	cpse	r18, r1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <conv_brk+0x50>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	92 c0       	rjmp	.+292    	; 0x19ae <conv_brk+0x174>
    188a:	2e 35       	cpi	r18, 0x5E	; 94
    188c:	11 f4       	brne	.+4      	; 0x1892 <conv_brk+0x58>
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	51 f1       	breq	.+84     	; 0x18e6 <conv_brk+0xac>
    1892:	43 2f       	mov	r20, r19
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	48 17       	cp	r20, r24
    1898:	59 07       	cpc	r21, r25
    189a:	3c f4       	brge	.+14     	; 0x18aa <conv_brk+0x70>
    189c:	2d 35       	cpi	r18, 0x5D	; 93
    189e:	59 f1       	breq	.+86     	; 0x18f6 <conv_brk+0xbc>
    18a0:	2d 32       	cpi	r18, 0x2D	; 45
    18a2:	19 f4       	brne	.+6      	; 0x18aa <conv_brk+0x70>
    18a4:	77 20       	and	r7, r7
    18a6:	09 f1       	breq	.+66     	; 0x18ea <conv_brk+0xb0>
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <conv_brk+0x76>
    18aa:	77 20       	and	r7, r7
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <conv_brk+0x76>
    18ae:	6a c0       	rjmp	.+212    	; 0x1984 <conv_brk+0x14a>
    18b0:	45 2d       	mov	r20, r5
    18b2:	46 95       	lsr	r20
    18b4:	46 95       	lsr	r20
    18b6:	46 95       	lsr	r20
    18b8:	d6 01       	movw	r26, r12
    18ba:	a4 0f       	add	r26, r20
    18bc:	b1 1d       	adc	r27, r1
    18be:	45 2d       	mov	r20, r5
    18c0:	47 70       	andi	r20, 0x07	; 7
    18c2:	8b 01       	movw	r16, r22
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <conv_brk+0x90>
    18c6:	00 0f       	add	r16, r16
    18c8:	11 1f       	adc	r17, r17
    18ca:	4a 95       	dec	r20
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <conv_brk+0x8c>
    18ce:	a8 01       	movw	r20, r16
    18d0:	5c 91       	ld	r21, X
    18d2:	45 2b       	or	r20, r21
    18d4:	4c 93       	st	X, r20
    18d6:	65 14       	cp	r6, r5
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <conv_brk+0xb6>
    18da:	56 14       	cp	r5, r6
    18dc:	10 f4       	brcc	.+4      	; 0x18e2 <conv_brk+0xa8>
    18de:	53 94       	inc	r5
    18e0:	e7 cf       	rjmp	.-50     	; 0x18b0 <conv_brk+0x76>
    18e2:	5a 94       	dec	r5
    18e4:	e5 cf       	rjmp	.-54     	; 0x18b0 <conv_brk+0x76>
    18e6:	31 e0       	ldi	r19, 0x01	; 1
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <conv_brk+0xb8>
    18ea:	77 24       	eor	r7, r7
    18ec:	73 94       	inc	r7
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <conv_brk+0xb8>
    18f0:	71 2c       	mov	r7, r1
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	bf cf       	rjmp	.-130    	; 0x1874 <conv_brk+0x3a>
    18f6:	77 20       	and	r7, r7
    18f8:	19 f0       	breq	.+6      	; 0x1900 <conv_brk+0xc6>
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	80 62       	ori	r24, 0x20	; 32
    18fe:	8e 83       	std	Y+6, r24	; 0x06
    1900:	31 11       	cpse	r19, r1
    1902:	03 c0       	rjmp	.+6      	; 0x190a <conv_brk+0xd0>
    1904:	88 24       	eor	r8, r8
    1906:	83 94       	inc	r8
    1908:	17 c0       	rjmp	.+46     	; 0x1938 <conv_brk+0xfe>
    190a:	f6 01       	movw	r30, r12
    190c:	9e 01       	movw	r18, r28
    190e:	2f 5d       	subi	r18, 0xDF	; 223
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	80 95       	com	r24
    1916:	81 93       	st	Z+, r24
    1918:	2e 17       	cp	r18, r30
    191a:	3f 07       	cpc	r19, r31
    191c:	d1 f7       	brne	.-12     	; 0x1912 <conv_brk+0xd8>
    191e:	f2 cf       	rjmp	.-28     	; 0x1904 <conv_brk+0xca>
    1920:	e1 14       	cp	r14, r1
    1922:	f1 04       	cpc	r15, r1
    1924:	29 f0       	breq	.+10     	; 0x1930 <conv_brk+0xf6>
    1926:	d7 01       	movw	r26, r14
    1928:	8c 93       	st	X, r24
    192a:	f7 01       	movw	r30, r14
    192c:	31 96       	adiw	r30, 0x01	; 1
    192e:	7f 01       	movw	r14, r30
    1930:	9a 94       	dec	r9
    1932:	81 2c       	mov	r8, r1
    1934:	99 20       	and	r9, r9
    1936:	f9 f0       	breq	.+62     	; 0x1976 <conv_brk+0x13c>
    1938:	c5 01       	movw	r24, r10
    193a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    193e:	97 fd       	sbrc	r25, 7
    1940:	18 c0       	rjmp	.+48     	; 0x1972 <conv_brk+0x138>
    1942:	fc 01       	movw	r30, r24
    1944:	ff 27       	eor	r31, r31
    1946:	23 e0       	ldi	r18, 0x03	; 3
    1948:	f5 95       	asr	r31
    194a:	e7 95       	ror	r30
    194c:	2a 95       	dec	r18
    194e:	e1 f7       	brne	.-8      	; 0x1948 <conv_brk+0x10e>
    1950:	ec 0d       	add	r30, r12
    1952:	fd 1d       	adc	r31, r13
    1954:	20 81       	ld	r18, Z
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	ac 01       	movw	r20, r24
    195a:	47 70       	andi	r20, 0x07	; 7
    195c:	55 27       	eor	r21, r21
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <conv_brk+0x12a>
    1960:	35 95       	asr	r19
    1962:	27 95       	ror	r18
    1964:	4a 95       	dec	r20
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <conv_brk+0x126>
    1968:	20 fd       	sbrc	r18, 0
    196a:	da cf       	rjmp	.-76     	; 0x1920 <conv_brk+0xe6>
    196c:	b5 01       	movw	r22, r10
    196e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ungetc>
    1972:	81 10       	cpse	r8, r1
    1974:	87 cf       	rjmp	.-242    	; 0x1884 <conv_brk+0x4a>
    1976:	e1 14       	cp	r14, r1
    1978:	f1 04       	cpc	r15, r1
    197a:	11 f0       	breq	.+4      	; 0x1980 <conv_brk+0x146>
    197c:	d7 01       	movw	r26, r14
    197e:	1c 92       	st	X, r1
    1980:	c8 01       	movw	r24, r16
    1982:	15 c0       	rjmp	.+42     	; 0x19ae <conv_brk+0x174>
    1984:	42 2f       	mov	r20, r18
    1986:	46 95       	lsr	r20
    1988:	46 95       	lsr	r20
    198a:	46 95       	lsr	r20
    198c:	d6 01       	movw	r26, r12
    198e:	a4 0f       	add	r26, r20
    1990:	b1 1d       	adc	r27, r1
    1992:	42 2f       	mov	r20, r18
    1994:	47 70       	andi	r20, 0x07	; 7
    1996:	8b 01       	movw	r16, r22
    1998:	02 c0       	rjmp	.+4      	; 0x199e <conv_brk+0x164>
    199a:	00 0f       	add	r16, r16
    199c:	11 1f       	adc	r17, r17
    199e:	4a 95       	dec	r20
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <conv_brk+0x160>
    19a2:	a8 01       	movw	r20, r16
    19a4:	5c 91       	ld	r21, X
    19a6:	45 2b       	or	r20, r21
    19a8:	4c 93       	st	X, r20
    19aa:	62 2e       	mov	r6, r18
    19ac:	a2 cf       	rjmp	.-188    	; 0x18f2 <conv_brk+0xb8>
    19ae:	a0 96       	adiw	r28, 0x20	; 32
    19b0:	ef e0       	ldi	r30, 0x0F	; 15
    19b2:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__epilogue_restores__+0x6>

000019b6 <vfscanf>:
    19b6:	a0 e0       	ldi	r26, 0x00	; 0
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e1 ee       	ldi	r30, 0xE1	; 225
    19bc:	fc e0       	ldi	r31, 0x0C	; 12
    19be:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__prologue_saves__+0x6>
    19c2:	6c 01       	movw	r12, r24
    19c4:	eb 01       	movw	r28, r22
    19c6:	5a 01       	movw	r10, r20
    19c8:	fc 01       	movw	r30, r24
    19ca:	17 82       	std	Z+7, r1	; 0x07
    19cc:	16 82       	std	Z+6, r1	; 0x06
    19ce:	51 2c       	mov	r5, r1
    19d0:	f6 01       	movw	r30, r12
    19d2:	e3 80       	ldd	r14, Z+3	; 0x03
    19d4:	fe 01       	movw	r30, r28
    19d6:	e3 fc       	sbrc	r14, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	e3 fe       	sbrs	r14, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	18 2f       	mov	r17, r24
    19e0:	ef 01       	movw	r28, r30
    19e2:	88 23       	and	r24, r24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <vfscanf+0x32>
    19e6:	ee c0       	rjmp	.+476    	; 0x1bc4 <vfscanf+0x20e>
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <isspace>
    19ee:	89 2b       	or	r24, r25
    19f0:	21 f0       	breq	.+8      	; 0x19fa <vfscanf+0x44>
    19f2:	c6 01       	movw	r24, r12
    19f4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <skip_spaces>
    19f8:	eb cf       	rjmp	.-42     	; 0x19d0 <vfscanf+0x1a>
    19fa:	15 32       	cpi	r17, 0x25	; 37
    19fc:	41 f4       	brne	.+16     	; 0x1a0e <vfscanf+0x58>
    19fe:	fe 01       	movw	r30, r28
    1a00:	e3 fc       	sbrc	r14, 3
    1a02:	15 91       	lpm	r17, Z+
    1a04:	e3 fe       	sbrs	r14, 3
    1a06:	11 91       	ld	r17, Z+
    1a08:	ef 01       	movw	r28, r30
    1a0a:	15 32       	cpi	r17, 0x25	; 37
    1a0c:	81 f4       	brne	.+32     	; 0x1a2e <vfscanf+0x78>
    1a0e:	c6 01       	movw	r24, r12
    1a10:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    1a14:	97 fd       	sbrc	r25, 7
    1a16:	d4 c0       	rjmp	.+424    	; 0x1bc0 <vfscanf+0x20a>
    1a18:	41 2f       	mov	r20, r17
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	9c 01       	movw	r18, r24
    1a1e:	33 27       	eor	r19, r19
    1a20:	24 17       	cp	r18, r20
    1a22:	35 07       	cpc	r19, r21
    1a24:	a9 f2       	breq	.-86     	; 0x19d0 <vfscanf+0x1a>
    1a26:	b6 01       	movw	r22, r12
    1a28:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ungetc>
    1a2c:	cb c0       	rjmp	.+406    	; 0x1bc4 <vfscanf+0x20e>
    1a2e:	1a 32       	cpi	r17, 0x2A	; 42
    1a30:	39 f4       	brne	.+14     	; 0x1a40 <vfscanf+0x8a>
    1a32:	e3 fc       	sbrc	r14, 3
    1a34:	15 91       	lpm	r17, Z+
    1a36:	e3 fe       	sbrs	r14, 3
    1a38:	11 91       	ld	r17, Z+
    1a3a:	ef 01       	movw	r28, r30
    1a3c:	01 e0       	ldi	r16, 0x01	; 1
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <vfscanf+0x8c>
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	f1 2c       	mov	r15, r1
    1a44:	20 ed       	ldi	r18, 0xD0	; 208
    1a46:	21 0f       	add	r18, r17
    1a48:	2a 30       	cpi	r18, 0x0A	; 10
    1a4a:	80 f4       	brcc	.+32     	; 0x1a6c <vfscanf+0xb6>
    1a4c:	02 60       	ori	r16, 0x02	; 2
    1a4e:	6f 2d       	mov	r22, r15
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	40 e2       	ldi	r20, 0x20	; 32
    1a58:	0e 94 4b 0b 	call	0x1696	; 0x1696 <mulacc>
    1a5c:	f6 2e       	mov	r15, r22
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e3 fc       	sbrc	r14, 3
    1a62:	15 91       	lpm	r17, Z+
    1a64:	e3 fe       	sbrs	r14, 3
    1a66:	11 91       	ld	r17, Z+
    1a68:	ef 01       	movw	r28, r30
    1a6a:	ec cf       	rjmp	.-40     	; 0x1a44 <vfscanf+0x8e>
    1a6c:	01 ff       	sbrs	r16, 1
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <vfscanf+0xc0>
    1a70:	f1 10       	cpse	r15, r1
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <vfscanf+0xc4>
    1a74:	a7 c0       	rjmp	.+334    	; 0x1bc4 <vfscanf+0x20e>
    1a76:	ff 24       	eor	r15, r15
    1a78:	fa 94       	dec	r15
    1a7a:	18 36       	cpi	r17, 0x68	; 104
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <vfscanf+0xce>
    1a7e:	1c 36       	cpi	r17, 0x6C	; 108
    1a80:	51 f0       	breq	.+20     	; 0x1a96 <vfscanf+0xe0>
    1a82:	10 c0       	rjmp	.+32     	; 0x1aa4 <vfscanf+0xee>
    1a84:	fe 01       	movw	r30, r28
    1a86:	e3 fc       	sbrc	r14, 3
    1a88:	15 91       	lpm	r17, Z+
    1a8a:	e3 fe       	sbrs	r14, 3
    1a8c:	11 91       	ld	r17, Z+
    1a8e:	ef 01       	movw	r28, r30
    1a90:	18 36       	cpi	r17, 0x68	; 104
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <vfscanf+0xee>
    1a94:	08 60       	ori	r16, 0x08	; 8
    1a96:	04 60       	ori	r16, 0x04	; 4
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e3 fc       	sbrc	r14, 3
    1a9c:	15 91       	lpm	r17, Z+
    1a9e:	e3 fe       	sbrs	r14, 3
    1aa0:	11 91       	ld	r17, Z+
    1aa2:	ef 01       	movw	r28, r30
    1aa4:	11 23       	and	r17, r17
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <vfscanf+0xf4>
    1aa8:	8d c0       	rjmp	.+282    	; 0x1bc4 <vfscanf+0x20e>
    1aaa:	61 2f       	mov	r22, r17
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	84 e5       	ldi	r24, 0x54	; 84
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <strchr_P>
    1ab6:	89 2b       	or	r24, r25
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <vfscanf+0x106>
    1aba:	84 c0       	rjmp	.+264    	; 0x1bc4 <vfscanf+0x20e>
    1abc:	00 fd       	sbrc	r16, 0
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <vfscanf+0x118>
    1ac0:	f5 01       	movw	r30, r10
    1ac2:	80 80       	ld	r8, Z
    1ac4:	91 80       	ldd	r9, Z+1	; 0x01
    1ac6:	c5 01       	movw	r24, r10
    1ac8:	02 96       	adiw	r24, 0x02	; 2
    1aca:	5c 01       	movw	r10, r24
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfscanf+0x11c>
    1ace:	81 2c       	mov	r8, r1
    1ad0:	91 2c       	mov	r9, r1
    1ad2:	1e 36       	cpi	r17, 0x6E	; 110
    1ad4:	51 f4       	brne	.+20     	; 0x1aea <vfscanf+0x134>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	46 81       	ldd	r20, Z+6	; 0x06
    1ada:	57 81       	ldd	r21, Z+7	; 0x07
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	20 2f       	mov	r18, r16
    1ae2:	c4 01       	movw	r24, r8
    1ae4:	0e 94 3f 0b 	call	0x167e	; 0x167e <putval>
    1ae8:	73 cf       	rjmp	.-282    	; 0x19d0 <vfscanf+0x1a>
    1aea:	13 36       	cpi	r17, 0x63	; 99
    1aec:	a9 f4       	brne	.+42     	; 0x1b18 <vfscanf+0x162>
    1aee:	01 fd       	sbrc	r16, 1
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfscanf+0x140>
    1af2:	ff 24       	eor	r15, r15
    1af4:	f3 94       	inc	r15
    1af6:	c6 01       	movw	r24, r12
    1af8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    1afc:	97 fd       	sbrc	r25, 7
    1afe:	60 c0       	rjmp	.+192    	; 0x1bc0 <vfscanf+0x20a>
    1b00:	81 14       	cp	r8, r1
    1b02:	91 04       	cpc	r9, r1
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <vfscanf+0x15a>
    1b06:	f4 01       	movw	r30, r8
    1b08:	80 83       	st	Z, r24
    1b0a:	c4 01       	movw	r24, r8
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	4c 01       	movw	r8, r24
    1b10:	fa 94       	dec	r15
    1b12:	f1 10       	cpse	r15, r1
    1b14:	f0 cf       	rjmp	.-32     	; 0x1af6 <vfscanf+0x140>
    1b16:	50 c0       	rjmp	.+160    	; 0x1bb8 <vfscanf+0x202>
    1b18:	1b 35       	cpi	r17, 0x5B	; 91
    1b1a:	59 f4       	brne	.+22     	; 0x1b32 <vfscanf+0x17c>
    1b1c:	9e 01       	movw	r18, r28
    1b1e:	a4 01       	movw	r20, r8
    1b20:	6f 2d       	mov	r22, r15
    1b22:	c6 01       	movw	r24, r12
    1b24:	0e 94 1d 0c 	call	0x183a	; 0x183a <conv_brk>
    1b28:	ec 01       	movw	r28, r24
    1b2a:	89 2b       	or	r24, r25
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <vfscanf+0x17a>
    1b2e:	44 c0       	rjmp	.+136    	; 0x1bb8 <vfscanf+0x202>
    1b30:	3e c0       	rjmp	.+124    	; 0x1bae <vfscanf+0x1f8>
    1b32:	c6 01       	movw	r24, r12
    1b34:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <skip_spaces>
    1b38:	97 fd       	sbrc	r25, 7
    1b3a:	42 c0       	rjmp	.+132    	; 0x1bc0 <vfscanf+0x20a>
    1b3c:	1f 36       	cpi	r17, 0x6F	; 111
    1b3e:	61 f1       	breq	.+88     	; 0x1b98 <vfscanf+0x1e2>
    1b40:	28 f4       	brcc	.+10     	; 0x1b4c <vfscanf+0x196>
    1b42:	14 36       	cpi	r17, 0x64	; 100
    1b44:	39 f1       	breq	.+78     	; 0x1b94 <vfscanf+0x1de>
    1b46:	19 36       	cpi	r17, 0x69	; 105
    1b48:	51 f1       	breq	.+84     	; 0x1b9e <vfscanf+0x1e8>
    1b4a:	28 c0       	rjmp	.+80     	; 0x1b9c <vfscanf+0x1e6>
    1b4c:	13 37       	cpi	r17, 0x73	; 115
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <vfscanf+0x1b6>
    1b50:	15 37       	cpi	r17, 0x75	; 117
    1b52:	01 f1       	breq	.+64     	; 0x1b94 <vfscanf+0x1de>
    1b54:	23 c0       	rjmp	.+70     	; 0x1b9c <vfscanf+0x1e6>
    1b56:	81 14       	cp	r8, r1
    1b58:	91 04       	cpc	r9, r1
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <vfscanf+0x1b0>
    1b5c:	f4 01       	movw	r30, r8
    1b5e:	60 82       	st	Z, r6
    1b60:	c4 01       	movw	r24, r8
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	4c 01       	movw	r8, r24
    1b66:	fa 94       	dec	r15
    1b68:	ff 20       	and	r15, r15
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <vfscanf+0x1d2>
    1b6c:	c6 01       	movw	r24, r12
    1b6e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <fgetc>
    1b72:	3c 01       	movw	r6, r24
    1b74:	97 fd       	sbrc	r25, 7
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <vfscanf+0x1d2>
    1b78:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <isspace>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	59 f3       	breq	.-42     	; 0x1b56 <vfscanf+0x1a0>
    1b80:	b6 01       	movw	r22, r12
    1b82:	c3 01       	movw	r24, r6
    1b84:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ungetc>
    1b88:	81 14       	cp	r8, r1
    1b8a:	91 04       	cpc	r9, r1
    1b8c:	a9 f0       	breq	.+42     	; 0x1bb8 <vfscanf+0x202>
    1b8e:	f4 01       	movw	r30, r8
    1b90:	10 82       	st	Z, r1
    1b92:	12 c0       	rjmp	.+36     	; 0x1bb8 <vfscanf+0x202>
    1b94:	00 62       	ori	r16, 0x20	; 32
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <vfscanf+0x1e8>
    1b98:	00 61       	ori	r16, 0x10	; 16
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfscanf+0x1e8>
    1b9c:	00 64       	ori	r16, 0x40	; 64
    1b9e:	20 2f       	mov	r18, r16
    1ba0:	a4 01       	movw	r20, r8
    1ba2:	6f 2d       	mov	r22, r15
    1ba4:	c6 01       	movw	r24, r12
    1ba6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <conv_int>
    1baa:	81 11       	cpse	r24, r1
    1bac:	05 c0       	rjmp	.+10     	; 0x1bb8 <vfscanf+0x202>
    1bae:	f6 01       	movw	r30, r12
    1bb0:	83 81       	ldd	r24, Z+3	; 0x03
    1bb2:	80 73       	andi	r24, 0x30	; 48
    1bb4:	29 f4       	brne	.+10     	; 0x1bc0 <vfscanf+0x20a>
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <vfscanf+0x20e>
    1bb8:	00 fd       	sbrc	r16, 0
    1bba:	0a cf       	rjmp	.-492    	; 0x19d0 <vfscanf+0x1a>
    1bbc:	53 94       	inc	r5
    1bbe:	08 cf       	rjmp	.-496    	; 0x19d0 <vfscanf+0x1a>
    1bc0:	55 20       	and	r5, r5
    1bc2:	19 f0       	breq	.+6      	; 0x1bca <vfscanf+0x214>
    1bc4:	85 2d       	mov	r24, r5
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <vfscanf+0x218>
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	ef e0       	ldi	r30, 0x0F	; 15
    1bd4:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__epilogue_restores__+0x6>

00001bd8 <isspace>:
    1bd8:	91 11       	cpse	r25, r1
    1bda:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__ctype_isfalse>
    1bde:	80 32       	cpi	r24, 0x20	; 32
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <isspace+0x10>
    1be2:	89 50       	subi	r24, 0x09	; 9
    1be4:	85 50       	subi	r24, 0x05	; 5
    1be6:	c8 f7       	brcc	.-14     	; 0x1bda <isspace+0x2>
    1be8:	08 95       	ret

00001bea <strchr_P>:
    1bea:	fc 01       	movw	r30, r24
    1bec:	05 90       	lpm	r0, Z+
    1bee:	06 16       	cp	r0, r22
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <strchr_P+0x10>
    1bf2:	00 20       	and	r0, r0
    1bf4:	d9 f7       	brne	.-10     	; 0x1bec <strchr_P+0x2>
    1bf6:	c0 01       	movw	r24, r0
    1bf8:	08 95       	ret
    1bfa:	31 97       	sbiw	r30, 0x01	; 1
    1bfc:	cf 01       	movw	r24, r30
    1bfe:	08 95       	ret

00001c00 <strnlen_P>:
    1c00:	fc 01       	movw	r30, r24
    1c02:	05 90       	lpm	r0, Z+
    1c04:	61 50       	subi	r22, 0x01	; 1
    1c06:	70 40       	sbci	r23, 0x00	; 0
    1c08:	01 10       	cpse	r0, r1
    1c0a:	d8 f7       	brcc	.-10     	; 0x1c02 <strnlen_P+0x2>
    1c0c:	80 95       	com	r24
    1c0e:	90 95       	com	r25
    1c10:	8e 0f       	add	r24, r30
    1c12:	9f 1f       	adc	r25, r31
    1c14:	08 95       	ret

00001c16 <strnlen>:
    1c16:	fc 01       	movw	r30, r24
    1c18:	61 50       	subi	r22, 0x01	; 1
    1c1a:	70 40       	sbci	r23, 0x00	; 0
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	01 10       	cpse	r0, r1
    1c20:	d8 f7       	brcc	.-10     	; 0x1c18 <strnlen+0x2>
    1c22:	80 95       	com	r24
    1c24:	90 95       	com	r25
    1c26:	8e 0f       	add	r24, r30
    1c28:	9f 1f       	adc	r25, r31
    1c2a:	08 95       	ret

00001c2c <fgetc>:
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	20 ff       	sbrs	r18, 0
    1c36:	33 c0       	rjmp	.+102    	; 0x1c9e <fgetc+0x72>
    1c38:	26 ff       	sbrs	r18, 6
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <fgetc+0x24>
    1c3c:	2f 7b       	andi	r18, 0xBF	; 191
    1c3e:	2b 83       	std	Y+3, r18	; 0x03
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	9f 83       	std	Y+7, r25	; 0x07
    1c48:	8e 83       	std	Y+6, r24	; 0x06
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	29 c0       	rjmp	.+82     	; 0x1ca2 <fgetc+0x76>
    1c50:	22 ff       	sbrs	r18, 2
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <fgetc+0x46>
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	80 81       	ld	r24, Z
    1c5a:	08 2e       	mov	r0, r24
    1c5c:	00 0c       	add	r0, r0
    1c5e:	99 0b       	sbc	r25, r25
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	19 f4       	brne	.+6      	; 0x1c6a <fgetc+0x3e>
    1c64:	20 62       	ori	r18, 0x20	; 32
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	1a c0       	rjmp	.+52     	; 0x1c9e <fgetc+0x72>
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	f9 83       	std	Y+1, r31	; 0x01
    1c6e:	e8 83       	st	Y, r30
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <fgetc+0x62>
    1c72:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c74:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c76:	09 95       	icall
    1c78:	97 ff       	sbrs	r25, 7
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <fgetc+0x62>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <fgetc+0x5a>
    1c82:	80 e2       	ldi	r24, 0x20	; 32
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <fgetc+0x5c>
    1c86:	80 e1       	ldi	r24, 0x10	; 16
    1c88:	82 2b       	or	r24, r18
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <fgetc+0x72>
    1c8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c90:	3f 81       	ldd	r19, Y+7	; 0x07
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	3f 83       	std	Y+7, r19	; 0x07
    1c98:	2e 83       	std	Y+6, r18	; 0x06
    1c9a:	99 27       	eor	r25, r25
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <fgetc+0x76>
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	9f ef       	ldi	r25, 0xFF	; 255
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <fputc>:
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	fb 01       	movw	r30, r22
    1cb2:	23 81       	ldd	r18, Z+3	; 0x03
    1cb4:	21 fd       	sbrc	r18, 1
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <fputc+0x16>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	2c c0       	rjmp	.+88     	; 0x1d16 <fputc+0x6e>
    1cbe:	22 ff       	sbrs	r18, 2
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <fputc+0x46>
    1cc2:	46 81       	ldd	r20, Z+6	; 0x06
    1cc4:	57 81       	ldd	r21, Z+7	; 0x07
    1cc6:	24 81       	ldd	r18, Z+4	; 0x04
    1cc8:	35 81       	ldd	r19, Z+5	; 0x05
    1cca:	42 17       	cp	r20, r18
    1ccc:	53 07       	cpc	r21, r19
    1cce:	44 f4       	brge	.+16     	; 0x1ce0 <fputc+0x38>
    1cd0:	a0 81       	ld	r26, Z
    1cd2:	b1 81       	ldd	r27, Z+1	; 0x01
    1cd4:	9d 01       	movw	r18, r26
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	31 83       	std	Z+1, r19	; 0x01
    1cdc:	20 83       	st	Z, r18
    1cde:	8c 93       	st	X, r24
    1ce0:	26 81       	ldd	r18, Z+6	; 0x06
    1ce2:	37 81       	ldd	r19, Z+7	; 0x07
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	37 83       	std	Z+7, r19	; 0x07
    1cea:	26 83       	std	Z+6, r18	; 0x06
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <fputc+0x6e>
    1cee:	8b 01       	movw	r16, r22
    1cf0:	ec 01       	movw	r28, r24
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	00 84       	ldd	r0, Z+8	; 0x08
    1cf6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	09 95       	icall
    1cfc:	89 2b       	or	r24, r25
    1cfe:	e1 f6       	brne	.-72     	; 0x1cb8 <fputc+0x10>
    1d00:	d8 01       	movw	r26, r16
    1d02:	16 96       	adiw	r26, 0x06	; 6
    1d04:	8d 91       	ld	r24, X+
    1d06:	9c 91       	ld	r25, X
    1d08:	17 97       	sbiw	r26, 0x07	; 7
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	17 96       	adiw	r26, 0x07	; 7
    1d0e:	9c 93       	st	X, r25
    1d10:	8e 93       	st	-X, r24
    1d12:	16 97       	sbiw	r26, 0x06	; 6
    1d14:	ce 01       	movw	r24, r28
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <ungetc>:
    1d20:	fb 01       	movw	r30, r22
    1d22:	23 81       	ldd	r18, Z+3	; 0x03
    1d24:	20 ff       	sbrs	r18, 0
    1d26:	12 c0       	rjmp	.+36     	; 0x1d4c <ungetc+0x2c>
    1d28:	26 fd       	sbrc	r18, 6
    1d2a:	10 c0       	rjmp	.+32     	; 0x1d4c <ungetc+0x2c>
    1d2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	93 07       	cpc	r25, r19
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <ungetc+0x2c>
    1d34:	82 83       	std	Z+2, r24	; 0x02
    1d36:	2f 7d       	andi	r18, 0xDF	; 223
    1d38:	20 64       	ori	r18, 0x40	; 64
    1d3a:	23 83       	std	Z+3, r18	; 0x03
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	21 50       	subi	r18, 0x01	; 1
    1d42:	31 09       	sbc	r19, r1
    1d44:	37 83       	std	Z+7, r19	; 0x07
    1d46:	26 83       	std	Z+6, r18	; 0x06
    1d48:	99 27       	eor	r25, r25
    1d4a:	08 95       	ret
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	08 95       	ret

00001d52 <__ultoa_invert>:
    1d52:	fa 01       	movw	r30, r20
    1d54:	aa 27       	eor	r26, r26
    1d56:	28 30       	cpi	r18, 0x08	; 8
    1d58:	51 f1       	breq	.+84     	; 0x1dae <__ultoa_invert+0x5c>
    1d5a:	20 31       	cpi	r18, 0x10	; 16
    1d5c:	81 f1       	breq	.+96     	; 0x1dbe <__ultoa_invert+0x6c>
    1d5e:	e8 94       	clt
    1d60:	6f 93       	push	r22
    1d62:	6e 7f       	andi	r22, 0xFE	; 254
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	af 4f       	sbci	r26, 0xFF	; 255
    1d6e:	b1 e0       	ldi	r27, 0x01	; 1
    1d70:	3e d0       	rcall	.+124    	; 0x1dee <__ultoa_invert+0x9c>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	3c d0       	rcall	.+120    	; 0x1dee <__ultoa_invert+0x9c>
    1d76:	67 0f       	add	r22, r23
    1d78:	78 1f       	adc	r23, r24
    1d7a:	89 1f       	adc	r24, r25
    1d7c:	9a 1f       	adc	r25, r26
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	68 0f       	add	r22, r24
    1d82:	79 1f       	adc	r23, r25
    1d84:	8a 1f       	adc	r24, r26
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	6a 0f       	add	r22, r26
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	20 d0       	rcall	.+64     	; 0x1dd6 <__ultoa_invert+0x84>
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__ultoa_invert+0x48>
    1d98:	68 94       	set
    1d9a:	3f 91       	pop	r19
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	26 9f       	mul	r18, r22
    1da0:	11 24       	eor	r1, r1
    1da2:	30 19       	sub	r19, r0
    1da4:	30 5d       	subi	r19, 0xD0	; 208
    1da6:	31 93       	st	Z+, r19
    1da8:	de f6       	brtc	.-74     	; 0x1d60 <__ultoa_invert+0xe>
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret
    1dae:	46 2f       	mov	r20, r22
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	41 93       	st	Z+, r20
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__ultoa_invert+0x86>
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__ultoa_invert+0x5c>
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <__ultoa_invert+0x58>
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	4f 70       	andi	r20, 0x0F	; 15
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	4a 33       	cpi	r20, 0x3A	; 58
    1dc6:	18 f0       	brcs	.+6      	; 0x1dce <__ultoa_invert+0x7c>
    1dc8:	49 5d       	subi	r20, 0xD9	; 217
    1dca:	31 fd       	sbrc	r19, 1
    1dcc:	40 52       	subi	r20, 0x20	; 32
    1dce:	41 93       	st	Z+, r20
    1dd0:	02 d0       	rcall	.+4      	; 0x1dd6 <__ultoa_invert+0x84>
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <__ultoa_invert+0x6c>
    1dd4:	ea cf       	rjmp	.-44     	; 0x1daa <__ultoa_invert+0x58>
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	a6 95       	lsr	r26
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	ba 95       	dec	r27
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x86>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 05       	cpc	r22, r1
    1dea:	71 05       	cpc	r23, r1
    1dec:	08 95       	ret
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	0a 2e       	mov	r0, r26
    1df4:	06 94       	lsr	r0
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	37 95       	ror	r19
    1dfc:	27 95       	ror	r18
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0xa2>
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	84 1f       	adc	r24, r20
    1e08:	95 1f       	adc	r25, r21
    1e0a:	a0 1d       	adc	r26, r0
    1e0c:	08 95       	ret

00001e0e <__ctype_isfalse>:
    1e0e:	99 27       	eor	r25, r25
    1e10:	88 27       	eor	r24, r24

00001e12 <__ctype_istrue>:
    1e12:	08 95       	ret

00001e14 <eeprom_read_block>:
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22

00001e18 <eeprom_read_blraw>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e1 99       	sbic	0x1c, 1	; 28
    1e1c:	fe cf       	rjmp	.-4      	; 0x1e1a <eeprom_read_blraw+0x2>
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <eeprom_read_blraw+0x14>
    1e20:	ff bb       	out	0x1f, r31	; 31
    1e22:	ee bb       	out	0x1e, r30	; 30
    1e24:	e0 9a       	sbi	0x1c, 0	; 28
    1e26:	31 96       	adiw	r30, 0x01	; 1
    1e28:	0d b2       	in	r0, 0x1d	; 29
    1e2a:	0d 92       	st	X+, r0
    1e2c:	41 50       	subi	r20, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	b8 f7       	brcc	.-18     	; 0x1e20 <eeprom_read_blraw+0x8>
    1e32:	08 95       	ret

00001e34 <eeprom_write_block>:
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <eeprom_write_block+0xc>
    1e3a:	2d 91       	ld	r18, X+
    1e3c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <eeprom_write_r18>
    1e40:	41 50       	subi	r20, 0x01	; 1
    1e42:	50 40       	sbci	r21, 0x00	; 0
    1e44:	d0 f7       	brcc	.-12     	; 0x1e3a <eeprom_write_block+0x6>
    1e46:	08 95       	ret

00001e48 <eeprom_write_byte>:
    1e48:	26 2f       	mov	r18, r22

00001e4a <eeprom_write_r18>:
    1e4a:	e1 99       	sbic	0x1c, 1	; 28
    1e4c:	fe cf       	rjmp	.-4      	; 0x1e4a <eeprom_write_r18>
    1e4e:	9f bb       	out	0x1f, r25	; 31
    1e50:	8e bb       	out	0x1e, r24	; 30
    1e52:	2d bb       	out	0x1d, r18	; 29
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	e2 9a       	sbi	0x1c, 2	; 28
    1e5a:	e1 9a       	sbi	0x1c, 1	; 28
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	08 95       	ret

00001e62 <__divmodsi4>:
    1e62:	05 2e       	mov	r0, r21
    1e64:	97 fb       	bst	r25, 7
    1e66:	1e f4       	brtc	.+6      	; 0x1e6e <__divmodsi4+0xc>
    1e68:	00 94       	com	r0
    1e6a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__negsi2>
    1e6e:	57 fd       	sbrc	r21, 7
    1e70:	07 d0       	rcall	.+14     	; 0x1e80 <__divmodsi4_neg2>
    1e72:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__udivmodsi4>
    1e76:	07 fc       	sbrc	r0, 7
    1e78:	03 d0       	rcall	.+6      	; 0x1e80 <__divmodsi4_neg2>
    1e7a:	4e f4       	brtc	.+18     	; 0x1e8e <__divmodsi4_exit>
    1e7c:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__negsi2>

00001e80 <__divmodsi4_neg2>:
    1e80:	50 95       	com	r21
    1e82:	40 95       	com	r20
    1e84:	30 95       	com	r19
    1e86:	21 95       	neg	r18
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255

00001e8e <__divmodsi4_exit>:
    1e8e:	08 95       	ret

00001e90 <__negsi2>:
    1e90:	90 95       	com	r25
    1e92:	80 95       	com	r24
    1e94:	70 95       	com	r23
    1e96:	61 95       	neg	r22
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	08 95       	ret

00001ea0 <__muluhisi3>:
    1ea0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__umulhisi3>
    1ea4:	a5 9f       	mul	r26, r21
    1ea6:	90 0d       	add	r25, r0
    1ea8:	b4 9f       	mul	r27, r20
    1eaa:	90 0d       	add	r25, r0
    1eac:	a4 9f       	mul	r26, r20
    1eae:	80 0d       	add	r24, r0
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	11 24       	eor	r1, r1
    1eb4:	08 95       	ret

00001eb6 <__mulshisi3>:
    1eb6:	b7 ff       	sbrs	r27, 7
    1eb8:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__muluhisi3>

00001ebc <__mulohisi3>:
    1ebc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__muluhisi3>
    1ec0:	82 1b       	sub	r24, r18
    1ec2:	93 0b       	sbc	r25, r19
    1ec4:	08 95       	ret

00001ec6 <__prologue_saves__>:
    1ec6:	2f 92       	push	r2
    1ec8:	3f 92       	push	r3
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	ca 1b       	sub	r28, r26
    1ef0:	db 0b       	sbc	r29, r27
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	09 94       	ijmp

00001efe <__epilogue_restores__>:
    1efe:	2a 88       	ldd	r2, Y+18	; 0x12
    1f00:	39 88       	ldd	r3, Y+17	; 0x11
    1f02:	48 88       	ldd	r4, Y+16	; 0x10
    1f04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f10:	b9 84       	ldd	r11, Y+9	; 0x09
    1f12:	c8 84       	ldd	r12, Y+8	; 0x08
    1f14:	df 80       	ldd	r13, Y+7	; 0x07
    1f16:	ee 80       	ldd	r14, Y+6	; 0x06
    1f18:	fd 80       	ldd	r15, Y+5	; 0x05
    1f1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f20:	b9 81       	ldd	r27, Y+1	; 0x01
    1f22:	ce 0f       	add	r28, r30
    1f24:	d1 1d       	adc	r29, r1
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	ed 01       	movw	r28, r26
    1f32:	08 95       	ret

00001f34 <__udivmodsi4>:
    1f34:	a1 e2       	ldi	r26, 0x21	; 33
    1f36:	1a 2e       	mov	r1, r26
    1f38:	aa 1b       	sub	r26, r26
    1f3a:	bb 1b       	sub	r27, r27
    1f3c:	fd 01       	movw	r30, r26
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <__udivmodsi4_ep>

00001f40 <__udivmodsi4_loop>:
    1f40:	aa 1f       	adc	r26, r26
    1f42:	bb 1f       	adc	r27, r27
    1f44:	ee 1f       	adc	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	a2 17       	cp	r26, r18
    1f4a:	b3 07       	cpc	r27, r19
    1f4c:	e4 07       	cpc	r30, r20
    1f4e:	f5 07       	cpc	r31, r21
    1f50:	20 f0       	brcs	.+8      	; 0x1f5a <__udivmodsi4_ep>
    1f52:	a2 1b       	sub	r26, r18
    1f54:	b3 0b       	sbc	r27, r19
    1f56:	e4 0b       	sbc	r30, r20
    1f58:	f5 0b       	sbc	r31, r21

00001f5a <__udivmodsi4_ep>:
    1f5a:	66 1f       	adc	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	1a 94       	dec	r1
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <__udivmodsi4_loop>
    1f66:	60 95       	com	r22
    1f68:	70 95       	com	r23
    1f6a:	80 95       	com	r24
    1f6c:	90 95       	com	r25
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	bd 01       	movw	r22, r26
    1f74:	cf 01       	movw	r24, r30
    1f76:	08 95       	ret

00001f78 <__umulhisi3>:
    1f78:	a2 9f       	mul	r26, r18
    1f7a:	b0 01       	movw	r22, r0
    1f7c:	b3 9f       	mul	r27, r19
    1f7e:	c0 01       	movw	r24, r0
    1f80:	a3 9f       	mul	r26, r19
    1f82:	70 0d       	add	r23, r0
    1f84:	81 1d       	adc	r24, r1
    1f86:	11 24       	eor	r1, r1
    1f88:	91 1d       	adc	r25, r1
    1f8a:	b2 9f       	mul	r27, r18
    1f8c:	70 0d       	add	r23, r0
    1f8e:	81 1d       	adc	r24, r1
    1f90:	11 24       	eor	r1, r1
    1f92:	91 1d       	adc	r25, r1
    1f94:	08 95       	ret

00001f96 <_exit>:
    1f96:	f8 94       	cli

00001f98 <__stop_program>:
    1f98:	ff cf       	rjmp	.-2      	; 0x1f98 <__stop_program>
