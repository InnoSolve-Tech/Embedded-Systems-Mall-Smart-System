
Kasamba Smart Mall System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035e  00800100  00001e2c  00001ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029a  0080045e  0080045e  0000221e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000022b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023c8  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8c  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e2  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  000067a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b8  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f33  00000000  00000000  00007320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008253  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec e2       	ldi	r30, 0x2C	; 44
      ac:	fe e1       	ldi	r31, 0x1E	; 30
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ae 35       	cpi	r26, 0x5E	; 94
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	26 e0       	ldi	r18, 0x06	; 6
      c0:	ae e5       	ldi	r26, 0x5E	; 94
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a8 3f       	cpi	r26, 0xF8	; 248
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	e0 d2       	rcall	.+1472   	; 0x690 <main>
      d0:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <_exit>

000000d4 <__bad_interrupt>:
      d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <init_access_control>:
TempAccess temp_access_list[MAX_TEMP_ACCESS];
uint8_t temp_access_count = 0;

void init_access_control(void) {
	// Initialize temp access list
	memset(temp_access_list, 0, sizeof(temp_access_list));
      d6:	86 e4       	ldi	r24, 0x46	; 70
      d8:	e9 e6       	ldi	r30, 0x69	; 105
      da:	f4 e0       	ldi	r31, 0x04	; 4
      dc:	df 01       	movw	r26, r30
      de:	1d 92       	st	X+, r1
      e0:	8a 95       	dec	r24
      e2:	e9 f7       	brne	.-6      	; 0xde <init_access_control+0x8>
	
	// Load temp access list from EEPROM
	eeprom_read_block((void*)&temp_access_count, (const void*)0, sizeof(uint8_t));
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	8e e5       	ldi	r24, 0x5E	; 94
      ee:	94 e0       	ldi	r25, 0x04	; 4
      f0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <eeprom_read_block>
	eeprom_read_block((void*)temp_access_list, (const void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
      f4:	46 e4       	ldi	r20, 0x46	; 70
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	89 e6       	ldi	r24, 0x69	; 105
      fe:	94 e0       	ldi	r25, 0x04	; 4
     100:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <eeprom_read_block>
     104:	08 95       	ret

00000106 <save_temp_access>:
}

void save_temp_access(void) {
	// Save temp access list to EEPROM
	eeprom_write_block((const void*)&temp_access_count, (void*)0, sizeof(uint8_t));
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	8e e5       	ldi	r24, 0x5E	; 94
     110:	94 e0       	ldi	r25, 0x04	; 4
     112:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <eeprom_write_block>
	eeprom_write_block((const void*)temp_access_list, (void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
     116:	46 e4       	ldi	r20, 0x46	; 70
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	89 e6       	ldi	r24, 0x69	; 105
     120:	94 e0       	ldi	r25, 0x04	; 4
     122:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <eeprom_write_block>
     126:	08 95       	ret

00000128 <check_washroom_access>:
		} else {
		uart_print("Unknown access command\n");
	}
}

uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	d8 2e       	mov	r13, r24
     13a:	8b 01       	movw	r16, r22
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
     13c:	c0 e0       	ldi	r28, 0x00	; 0
     13e:	d0 e0       	ldi	r29, 0x00	; 0
     140:	2e c0       	rjmp	.+92     	; 0x19e <check_washroom_access+0x76>
		if (tenants[i].id == tenant_id) {
     142:	8d e1       	ldi	r24, 0x1D	; 29
     144:	8c 9f       	mul	r24, r28
     146:	f0 01       	movw	r30, r0
     148:	8d 9f       	mul	r24, r29
     14a:	f0 0d       	add	r31, r0
     14c:	11 24       	eor	r1, r1
     14e:	e1 55       	subi	r30, 0x51	; 81
     150:	fb 4f       	sbci	r31, 0xFB	; 251
     152:	80 81       	ld	r24, Z
     154:	8d 11       	cpse	r24, r13
     156:	22 c0       	rjmp	.+68     	; 0x19c <check_washroom_access+0x74>
			if (memcmp(tenants[i].washroom_code, code, 4) == 0 && tenants[i].rent_paid >= tenants[i].rent) {
     158:	2d e1       	ldi	r18, 0x1D	; 29
     15a:	2c 9f       	mul	r18, r28
     15c:	c0 01       	movw	r24, r0
     15e:	2d 9f       	mul	r18, r29
     160:	90 0d       	add	r25, r0
     162:	11 24       	eor	r1, r1
     164:	44 e0       	ldi	r20, 0x04	; 4
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	b8 01       	movw	r22, r16
     16a:	89 53       	subi	r24, 0x39	; 57
     16c:	9b 4f       	sbci	r25, 0xFB	; 251
     16e:	74 d7       	rcall	.+3816   	; 0x1058 <memcmp>
     170:	89 2b       	or	r24, r25
     172:	09 f0       	breq	.+2      	; 0x176 <check_washroom_access+0x4e>
     174:	88 c0       	rjmp	.+272    	; 0x286 <check_washroom_access+0x15e>
     176:	8d e1       	ldi	r24, 0x1D	; 29
     178:	8c 9f       	mul	r24, r28
     17a:	f0 01       	movw	r30, r0
     17c:	8d 9f       	mul	r24, r29
     17e:	f0 0d       	add	r31, r0
     180:	11 24       	eor	r1, r1
     182:	e1 55       	subi	r30, 0x51	; 81
     184:	fb 4f       	sbci	r31, 0xFB	; 251
     186:	84 8d       	ldd	r24, Z+28	; 0x1c
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	26 89       	ldd	r18, Z+22	; 0x16
     18c:	37 89       	ldd	r19, Z+23	; 0x17
     18e:	82 17       	cp	r24, r18
     190:	93 07       	cpc	r25, r19
     192:	08 f0       	brcs	.+2      	; 0x196 <check_washroom_access+0x6e>
     194:	84 c0       	rjmp	.+264    	; 0x29e <check_washroom_access+0x176>
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	77 c0       	rjmp	.+238    	; 0x28a <check_washroom_access+0x162>
	}
}

uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
     19c:	21 96       	adiw	r28, 0x01	; 1
     19e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <tenant_count>
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	c8 17       	cp	r28, r24
     1a6:	d9 07       	cpc	r29, r25
     1a8:	64 f2       	brlt	.-104    	; 0x142 <check_washroom_access+0x1a>
     1aa:	c0 e0       	ldi	r28, 0x00	; 0
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	6d c0       	rjmp	.+218    	; 0x28a <check_washroom_access+0x162>
		}
	}
	
	// Check temporary access
	for (int i = 0; i < temp_access_count; i++) {
		if (temp_access_list[i].tenant_id == tenant_id && memcmp(temp_access_list[i].temp_code, code, 4) == 0) {
     1b0:	fe 01       	movw	r30, r28
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ec 1b       	sub	r30, r28
     1c0:	fd 0b       	sbc	r31, r29
     1c2:	e7 59       	subi	r30, 0x97	; 151
     1c4:	fb 4f       	sbci	r31, 0xFB	; 251
     1c6:	80 81       	ld	r24, Z
     1c8:	d8 12       	cpse	r13, r24
     1ca:	5b c0       	rjmp	.+182    	; 0x282 <check_washroom_access+0x15a>
     1cc:	ce 01       	movw	r24, r28
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	8c 1b       	sub	r24, r28
     1dc:	9d 0b       	sbc	r25, r29
     1de:	44 e0       	ldi	r20, 0x04	; 4
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	b8 01       	movw	r22, r16
     1e4:	86 59       	subi	r24, 0x96	; 150
     1e6:	9b 4f       	sbci	r25, 0xFB	; 251
     1e8:	37 d7       	rcall	.+3694   	; 0x1058 <memcmp>
     1ea:	89 2b       	or	r24, r25
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <check_washroom_access+0xc8>
     1ee:	49 c0       	rjmp	.+146    	; 0x282 <check_washroom_access+0x15a>
			if (temp_access_list[i].timeout > 0) {
     1f0:	fe 01       	movw	r30, r28
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 1f       	adc	r31, r31
     1fe:	ec 1b       	sub	r30, r28
     200:	fd 0b       	sbc	r31, r29
     202:	e7 59       	subi	r30, 0x97	; 151
     204:	fb 4f       	sbci	r31, 0xFB	; 251
     206:	85 81       	ldd	r24, Z+5	; 0x05
     208:	96 81       	ldd	r25, Z+6	; 0x06
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	79 f1       	breq	.+94     	; 0x26c <check_washroom_access+0x144>
				temp_access_list[i].timeout--;
     20e:	fe 01       	movw	r30, r28
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	ee 0f       	add	r30, r30
     216:	ff 1f       	adc	r31, r31
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	ec 1b       	sub	r30, r28
     21e:	fd 0b       	sbc	r31, r29
     220:	e7 59       	subi	r30, 0x97	; 151
     222:	fb 4f       	sbci	r31, 0xFB	; 251
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	96 83       	std	Z+6, r25	; 0x06
				save_temp_access();
     228:	85 83       	std	Z+5, r24	; 0x05
     22a:	6d df       	rcall	.-294    	; 0x106 <save_temp_access>
				return 1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	38 c0       	rjmp	.+112    	; 0x2a0 <check_washroom_access+0x178>
				} else {
				// Remove expired temporary access
				for (int j = i; j < temp_access_count - 1; j++) {
					temp_access_list[j] = temp_access_list[j+1];
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	de 01       	movw	r26, r28
     236:	aa 0f       	add	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	aa 0f       	add	r26, r26
     23c:	bb 1f       	adc	r27, r27
     23e:	aa 0f       	add	r26, r26
     240:	bb 1f       	adc	r27, r27
     242:	ac 1b       	sub	r26, r28
     244:	bd 0b       	sbc	r27, r29
     246:	a7 59       	subi	r26, 0x97	; 151
     248:	bb 4f       	sbci	r27, 0xFB	; 251
     24a:	fc 01       	movw	r30, r24
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	e8 1b       	sub	r30, r24
     25a:	f9 0b       	sbc	r31, r25
     25c:	e7 59       	subi	r30, 0x97	; 151
     25e:	fb 4f       	sbci	r31, 0xFB	; 251
     260:	27 e0       	ldi	r18, 0x07	; 7
     262:	01 90       	ld	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	2a 95       	dec	r18
     268:	e1 f7       	brne	.-8      	; 0x262 <check_washroom_access+0x13a>
				temp_access_list[i].timeout--;
				save_temp_access();
				return 1;
				} else {
				// Remove expired temporary access
				for (int j = i; j < temp_access_count - 1; j++) {
     26a:	ec 01       	movw	r28, r24
     26c:	c7 01       	movw	r24, r14
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	c8 17       	cp	r28, r24
     272:	d9 07       	cpc	r29, r25
     274:	ec f2       	brlt	.-70     	; 0x230 <check_washroom_access+0x108>
					temp_access_list[j] = temp_access_list[j+1];
				}
				temp_access_count--;
     276:	ca 94       	dec	r12
     278:	c0 92 5e 04 	sts	0x045E, r12	; 0x80045e <__data_end>
				save_temp_access();
     27c:	44 df       	rcall	.-376    	; 0x106 <save_temp_access>
				break;
			}
		}
	}
	
	return 0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
				for (int j = i; j < temp_access_count - 1; j++) {
					temp_access_list[j] = temp_access_list[j+1];
				}
				temp_access_count--;
				save_temp_access();
				break;
     280:	0f c0       	rjmp	.+30     	; 0x2a0 <check_washroom_access+0x178>
			break;
		}
	}
	
	// Check temporary access
	for (int i = 0; i < temp_access_count; i++) {
     282:	21 96       	adiw	r28, 0x01	; 1
     284:	02 c0       	rjmp	.+4      	; 0x28a <check_washroom_access+0x162>
     286:	c0 e0       	ldi	r28, 0x00	; 0
     288:	d0 e0       	ldi	r29, 0x00	; 0
     28a:	c0 90 5e 04 	lds	r12, 0x045E	; 0x80045e <__data_end>
     28e:	ec 2c       	mov	r14, r12
     290:	f1 2c       	mov	r15, r1
     292:	ce 15       	cp	r28, r14
     294:	df 05       	cpc	r29, r15
     296:	0c f4       	brge	.+2      	; 0x29a <check_washroom_access+0x172>
     298:	8b cf       	rjmp	.-234    	; 0x1b0 <check_washroom_access+0x88>
				break;
			}
		}
	}
	
	return 0;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <check_washroom_access+0x178>
uint8_t check_washroom_access(uint8_t tenant_id, uint8_t* code) {
	// Check permanent access
	for (int i = 0; i < tenant_count; i++) {
		if (tenants[i].id == tenant_id) {
			if (memcmp(tenants[i].washroom_code, code, 4) == 0 && tenants[i].rent_paid >= tenants[i].rent) {
				return 1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	
	return 0;
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	ef 90       	pop	r14
     2ac:	df 90       	pop	r13
     2ae:	cf 90       	pop	r12
     2b0:	08 95       	ret

000002b2 <set_temporary_access>:

void set_temporary_access(uint8_t tenant_id, uint8_t* temp_code, uint16_t timeout) {
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	27 97       	sbiw	r28, 0x07	; 7
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
	if (temp_access_count < MAX_TEMP_ACCESS) {
     2ca:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <__data_end>
     2ce:	9a 30       	cpi	r25, 0x0A	; 10
     2d0:	48 f5       	brcc	.+82     	; 0x324 <set_temporary_access+0x72>
		TempAccess new_temp_access;
		new_temp_access.tenant_id = tenant_id;
     2d2:	89 83       	std	Y+1, r24	; 0x01
		memcpy(new_temp_access.temp_code, temp_code, 4);
     2d4:	fb 01       	movw	r30, r22
     2d6:	00 81       	ld	r16, Z
     2d8:	11 81       	ldd	r17, Z+1	; 0x01
     2da:	22 81       	ldd	r18, Z+2	; 0x02
     2dc:	33 81       	ldd	r19, Z+3	; 0x03
     2de:	0a 83       	std	Y+2, r16	; 0x02
     2e0:	1b 83       	std	Y+3, r17	; 0x03
     2e2:	2c 83       	std	Y+4, r18	; 0x04
     2e4:	3d 83       	std	Y+5, r19	; 0x05
		new_temp_access.timeout = timeout;
     2e6:	5f 83       	std	Y+7, r21	; 0x07
     2e8:	4e 83       	std	Y+6, r20	; 0x06
		
		temp_access_list[temp_access_count++] = new_temp_access;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	89 0f       	add	r24, r25
     2ee:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <__data_end>
     2f2:	89 2f       	mov	r24, r25
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	dc 01       	movw	r26, r24
     2f8:	aa 0f       	add	r26, r26
     2fa:	bb 1f       	adc	r27, r27
     2fc:	aa 0f       	add	r26, r26
     2fe:	bb 1f       	adc	r27, r27
     300:	aa 0f       	add	r26, r26
     302:	bb 1f       	adc	r27, r27
     304:	a8 1b       	sub	r26, r24
     306:	b9 0b       	sbc	r27, r25
     308:	a7 59       	subi	r26, 0x97	; 151
     30a:	bb 4f       	sbci	r27, 0xFB	; 251
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	fe 01       	movw	r30, r28
     310:	31 96       	adiw	r30, 0x01	; 1
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <set_temporary_access+0x60>
		save_temp_access();
     31a:	f5 de       	rcall	.-534    	; 0x106 <save_temp_access>
		
		uart_print("Temporary access set\n");
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	13 d6       	rcall	.+3110   	; 0xf48 <uart_print>
     322:	03 c0       	rjmp	.+6      	; 0x32a <set_temporary_access+0x78>
		} else {
		uart_print("Error: Maximum number of temporary access codes reached\n");
     324:	8a e1       	ldi	r24, 0x1A	; 26
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0f d6       	rcall	.+3102   	; 0xf48 <uart_print>
	}
     32a:	27 96       	adiw	r28, 0x07	; 7
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <process_access_command>:
	// Save temp access list to EEPROM
	eeprom_write_block((const void*)&temp_access_count, (void*)0, sizeof(uint8_t));
	eeprom_write_block((const void*)temp_access_list, (void*)sizeof(uint8_t), sizeof(TempAccess) * MAX_TEMP_ACCESS);
}

void process_access_command(char* command) {
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	27 97       	sbiw	r28, 0x07	; 7
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	8c 01       	movw	r16, r24
	if (strncmp(command, "check ", 6) == 0) {
     35e:	46 e0       	ldi	r20, 0x06	; 6
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	63 e5       	ldi	r22, 0x53	; 83
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	8e d6       	rcall	.+3356   	; 0x1084 <strncmp>
     368:	89 2b       	or	r24, r25
     36a:	71 f5       	brne	.+92     	; 0x3c8 <process_access_command+0x88>
		uint8_t tenant_id;
		uint8_t code[4];
		sscanf(command + 6, "%hhu %hhu%hhu%hhu%hhu", &tenant_id, &code[0], &code[1], &code[2], &code[3]);
     36c:	ce 01       	movw	r24, r28
     36e:	04 96       	adiw	r24, 0x04	; 4
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	9f 93       	push	r25
     378:	8f 93       	push	r24
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	9e 01       	movw	r18, r28
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	79 01       	movw	r14, r18
     388:	3f 93       	push	r19
     38a:	2f 93       	push	r18
     38c:	03 96       	adiw	r24, 0x03	; 3
     38e:	9f 93       	push	r25
     390:	8f 93       	push	r24
     392:	8a e5       	ldi	r24, 0x5A	; 90
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	9f 93       	push	r25
     398:	8f 93       	push	r24
     39a:	0a 5f       	subi	r16, 0xFA	; 250
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	1f 93       	push	r17
     3a0:	0f 93       	push	r16
     3a2:	bb d6       	rcall	.+3446   	; 0x111a <sscanf>
		if (check_washroom_access(tenant_id, code)) {
     3a4:	b7 01       	movw	r22, r14
     3a6:	8d 81       	ldd	r24, Y+5	; 0x05
     3a8:	bf de       	rcall	.-642    	; 0x128 <check_washroom_access>
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	88 23       	and	r24, r24
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <process_access_command+0x80>
			uart_print("Access granted\n");
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	c5 d5       	rcall	.+2954   	; 0xf48 <uart_print>
     3be:	37 c0       	rjmp	.+110    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			} else {
			uart_print("Access denied\n");
     3c0:	80 e8       	ldi	r24, 0x80	; 128
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	c1 d5       	rcall	.+2946   	; 0xf48 <uart_print>
     3c6:	33 c0       	rjmp	.+102    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3c8:	45 e0       	ldi	r20, 0x05	; 5
		}
		} else if (strncmp(command, "temp ", 5) == 0) {
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	6f e8       	ldi	r22, 0x8F	; 143
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	c8 01       	movw	r24, r16
     3d2:	58 d6       	rcall	.+3248   	; 0x1084 <strncmp>
     3d4:	89 2b       	or	r24, r25
     3d6:	41 f5       	brne	.+80     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3d8:	ce 01       	movw	r24, r28
		uint8_t tenant_id, temp_code[4];
		uint16_t timeout;
		sscanf(command + 5, "%hhu %hhu%hhu%hhu%hhu %hu", &tenant_id, &temp_code[0], &temp_code[1], &temp_code[2], &temp_code[3], &timeout);
     3da:	05 96       	adiw	r24, 0x05	; 5
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	7c 01       	movw	r14, r24
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	06 96       	adiw	r24, 0x06	; 6
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	85 e9       	ldi	r24, 0x95	; 149
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	9f 93       	push	r25
     406:	8f 93       	push	r24
     408:	0b 5f       	subi	r16, 0xFB	; 251
     40a:	1f 4f       	sbci	r17, 0xFF	; 255
     40c:	1f 93       	push	r17
     40e:	0f 93       	push	r16
     410:	84 d6       	rcall	.+3336   	; 0x111a <sscanf>
		set_temporary_access(tenant_id, temp_code, timeout);
     412:	4d 81       	ldd	r20, Y+5	; 0x05
     414:	5e 81       	ldd	r21, Y+6	; 0x06
     416:	b7 01       	movw	r22, r14
     418:	8f 81       	ldd	r24, Y+7	; 0x07
     41a:	4b df       	rcall	.-362    	; 0x2b2 <set_temporary_access>
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		} else {
		uart_print("Unknown access command\n");
     428:	8f ea       	ldi	r24, 0xAF	; 175
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	8d d5       	rcall	.+2842   	; 0xf48 <uart_print>
     42e:	27 96       	adiw	r28, 0x07	; 7
	}
}
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <init_system>:
	return 0;
}

void init_system(void) {
	// Initialize I/O
	DDRD &= ~((1 << ENTRANCE_1_PIN) | (1 << ENTRANCE_2_PIN) | (1 << EXIT_PIN)); // Set as inputs
     448:	81 b3       	in	r24, 0x11	; 17
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << ENTRANCE_1_PIN) | (1 << ENTRANCE_2_PIN) | (1 << EXIT_PIN);   // Enable pull-up resistors
     44e:	82 b3       	in	r24, 0x12	; 18
     450:	87 60       	ori	r24, 0x07	; 7
     452:	82 bb       	out	0x12, r24	; 18

	// Initialize UART
	uart_init();
     454:	67 d5       	rcall	.+2766   	; 0xf24 <uart_init>

	// Initialize tenant system
	init_tenant_system();
     456:	51 d3       	rcall	.+1698   	; 0xafa <init_tenant_system>

	// Initialize access control system
	init_access_control();
     458:	3e de       	rcall	.-900    	; 0xd6 <init_access_control>
     45a:	4c d1       	rcall	.+664    	; 0x6f4 <init_mall_management>

	// Initialize mall management system
	init_mall_management();
     45c:	78 94       	sei
     45e:	08 95       	ret

00000460 <process_entrance_exit>:

	// Enable global interrupts
	sei();
     460:	80 99       	sbic	0x10, 0	; 16
     462:	14 c0       	rjmp	.+40     	; 0x48c <process_entrance_exit+0x2c>
}

void process_entrance_exit(void) {
	// Check entrance 1
	if (!(PIND & (1 << ENTRANCE_1_PIN))) {
		people_count++;
     464:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <people_count>
     468:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <people_count+0x1>
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <people_count+0x1>
     472:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <people_count>
		floor_count[0]++;
     476:	ef e5       	ldi	r30, 0x5F	; 95
     478:	f4 e0       	ldi	r31, 0x04	; 4
     47a:	80 81       	ld	r24, Z
     47c:	8f 5f       	subi	r24, 0xFF	; 255
     47e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	8f e4       	ldi	r24, 0x4F	; 79
     482:	93 ec       	ldi	r25, 0xC3	; 195
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <process_entrance_exit+0x24>
     488:	00 c0       	rjmp	.+0      	; 0x48a <process_entrance_exit+0x2a>
     48a:	00 00       	nop
		_delay_ms(200); // Debounce
	}

	// Check entrance 2
	if (!(PIND & (1 << ENTRANCE_2_PIN))) {
     48c:	81 99       	sbic	0x10, 1	; 16
     48e:	14 c0       	rjmp	.+40     	; 0x4b8 <process_entrance_exit+0x58>
		people_count++;
     490:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <people_count>
     494:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <people_count+0x1>
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <people_count+0x1>
     49e:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <people_count>
		floor_count[0]++;
     4a2:	ef e5       	ldi	r30, 0x5F	; 95
     4a4:	f4 e0       	ldi	r31, 0x04	; 4
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 83       	st	Z, r24
     4ac:	8f e4       	ldi	r24, 0x4F	; 79
     4ae:	93 ec       	ldi	r25, 0xC3	; 195
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <process_entrance_exit+0x50>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <process_entrance_exit+0x56>
     4b6:	00 00       	nop
		_delay_ms(200); // Debounce
	}

	// Check exit
	if (!(PIND & (1 << EXIT_PIN))) {
     4b8:	82 99       	sbic	0x10, 2	; 16
     4ba:	1e c0       	rjmp	.+60     	; 0x4f8 <process_entrance_exit+0x98>
		if (people_count > 0) {
     4bc:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <people_count>
     4c0:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <people_count+0x1>
     4c4:	89 2b       	or	r24, r25
     4c6:	91 f0       	breq	.+36     	; 0x4ec <process_entrance_exit+0x8c>
			people_count--;
     4c8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <people_count>
     4cc:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <people_count+0x1>
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <people_count+0x1>
     4d6:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <people_count>
			// Assume exit is from ground floor
			if (floor_count[0] > 0) floor_count[0]--;
     4da:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <floor_count>
     4de:	88 23       	and	r24, r24
     4e0:	29 f0       	breq	.+10     	; 0x4ec <process_entrance_exit+0x8c>
     4e2:	ef e5       	ldi	r30, 0x5F	; 95
     4e4:	f4 e0       	ldi	r31, 0x04	; 4
     4e6:	80 81       	ld	r24, Z
     4e8:	81 50       	subi	r24, 0x01	; 1
     4ea:	80 83       	st	Z, r24
     4ec:	8f e4       	ldi	r24, 0x4F	; 79
     4ee:	93 ec       	ldi	r25, 0xC3	; 195
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <process_entrance_exit+0x90>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <process_entrance_exit+0x96>
     4f6:	00 00       	nop
     4f8:	08 95       	ret

000004fa <process_command>:
		}
		_delay_ms(200); // Debounce
	}
}

void process_command(char* command) {
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	c4 56       	subi	r28, 0x64	; 100
     508:	d1 09       	sbc	r29, r1
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	8c 01       	movw	r16, r24
	char response[100];

	if (strcmp(command, "count") == 0) {
     516:	67 ec       	ldi	r22, 0xC7	; 199
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	ab d5       	rcall	.+2902   	; 0x1072 <strcmp>
     51c:	89 2b       	or	r24, r25
     51e:	19 f5       	brne	.+70     	; 0x566 <process_command+0x6c>
		sprintf(response, "Total people: %d\nGround floor: %d\nFirst floor: %d\nSecond floor: %d\n",
		people_count, floor_count[0], floor_count[1], floor_count[2]);
     520:	ef e5       	ldi	r30, 0x5F	; 95
     522:	f4 e0       	ldi	r31, 0x04	; 4
     524:	42 81       	ldd	r20, Z+2	; 0x02
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	20 81       	ld	r18, Z

void process_command(char* command) {
	char response[100];

	if (strcmp(command, "count") == 0) {
		sprintf(response, "Total people: %d\nGround floor: %d\nFirst floor: %d\nSecond floor: %d\n",
     52a:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <people_count>
     52e:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <people_count+0x1>
     532:	1f 92       	push	r1
     534:	4f 93       	push	r20
     536:	1f 92       	push	r1
     538:	3f 93       	push	r19
     53a:	1f 92       	push	r1
     53c:	2f 93       	push	r18
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	8d ec       	ldi	r24, 0xCD	; 205
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8e 01       	movw	r16, r28
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	b4 d5       	rcall	.+2920   	; 0x10be <sprintf>
		people_count, floor_count[0], floor_count[1], floor_count[2]);
		uart_print(response);
     556:	c8 01       	movw	r24, r16
     558:	f7 d4       	rcall	.+2542   	; 0xf48 <uart_print>
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	89 c0       	rjmp	.+274    	; 0x678 <process_command+0x17e>
     566:	45 e0       	ldi	r20, 0x05	; 5
		} else if (strncmp(command, "move ", 5) == 0) {
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	66 e3       	ldi	r22, 0x36	; 54
     56c:	74 e0       	ldi	r23, 0x04	; 4
     56e:	c8 01       	movw	r24, r16
     570:	89 d5       	rcall	.+2834   	; 0x1084 <strncmp>
     572:	89 2b       	or	r24, r25
     574:	09 f0       	breq	.+2      	; 0x578 <process_command+0x7e>
     576:	59 c0       	rjmp	.+178    	; 0x62a <process_command+0x130>
     578:	f8 01       	movw	r30, r16
		int from_floor = command[5] - '0';
     57a:	85 81       	ldd	r24, Z+5	; 0x05
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	c0 97       	sbiw	r24, 0x30	; 48
     580:	27 81       	ldd	r18, Z+7	; 0x07
		int to_floor = command[7] - '0';
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	20 53       	subi	r18, 0x30	; 48
     586:	31 09       	sbc	r19, r1
     588:	83 30       	cpi	r24, 0x03	; 3
		if (from_floor >= 0 && from_floor < 3 && to_floor >= 0 && to_floor < 3 && from_floor != to_floor) {
     58a:	91 05       	cpc	r25, r1
     58c:	08 f0       	brcs	.+2      	; 0x590 <process_command+0x96>
     58e:	40 c0       	rjmp	.+128    	; 0x610 <process_command+0x116>
     590:	33 23       	and	r19, r19
     592:	0c f4       	brge	.+2      	; 0x596 <process_command+0x9c>
     594:	3d c0       	rjmp	.+122    	; 0x610 <process_command+0x116>
     596:	23 30       	cpi	r18, 0x03	; 3
     598:	31 05       	cpc	r19, r1
     59a:	d4 f5       	brge	.+116    	; 0x610 <process_command+0x116>
     59c:	82 17       	cp	r24, r18
     59e:	93 07       	cpc	r25, r19
     5a0:	b9 f1       	breq	.+110    	; 0x610 <process_command+0x116>
     5a2:	fc 01       	movw	r30, r24
			if (floor_count[from_floor] > 0) {
     5a4:	e1 5a       	subi	r30, 0xA1	; 161
     5a6:	fb 4f       	sbci	r31, 0xFB	; 251
     5a8:	40 81       	ld	r20, Z
     5aa:	44 23       	and	r20, r20
     5ac:	f9 f0       	breq	.+62     	; 0x5ec <process_command+0xf2>
     5ae:	fc 01       	movw	r30, r24
				floor_count[from_floor]--;
     5b0:	e1 5a       	subi	r30, 0xA1	; 161
     5b2:	fb 4f       	sbci	r31, 0xFB	; 251
     5b4:	40 81       	ld	r20, Z
     5b6:	41 50       	subi	r20, 0x01	; 1
     5b8:	40 83       	st	Z, r20
     5ba:	f9 01       	movw	r30, r18
				floor_count[to_floor]++;
     5bc:	e1 5a       	subi	r30, 0xA1	; 161
     5be:	fb 4f       	sbci	r31, 0xFB	; 251
     5c0:	40 81       	ld	r20, Z
     5c2:	4f 5f       	subi	r20, 0xFF	; 255
     5c4:	40 83       	st	Z, r20
     5c6:	3f 93       	push	r19
				sprintf(response, "Moved 1 person from floor %d to floor %d\n", from_floor, to_floor);
     5c8:	2f 93       	push	r18
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	81 e1       	ldi	r24, 0x11	; 17
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	6f d5       	rcall	.+2782   	; 0x10be <sprintf>
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	1b c0       	rjmp	.+54     	; 0x622 <process_command+0x128>
     5ec:	9f 93       	push	r25
				} else {
				sprintf(response, "Error: No people on floor %d\n", from_floor);
     5ee:	8f 93       	push	r24
     5f0:	8b e3       	ldi	r24, 0x3B	; 59
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	ce 01       	movw	r24, r28
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	5e d5       	rcall	.+2748   	; 0x10be <sprintf>
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	09 c0       	rjmp	.+18     	; 0x622 <process_command+0x128>
     610:	8e e1       	ldi	r24, 0x1E	; 30
			}
			} else {
			sprintf(response, "Error: Invalid floor numbers\n");
     612:	e9 e5       	ldi	r30, 0x59	; 89
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	de 01       	movw	r26, r28
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	8a 95       	dec	r24
     620:	e1 f7       	brne	.-8      	; 0x61a <process_command+0x120>
		}
		uart_print(response);
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	90 d4       	rcall	.+2336   	; 0xf48 <uart_print>
     628:	27 c0       	rjmp	.+78     	; 0x678 <process_command+0x17e>
		} else if (strncmp(command, "tenant ", 7) == 0) {
     62a:	47 e0       	ldi	r20, 0x07	; 7
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	67 e7       	ldi	r22, 0x77	; 119
     630:	72 e0       	ldi	r23, 0x02	; 2
     632:	c8 01       	movw	r24, r16
     634:	27 d5       	rcall	.+2638   	; 0x1084 <strncmp>
     636:	89 2b       	or	r24, r25
     638:	21 f4       	brne	.+8      	; 0x642 <process_command+0x148>
		process_tenant_command(command + 7);
     63a:	c8 01       	movw	r24, r16
     63c:	07 96       	adiw	r24, 0x07	; 7
     63e:	ea d3       	rcall	.+2004   	; 0xe14 <process_tenant_command>
     640:	1b c0       	rjmp	.+54     	; 0x678 <process_command+0x17e>
		} else if (strncmp(command, "access ", 7) == 0) {
     642:	47 e0       	ldi	r20, 0x07	; 7
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	6f e7       	ldi	r22, 0x7F	; 127
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	c8 01       	movw	r24, r16
     64c:	1b d5       	rcall	.+2614   	; 0x1084 <strncmp>
     64e:	89 2b       	or	r24, r25
     650:	21 f4       	brne	.+8      	; 0x65a <process_command+0x160>
		process_access_command(command + 7);
     652:	c8 01       	movw	r24, r16
     654:	07 96       	adiw	r24, 0x07	; 7
     656:	74 de       	rcall	.-792    	; 0x340 <process_access_command>
     658:	0f c0       	rjmp	.+30     	; 0x678 <process_command+0x17e>
		} else if (strncmp(command, "manage ", 7) == 0) {
     65a:	47 e0       	ldi	r20, 0x07	; 7
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	67 e8       	ldi	r22, 0x87	; 135
     660:	72 e0       	ldi	r23, 0x02	; 2
     662:	c8 01       	movw	r24, r16
     664:	0f d5       	rcall	.+2590   	; 0x1084 <strncmp>
     666:	89 2b       	or	r24, r25
     668:	21 f4       	brne	.+8      	; 0x672 <process_command+0x178>
		process_management_command(command + 7);
     66a:	c8 01       	movw	r24, r16
     66c:	07 96       	adiw	r24, 0x07	; 7
     66e:	84 d1       	rcall	.+776    	; 0x978 <process_management_command>
     670:	03 c0       	rjmp	.+6      	; 0x678 <process_command+0x17e>
     672:	8f e8       	ldi	r24, 0x8F	; 143
		} else {
		uart_print("Unknown command\n");
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	68 d4       	rcall	.+2256   	; 0xf48 <uart_print>
     678:	cc 59       	subi	r28, 0x9C	; 156
     67a:	df 4f       	sbci	r29, 0xFF	; 255
	}
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <main>:
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
// Function prototypes
void init_system(void);
void process_entrance_exit(void);
void process_command(char* command);

int main(void) {
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	e2 97       	sbiw	r28, 0x32	; 50
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
	init_system();
     6a4:	d1 de       	rcall	.-606    	; 0x448 <init_system>
	
	char command[50];
	uint8_t index = 0;

	while (1) {
		process_entrance_exit();
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	db de       	rcall	.-586    	; 0x460 <process_entrance_exit>

		// Check for incoming commands
		if (UCSR0A & (1<<RXC0)) {
     6aa:	5f 9b       	sbis	0x0b, 7	; 11
			char c = uart_receive();
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <main+0x18>
     6ae:	48 d4       	rcall	.+2192   	; 0xf40 <uart_receive>
			if (c == '\n' || c == '\r') {
     6b0:	8a 30       	cpi	r24, 0x0A	; 10
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <main+0x28>
     6b4:	8d 30       	cpi	r24, 0x0D	; 13
     6b6:	61 f4       	brne	.+24     	; 0x6d0 <main+0x40>
				command[index] = '\0';
     6b8:	e1 e0       	ldi	r30, 0x01	; 1
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	ec 0f       	add	r30, r28
     6be:	fd 1f       	adc	r31, r29
     6c0:	e1 0f       	add	r30, r17
     6c2:	f1 1d       	adc	r31, r1
				process_command(command);
     6c4:	10 82       	st	Z, r1
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	17 df       	rcall	.-466    	; 0x4fa <process_command>
				index = 0;
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	ec cf       	rjmp	.-40     	; 0x6a8 <main+0x18>
				} else {
				command[index++] = c;
     6d0:	e1 e0       	ldi	r30, 0x01	; 1
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	ec 0f       	add	r30, r28
     6d6:	fd 1f       	adc	r31, r29
     6d8:	e1 0f       	add	r30, r17
     6da:	f1 1d       	adc	r31, r1
     6dc:	80 83       	st	Z, r24
     6de:	1f 5f       	subi	r17, 0xFF	; 255
     6e0:	e3 cf       	rjmp	.-58     	; 0x6a8 <main+0x18>

000006e2 <save_mall_config>:
    eeprom_read_block((void*)&total_earnings, (const void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
}

void save_mall_config(void) {
    // Save mall configuration to EEPROM
    eeprom_write_block((const void*)&mall_config, (void*)0, sizeof(MallConfig));
     6e2:	45 e0       	ldi	r20, 0x05	; 5
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	83 ef       	ldi	r24, 0xF3	; 243
     6ec:	96 e0       	ldi	r25, 0x06	; 6
     6ee:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <eeprom_write_block>
     6f2:	08 95       	ret

000006f4 <init_mall_management>:
static uint32_t total_earnings = 0;
#define EEPROM_TOTAL_EARNINGS_ADDR (sizeof(MallConfig))

void init_mall_management(void) {
    // Load mall configuration from EEPROM
    eeprom_read_block((void*)&mall_config, (const void*)0, sizeof(MallConfig));
     6f4:	45 e0       	ldi	r20, 0x05	; 5
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	83 ef       	ldi	r24, 0xF3	; 243
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <eeprom_read_block>
    
    // Set default values if EEPROM is empty
    if (mall_config.base_rent == 0xFFFF) {
     704:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <mall_config>
     708:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <mall_config+0x1>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	99 f4       	brne	.+38     	; 0x736 <init_mall_management+0x42>
        mall_config.base_rent = 1000;  // Default base rent
     710:	88 ee       	ldi	r24, 0xE8	; 232
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <mall_config+0x1>
     718:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <mall_config>
        for (int i = 0; i < NUM_FLOORS; i++) {
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	06 c0       	rjmp	.+12     	; 0x72e <init_mall_management+0x3a>
            mall_config.escalator_state[i] = 1;  // Escalators on by default
     722:	fc 01       	movw	r30, r24
     724:	ed 50       	subi	r30, 0x0D	; 13
     726:	f9 4f       	sbci	r31, 0xF9	; 249
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	22 83       	std	Z+2, r18	; 0x02
    eeprom_read_block((void*)&mall_config, (const void*)0, sizeof(MallConfig));
    
    // Set default values if EEPROM is empty
    if (mall_config.base_rent == 0xFFFF) {
        mall_config.base_rent = 1000;  // Default base rent
        for (int i = 0; i < NUM_FLOORS; i++) {
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	91 05       	cpc	r25, r1
     732:	bc f3       	brlt	.-18     	; 0x722 <init_mall_management+0x2e>
            mall_config.escalator_state[i] = 1;  // Escalators on by default
        }
        save_mall_config();
     734:	d6 df       	rcall	.-84     	; 0x6e2 <save_mall_config>
    }

    // Load total earnings from EEPROM
    eeprom_read_block((void*)&total_earnings, (const void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
     736:	44 e0       	ldi	r20, 0x04	; 4
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	65 e0       	ldi	r22, 0x05	; 5
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	84 e6       	ldi	r24, 0x64	; 100
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <eeprom_read_block>
     746:	08 95       	ret

00000748 <set_base_rent>:
    } else {
        uart_print("Unknown management command\n");
    }
}

void set_base_rent(uint16_t rent) {
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	e2 97       	sbiw	r28, 0x32	; 50
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	8c 01       	movw	r16, r24
    mall_config.base_rent = rent;
     762:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <mall_config+0x1>
     766:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <mall_config>
    save_mall_config();
     76a:	bb df       	rcall	.-138    	; 0x6e2 <save_mall_config>
    
    // Update rent for all tenants
    for (int i = 0; i < tenant_count; i++) {
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	4b c0       	rjmp	.+150    	; 0x808 <set_base_rent+0xc0>
        if (tenants[i].floor == 0) {
     772:	2d e1       	ldi	r18, 0x1D	; 29
     774:	28 9f       	mul	r18, r24
     776:	f0 01       	movw	r30, r0
     778:	29 9f       	mul	r18, r25
     77a:	f0 0d       	add	r31, r0
     77c:	11 24       	eor	r1, r1
     77e:	e1 55       	subi	r30, 0x51	; 81
     780:	fb 4f       	sbci	r31, 0xFB	; 251
     782:	25 89       	ldd	r18, Z+21	; 0x15
     784:	21 11       	cpse	r18, r1
     786:	0b c0       	rjmp	.+22     	; 0x79e <set_base_rent+0x56>
            tenants[i].rent = rent;
     788:	2d e1       	ldi	r18, 0x1D	; 29
     78a:	28 9f       	mul	r18, r24
     78c:	f0 01       	movw	r30, r0
     78e:	29 9f       	mul	r18, r25
     790:	f0 0d       	add	r31, r0
     792:	11 24       	eor	r1, r1
     794:	e1 55       	subi	r30, 0x51	; 81
     796:	fb 4f       	sbci	r31, 0xFB	; 251
     798:	17 8b       	std	Z+23, r17	; 0x17
     79a:	06 8b       	std	Z+22, r16	; 0x16
     79c:	34 c0       	rjmp	.+104    	; 0x806 <set_base_rent+0xbe>
        } else if (tenants[i].floor == 1) {
     79e:	21 30       	cpi	r18, 0x01	; 1
     7a0:	a1 f4       	brne	.+40     	; 0x7ca <set_base_rent+0x82>
            tenants[i].rent = rent * 3 / 4;
     7a2:	98 01       	movw	r18, r16
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	20 0f       	add	r18, r16
     7aa:	31 1f       	adc	r19, r17
     7ac:	36 95       	lsr	r19
     7ae:	27 95       	ror	r18
     7b0:	36 95       	lsr	r19
     7b2:	27 95       	ror	r18
     7b4:	4d e1       	ldi	r20, 0x1D	; 29
     7b6:	48 9f       	mul	r20, r24
     7b8:	f0 01       	movw	r30, r0
     7ba:	49 9f       	mul	r20, r25
     7bc:	f0 0d       	add	r31, r0
     7be:	11 24       	eor	r1, r1
     7c0:	e1 55       	subi	r30, 0x51	; 81
     7c2:	fb 4f       	sbci	r31, 0xFB	; 251
     7c4:	37 8b       	std	Z+23, r19	; 0x17
     7c6:	26 8b       	std	Z+22, r18	; 0x16
     7c8:	1e c0       	rjmp	.+60     	; 0x806 <set_base_rent+0xbe>
        } else if (tenants[i].floor == 2) {
     7ca:	22 30       	cpi	r18, 0x02	; 2
     7cc:	e1 f4       	brne	.+56     	; 0x806 <set_base_rent+0xbe>
            tenants[i].rent = rent * 3 / 4 * 3 / 4;
     7ce:	98 01       	movw	r18, r16
     7d0:	22 0f       	add	r18, r18
     7d2:	33 1f       	adc	r19, r19
     7d4:	20 0f       	add	r18, r16
     7d6:	31 1f       	adc	r19, r17
     7d8:	36 95       	lsr	r19
     7da:	27 95       	ror	r18
     7dc:	36 95       	lsr	r19
     7de:	27 95       	ror	r18
     7e0:	a9 01       	movw	r20, r18
     7e2:	44 0f       	add	r20, r20
     7e4:	55 1f       	adc	r21, r21
     7e6:	24 0f       	add	r18, r20
     7e8:	35 1f       	adc	r19, r21
     7ea:	36 95       	lsr	r19
     7ec:	27 95       	ror	r18
     7ee:	36 95       	lsr	r19
     7f0:	27 95       	ror	r18
     7f2:	4d e1       	ldi	r20, 0x1D	; 29
     7f4:	48 9f       	mul	r20, r24
     7f6:	f0 01       	movw	r30, r0
     7f8:	49 9f       	mul	r20, r25
     7fa:	f0 0d       	add	r31, r0
     7fc:	11 24       	eor	r1, r1
     7fe:	e1 55       	subi	r30, 0x51	; 81
     800:	fb 4f       	sbci	r31, 0xFB	; 251
     802:	37 8b       	std	Z+23, r19	; 0x17
     804:	26 8b       	std	Z+22, r18	; 0x16
void set_base_rent(uint16_t rent) {
    mall_config.base_rent = rent;
    save_mall_config();
    
    // Update rent for all tenants
    for (int i = 0; i < tenant_count; i++) {
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <tenant_count>
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	82 17       	cp	r24, r18
     810:	93 07       	cpc	r25, r19
     812:	0c f4       	brge	.+2      	; 0x816 <set_base_rent+0xce>
            tenants[i].rent = rent * 3 / 4;
        } else if (tenants[i].floor == 2) {
            tenants[i].rent = rent * 3 / 4 * 3 / 4;
        }
    }
    save_tenants();
     814:	ae cf       	rjmp	.-164    	; 0x772 <set_base_rent+0x2a>
     816:	92 d1       	rcall	.+804    	; 0xb3c <save_tenants>
    
    char response[50];
    sprintf(response, "Base rent set to %d\n", rent);
     818:	1f 93       	push	r17
     81a:	0f 93       	push	r16
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	8e 01       	movw	r16, r28
     826:	0f 5f       	subi	r16, 0xFF	; 255
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	1f 93       	push	r17
     82c:	0f 93       	push	r16
    uart_print(response);
     82e:	47 d4       	rcall	.+2190   	; 0x10be <sprintf>
     830:	c8 01       	movw	r24, r16
     832:	8a d3       	rcall	.+1812   	; 0xf48 <uart_print>
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	e2 96       	adiw	r28, 0x32	; 50
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <toggle_escalator>:

void toggle_escalator(uint8_t floor, uint8_t state) {
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	e2 97       	sbiw	r28, 0x32	; 50
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	18 2f       	mov	r17, r24
     870:	06 2f       	mov	r16, r22
    if (floor < NUM_FLOORS) {
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	18 f5       	brcc	.+70     	; 0x8bc <toggle_escalator+0x66>
        mall_config.escalator_state[floor] = state;
     876:	e8 2f       	mov	r30, r24
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	ed 50       	subi	r30, 0x0D	; 13
     87c:	f9 4f       	sbci	r31, 0xF9	; 249
     87e:	62 83       	std	Z+2, r22	; 0x02
        save_mall_config();
     880:	30 df       	rcall	.-416    	; 0x6e2 <save_mall_config>
        
        char response[50];
        sprintf(response, "Escalator on floor %d set to %s\n", floor, state ? "ON" : "OFF");
     882:	00 23       	and	r16, r16
     884:	19 f0       	breq	.+6      	; 0x88c <toggle_escalator+0x36>
     886:	85 eb       	ldi	r24, 0xB5	; 181
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	02 c0       	rjmp	.+4      	; 0x890 <toggle_escalator+0x3a>
     88c:	88 eb       	ldi	r24, 0xB8	; 184
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	1f 92       	push	r1
     896:	1f 93       	push	r17
     898:	8c eb       	ldi	r24, 0xBC	; 188
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	8e 01       	movw	r16, r28
     8a2:	0f 5f       	subi	r16, 0xFF	; 255
     8a4:	1f 4f       	sbci	r17, 0xFF	; 255
     8a6:	1f 93       	push	r17
     8a8:	0f 93       	push	r16
     8aa:	09 d4       	rcall	.+2066   	; 0x10be <sprintf>
        uart_print(response);
     8ac:	c8 01       	movw	r24, r16
     8ae:	4c d3       	rcall	.+1688   	; 0xf48 <uart_print>
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <toggle_escalator+0x6c>
    } else {
        uart_print("Error: Invalid floor number\n");
     8bc:	8d ed       	ldi	r24, 0xDD	; 221
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	43 d3       	rcall	.+1670   	; 0xf48 <uart_print>
     8c2:	e2 96       	adiw	r28, 0x32	; 50
    }
}
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	08 95       	ret

000008d8 <disable_tenant_account>:
     8d8:	0f 93       	push	r16

void disable_tenant_account(uint8_t tenant_id) {
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	e2 97       	sbiw	r28, 0x32	; 50
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	18 2f       	mov	r17, r24
    for (int i = 0; i < tenant_count; i++) {
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	2c c0       	rjmp	.+88     	; 0x950 <disable_tenant_account+0x78>
        if (tenants[i].id == tenant_id) {
     8f8:	8d e1       	ldi	r24, 0x1D	; 29
     8fa:	82 9f       	mul	r24, r18
     8fc:	f0 01       	movw	r30, r0
     8fe:	83 9f       	mul	r24, r19
     900:	f0 0d       	add	r31, r0
     902:	11 24       	eor	r1, r1
     904:	e1 55       	subi	r30, 0x51	; 81
     906:	fb 4f       	sbci	r31, 0xFB	; 251
     908:	80 81       	ld	r24, Z
     90a:	81 13       	cpse	r24, r17
     90c:	1f c0       	rjmp	.+62     	; 0x94c <disable_tenant_account+0x74>
            tenants[i].rent_paid = 0;  // Reset rent paid to effectively disable the account
     90e:	8d e1       	ldi	r24, 0x1D	; 29
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	83 9f       	mul	r24, r19
     916:	f0 0d       	add	r31, r0
     918:	11 24       	eor	r1, r1
     91a:	e1 55       	subi	r30, 0x51	; 81
     91c:	fb 4f       	sbci	r31, 0xFB	; 251
     91e:	14 8e       	std	Z+28, r1	; 0x1c
            save_tenants();
     920:	0d d1       	rcall	.+538    	; 0xb3c <save_tenants>
            
            char response[50];
            sprintf(response, "Tenant account %d disabled\n", tenant_id);
     922:	1f 92       	push	r1
     924:	1f 93       	push	r17
     926:	8a ef       	ldi	r24, 0xFA	; 250
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	8e 01       	movw	r16, r28
     930:	0f 5f       	subi	r16, 0xFF	; 255
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	1f 93       	push	r17
     936:	0f 93       	push	r16
     938:	c2 d3       	rcall	.+1924   	; 0x10be <sprintf>
            uart_print(response);
     93a:	c8 01       	movw	r24, r16
     93c:	05 d3       	rcall	.+1546   	; 0xf48 <uart_print>
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0b c0       	rjmp	.+22     	; 0x962 <disable_tenant_account+0x8a>
     94c:	2f 5f       	subi	r18, 0xFF	; 255
        uart_print("Error: Invalid floor number\n");
    }
}

void disable_tenant_account(uint8_t tenant_id) {
    for (int i = 0; i < tenant_count; i++) {
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <tenant_count>
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 17       	cp	r18, r24
     958:	39 07       	cpc	r19, r25
     95a:	74 f2       	brlt	.-100    	; 0x8f8 <disable_tenant_account+0x20>
            sprintf(response, "Tenant account %d disabled\n", tenant_id);
            uart_print(response);
            return;
        }
    }
    uart_print("Error: Tenant not found\n");
     95c:	86 e1       	ldi	r24, 0x16	; 22
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	f3 d2       	rcall	.+1510   	; 0xf48 <uart_print>
     962:	e2 96       	adiw	r28, 0x32	; 50
}
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <process_management_command>:
     978:	0f 93       	push	r16
void save_mall_config(void) {
    // Save mall configuration to EEPROM
    eeprom_write_block((const void*)&mall_config, (void*)0, sizeof(MallConfig));
}

void process_management_command(char* command) {
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	00 d0       	rcall	.+0      	; 0x982 <process_management_command+0xa>
     982:	1f 92       	push	r1
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	8c 01       	movw	r16, r24
    if (strncmp(command, "rent ", 5) == 0) {
     98a:	45 e0       	ldi	r20, 0x05	; 5
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	6f e2       	ldi	r22, 0x2F	; 47
     990:	73 e0       	ldi	r23, 0x03	; 3
     992:	78 d3       	rcall	.+1776   	; 0x1084 <strncmp>
     994:	89 2b       	or	r24, r25
     996:	b9 f4       	brne	.+46     	; 0x9c6 <process_management_command+0x4e>
        uint16_t new_rent;
        sscanf(command + 5, "%hu", &new_rent);
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	9f 93       	push	r25
     99e:	8f 93       	push	r24
     9a0:	8b ea       	ldi	r24, 0xAB	; 171
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	9f 93       	push	r25
     9a6:	8f 93       	push	r24
     9a8:	0b 5f       	subi	r16, 0xFB	; 251
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	1f 93       	push	r17
     9ae:	0f 93       	push	r16
     9b0:	b4 d3       	rcall	.+1896   	; 0x111a <sscanf>
        set_base_rent(new_rent);
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	c8 de       	rcall	.-624    	; 0x748 <set_base_rent>
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	42 c0       	rjmp	.+132    	; 0xa4a <process_management_command+0xd2>
    } else if (strncmp(command, "escalator ", 10) == 0) {
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	65 e3       	ldi	r22, 0x35	; 53
     9cc:	73 e0       	ldi	r23, 0x03	; 3
     9ce:	c8 01       	movw	r24, r16
     9d0:	59 d3       	rcall	.+1714   	; 0x1084 <strncmp>
     9d2:	89 2b       	or	r24, r25
     9d4:	c9 f4       	brne	.+50     	; 0xa08 <process_management_command+0x90>
        uint8_t floor, state;
        sscanf(command + 10, "%hhu %hhu", &floor, &state);
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	02 96       	adiw	r24, 0x02	; 2
     9e0:	9f 93       	push	r25
     9e2:	8f 93       	push	r24
     9e4:	80 e4       	ldi	r24, 0x40	; 64
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	06 5f       	subi	r16, 0xF6	; 246
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
     9f0:	1f 93       	push	r17
     9f2:	0f 93       	push	r16
        toggle_escalator(floor, state);
     9f4:	92 d3       	rcall	.+1828   	; 0x111a <sscanf>
     9f6:	69 81       	ldd	r22, Y+1	; 0x01
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	2d df       	rcall	.-422    	; 0x856 <toggle_escalator>
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
    } else if (strncmp(command, "disable ", 8) == 0) {
     a06:	21 c0       	rjmp	.+66     	; 0xa4a <process_management_command+0xd2>
     a08:	48 e0       	ldi	r20, 0x08	; 8
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	6a e4       	ldi	r22, 0x4A	; 74
     a0e:	73 e0       	ldi	r23, 0x03	; 3
     a10:	c8 01       	movw	r24, r16
     a12:	38 d3       	rcall	.+1648   	; 0x1084 <strncmp>
     a14:	89 2b       	or	r24, r25
     a16:	b1 f4       	brne	.+44     	; 0xa44 <process_management_command+0xcc>
        uint8_t tenant_id;
        sscanf(command + 8, "%hhu", &tenant_id);
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	8f e2       	ldi	r24, 0x2F	; 47
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	08 5f       	subi	r16, 0xF8	; 248
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
     a2c:	1f 93       	push	r17
     a2e:	0f 93       	push	r16
        disable_tenant_account(tenant_id);
     a30:	74 d3       	rcall	.+1768   	; 0x111a <sscanf>
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	51 df       	rcall	.-350    	; 0x8d8 <disable_tenant_account>
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
    } else {
        uart_print("Unknown management command\n");
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <process_management_command+0xd2>
     a44:	83 e5       	ldi	r24, 0x53	; 83
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	7f d2       	rcall	.+1278   	; 0xf48 <uart_print>
    }
}
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <update_total_earnings>:
        }
    }
    uart_print("Error: Tenant not found\n");
}

void update_total_earnings(uint16_t amount) {
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	e2 97       	sbiw	r28, 0x32	; 50
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
    total_earnings += amount;
     a72:	40 91 64 04 	lds	r20, 0x0464	; 0x800464 <total_earnings>
     a76:	50 91 65 04 	lds	r21, 0x0465	; 0x800465 <total_earnings+0x1>
     a7a:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <total_earnings+0x2>
     a7e:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <total_earnings+0x3>
     a82:	48 0f       	add	r20, r24
     a84:	59 1f       	adc	r21, r25
     a86:	61 1d       	adc	r22, r1
     a88:	71 1d       	adc	r23, r1
     a8a:	40 93 64 04 	sts	0x0464, r20	; 0x800464 <total_earnings>
     a8e:	50 93 65 04 	sts	0x0465, r21	; 0x800465 <total_earnings+0x1>
     a92:	60 93 66 04 	sts	0x0466, r22	; 0x800466 <total_earnings+0x2>
     a96:	70 93 67 04 	sts	0x0467, r23	; 0x800467 <total_earnings+0x3>
    
    // Save total earnings in EEPROM
    eeprom_write_block((const void*)&total_earnings, (void*)EEPROM_TOTAL_EARNINGS_ADDR, sizeof(total_earnings));
     a9a:	44 e0       	ldi	r20, 0x04	; 4
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	65 e0       	ldi	r22, 0x05	; 5
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	84 e6       	ldi	r24, 0x64	; 100
     aa4:	94 e0       	ldi	r25, 0x04	; 4
     aa6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <eeprom_write_block>
    
    // Optionally, print the total earnings if needed
    char response[50];
    sprintf(response, "Total earnings updated: $%lu\n", total_earnings);
     aaa:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <total_earnings+0x3>
     aae:	8f 93       	push	r24
     ab0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <total_earnings+0x2>
     ab4:	8f 93       	push	r24
     ab6:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <total_earnings+0x1>
     aba:	8f 93       	push	r24
     abc:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <total_earnings>
     ac0:	8f 93       	push	r24
     ac2:	8f e6       	ldi	r24, 0x6F	; 111
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	8e 01       	movw	r16, r28
     acc:	0f 5f       	subi	r16, 0xFF	; 255
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	1f 93       	push	r17
     ad2:	0f 93       	push	r16
     ad4:	f4 d2       	rcall	.+1512   	; 0x10be <sprintf>
    uart_print(response);
     ad6:	c8 01       	movw	r24, r16
     ad8:	37 d2       	rcall	.+1134   	; 0xf48 <uart_print>
}
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	e2 96       	adiw	r28, 0x32	; 50
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <init_tenant_system>:
#define EEPROM_TENANT_COUNT_ADDR 0
#define EEPROM_TENANTS_ADDR (EEPROM_TENANT_COUNT_ADDR + sizeof(uint8_t))

void init_tenant_system(void) {
	// Load tenant count from EEPROM
	eeprom_read_block((void*)&tenant_count, (const void*)EEPROM_TENANT_COUNT_ADDR, sizeof(uint8_t));
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	88 e6       	ldi	r24, 0x68	; 104
     b04:	94 e0       	ldi	r25, 0x04	; 4
     b06:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <eeprom_read_block>
	
	// Load tenants from EEPROM
	if (tenant_count > 0 && tenant_count <= MAX_TENANTS) {
     b0a:	40 91 68 04 	lds	r20, 0x0468	; 0x800468 <tenant_count>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	84 0f       	add	r24, r20
     b12:	84 31       	cpi	r24, 0x14	; 20
     b14:	58 f4       	brcc	.+22     	; 0xb2c <init_tenant_system+0x32>
		eeprom_read_block((void*)tenants, (const void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
     b16:	8d e1       	ldi	r24, 0x1D	; 29
     b18:	48 9f       	mul	r20, r24
     b1a:	a0 01       	movw	r20, r0
     b1c:	11 24       	eor	r1, r1
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	8f ea       	ldi	r24, 0xAF	; 175
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <eeprom_read_block>
     b2a:	08 95       	ret
		} else {
		// Initialize tenant count if EEPROM is empty or invalid
		tenant_count = 0;
     b2c:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <tenant_count>
		eeprom_write_byte((uint8_t*)EEPROM_TENANT_COUNT_ADDR, tenant_count);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <eeprom_write_byte>
     b3a:	08 95       	ret

00000b3c <save_tenants>:
	}
}

void save_tenants(void) {
	// Save tenant count to EEPROM
	eeprom_write_byte((uint8_t*)EEPROM_TENANT_COUNT_ADDR, tenant_count);
     b3c:	60 91 68 04 	lds	r22, 0x0468	; 0x800468 <tenant_count>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <eeprom_write_byte>
	
	// Save tenants to EEPROM
	eeprom_write_block((const void*)tenants, (void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
     b48:	40 91 68 04 	lds	r20, 0x0468	; 0x800468 <tenant_count>
     b4c:	8d e1       	ldi	r24, 0x1D	; 29
     b4e:	48 9f       	mul	r20, r24
     b50:	a0 01       	movw	r20, r0
     b52:	11 24       	eor	r1, r1
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	8f ea       	ldi	r24, 0xAF	; 175
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <eeprom_write_block>
     b60:	08 95       	ret

00000b62 <add_tenant>:
		} else {
		uart_print("Unknown tenant command\n");
	}
}

void add_tenant(char* name, uint8_t floor) {
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	cf 54       	subi	r28, 0x4F	; 79
     b70:	d1 09       	sbc	r29, r1
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	9c 01       	movw	r18, r24
     b7e:	16 2f       	mov	r17, r22
	if (tenant_count < MAX_TENANTS) {
     b80:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <tenant_count>
     b84:	94 31       	cpi	r25, 0x14	; 20
     b86:	08 f0       	brcs	.+2      	; 0xb8a <add_tenant+0x28>
     b88:	52 c0       	rjmp	.+164    	; 0xc2e <add_tenant+0xcc>
		Tenant new_tenant;
		new_tenant.id = tenant_count + 1;
     b8a:	9f 5f       	subi	r25, 0xFF	; 255
     b8c:	9b ab       	std	Y+51, r25	; 0x33
		strncpy(new_tenant.name, name, 19);
     b8e:	43 e1       	ldi	r20, 0x13	; 19
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	b9 01       	movw	r22, r18
     b94:	ce 01       	movw	r24, r28
     b96:	c4 96       	adiw	r24, 0x34	; 52
     b98:	83 d2       	rcall	.+1286   	; 0x10a0 <strncpy>
		new_tenant.name[19] = '\0';
     b9a:	28 96       	adiw	r28, 0x08	; 8
     b9c:	1f ae       	std	Y+63, r1	; 0x3f
     b9e:	28 97       	sbiw	r28, 0x08	; 8
		new_tenant.floor = floor;
     ba0:	29 96       	adiw	r28, 0x09	; 9
     ba2:	1f af       	std	Y+63, r17	; 0x3f
     ba4:	29 97       	sbiw	r28, 0x09	; 9
		new_tenant.rent = 0;  // Set initial rent
     ba6:	2b 96       	adiw	r28, 0x0b	; 11
     ba8:	1f ae       	std	Y+63, r1	; 0x3f
     baa:	1e ae       	std	Y+62, r1	; 0x3e
     bac:	2b 97       	sbiw	r28, 0x0b	; 11
		new_tenant.rent_paid = 0;
     bae:	60 96       	adiw	r28, 0x10	; 16
     bb0:	1f ae       	std	Y+63, r1	; 0x3f
     bb2:	60 97       	sbiw	r28, 0x10	; 16
		
		// Generate washroom code
		for (int i = 0; i < 4; i++) {
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	10 e0       	ldi	r17, 0x00	; 0
			new_tenant.washroom_code[i] = rand() % 10;
     bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <add_tenant+0x72>
     bba:	40 d2       	rcall	.+1152   	; 0x103c <rand>
     bbc:	6a e0       	ldi	r22, 0x0A	; 10
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	cf d1       	rcall	.+926    	; 0xf60 <__divmodhi4>
     bc2:	eb e4       	ldi	r30, 0x4B	; 75
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	ec 0f       	add	r30, r28
     bc8:	fd 1f       	adc	r31, r29
     bca:	e0 0f       	add	r30, r16
     bcc:	f1 1f       	adc	r31, r17
     bce:	80 83       	st	Z, r24
		new_tenant.floor = floor;
		new_tenant.rent = 0;  // Set initial rent
		new_tenant.rent_paid = 0;
		
		// Generate washroom code
		for (int i = 0; i < 4; i++) {
     bd0:	0f 5f       	subi	r16, 0xFF	; 255
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	04 30       	cpi	r16, 0x04	; 4
     bd6:	11 05       	cpc	r17, r1
     bd8:	84 f3       	brlt	.-32     	; 0xbba <add_tenant+0x58>
			new_tenant.washroom_code[i] = rand() % 10;
		}
		
		tenants[tenant_count++] = new_tenant;
     bda:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <tenant_count>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8a 0f       	add	r24, r26
     be2:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <tenant_count>
     be6:	8d e1       	ldi	r24, 0x1D	; 29
     be8:	a8 9f       	mul	r26, r24
     bea:	d0 01       	movw	r26, r0
     bec:	11 24       	eor	r1, r1
     bee:	a1 55       	subi	r26, 0x51	; 81
     bf0:	bb 4f       	sbci	r27, 0xFB	; 251
     bf2:	8d e1       	ldi	r24, 0x1D	; 29
     bf4:	fe 01       	movw	r30, r28
     bf6:	f3 96       	adiw	r30, 0x33	; 51
     bf8:	01 90       	ld	r0, Z+
     bfa:	0d 92       	st	X+, r0
     bfc:	8a 95       	dec	r24
		save_tenants();
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <add_tenant+0x96>
     c00:	9d df       	rcall	.-198    	; 0xb3c <save_tenants>
		
		char response[50];
		sprintf(response, "Tenant added. ID: %d\n", new_tenant.id);
     c02:	8b a9       	ldd	r24, Y+51	; 0x33
     c04:	1f 92       	push	r1
     c06:	8f 93       	push	r24
     c08:	8d e8       	ldi	r24, 0x8D	; 141
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	8e 01       	movw	r16, r28
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	1f 93       	push	r17
     c18:	0f 93       	push	r16
		uart_print(response);
     c1a:	51 d2       	rcall	.+1186   	; 0x10be <sprintf>
     c1c:	c8 01       	movw	r24, r16
     c1e:	94 d1       	rcall	.+808    	; 0xf48 <uart_print>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
		} else {
		uart_print("Error: Maximum number of tenants reached\n");
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <add_tenant+0xd2>
     c2e:	83 ea       	ldi	r24, 0xA3	; 163
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	8a d1       	rcall	.+788    	; 0xf48 <uart_print>
	}
}
     c34:	c1 5b       	subi	r28, 0xB1	; 177
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <remove_tenant>:

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	32 c0       	rjmp	.+100    	; 0xcb6 <remove_tenant+0x6a>
		if (tenants[i].id == id) {
     c52:	9d e1       	ldi	r25, 0x1D	; 29
     c54:	92 9f       	mul	r25, r18
     c56:	f0 01       	movw	r30, r0
     c58:	93 9f       	mul	r25, r19
     c5a:	f0 0d       	add	r31, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	e1 55       	subi	r30, 0x51	; 81
     c60:	fb 4f       	sbci	r31, 0xFB	; 251
     c62:	90 81       	ld	r25, Z
     c64:	98 13       	cpse	r25, r24
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <remove_tenant+0x66>
     c68:	17 c0       	rjmp	.+46     	; 0xc98 <remove_tenant+0x4c>
			for (int j = i; j < tenant_count - 1; j++) {
				tenants[j] = tenants[j+1];
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	6d e1       	ldi	r22, 0x1D	; 29
     c70:	62 9f       	mul	r22, r18
     c72:	d0 01       	movw	r26, r0
     c74:	63 9f       	mul	r22, r19
     c76:	b0 0d       	add	r27, r0
     c78:	11 24       	eor	r1, r1
     c7a:	a1 55       	subi	r26, 0x51	; 81
     c7c:	bb 4f       	sbci	r27, 0xFB	; 251
     c7e:	68 9f       	mul	r22, r24
     c80:	f0 01       	movw	r30, r0
     c82:	69 9f       	mul	r22, r25
     c84:	f0 0d       	add	r31, r0
     c86:	11 24       	eor	r1, r1
     c88:	e1 55       	subi	r30, 0x51	; 81
     c8a:	fb 4f       	sbci	r31, 0xFB	; 251
     c8c:	2d e1       	ldi	r18, 0x1D	; 29
     c8e:	01 90       	ld	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	2a 95       	dec	r18
     c94:	e1 f7       	brne	.-8      	; 0xc8e <remove_tenant+0x42>
}

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
		if (tenants[i].id == id) {
			for (int j = i; j < tenant_count - 1; j++) {
     c96:	9c 01       	movw	r18, r24
     c98:	ca 01       	movw	r24, r20
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	24 f3       	brlt	.-56     	; 0xc6a <remove_tenant+0x1e>
				tenants[j] = tenants[j+1];
			}
			tenant_count--;
     ca2:	71 50       	subi	r23, 0x01	; 1
     ca4:	70 93 68 04 	sts	0x0468, r23	; 0x800468 <tenant_count>
			save_tenants();
     ca8:	49 df       	rcall	.-366    	; 0xb3c <save_tenants>
			uart_print("Tenant removed\n");
     caa:	8d ec       	ldi	r24, 0xCD	; 205
     cac:	93 e0       	ldi	r25, 0x03	; 3
     cae:	4c c1       	rjmp	.+664    	; 0xf48 <uart_print>
			return;
     cb0:	08 95       	ret
		uart_print("Error: Maximum number of tenants reached\n");
	}
}

void remove_tenant(uint8_t id) {
	for (int i = 0; i < tenant_count; i++) {
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <tenant_count>
     cba:	47 2f       	mov	r20, r23
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	24 17       	cp	r18, r20
     cc0:	35 07       	cpc	r19, r21
     cc2:	3c f2       	brlt	.-114    	; 0xc52 <remove_tenant+0x6>
			save_tenants();
			uart_print("Tenant removed\n");
			return;
		}
	}
	uart_print("Error: Tenant not found\n");
     cc4:	86 e1       	ldi	r24, 0x16	; 22
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	3f c1       	rjmp	.+638    	; 0xf48 <uart_print>
     cca:	08 95       	ret

00000ccc <pay_rent>:
}

void pay_rent(uint8_t id, uint16_t amount) {
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	e2 97       	sbiw	r28, 0x32	; 50
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	f6 2e       	mov	r15, r22
     cea:	e7 2e       	mov	r14, r23
	for (int i = 0; i < tenant_count; i++) {
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	2c c0       	rjmp	.+88     	; 0xd4a <pay_rent+0x7e>
		if (tenants[i].id == id) {
     cf2:	9d e1       	ldi	r25, 0x1D	; 29
     cf4:	94 9f       	mul	r25, r20
     cf6:	f0 01       	movw	r30, r0
     cf8:	95 9f       	mul	r25, r21
     cfa:	f0 0d       	add	r31, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	e1 55       	subi	r30, 0x51	; 81
     d00:	fb 4f       	sbci	r31, 0xFB	; 251
     d02:	90 81       	ld	r25, Z
     d04:	98 13       	cpse	r25, r24
     d06:	1f c0       	rjmp	.+62     	; 0xd46 <pay_rent+0x7a>
			tenants[i].rent_paid += amount;
     d08:	8f 01       	movw	r16, r30
     d0a:	84 8d       	ldd	r24, Z+28	; 0x1c
     d0c:	8f 0d       	add	r24, r15
     d0e:	84 8f       	std	Z+28, r24	; 0x1c
			save_tenants();
     d10:	15 df       	rcall	.-470    	; 0xb3c <save_tenants>
			
			// Update total earnings
			update_total_earnings(amount);
     d12:	8f 2d       	mov	r24, r15
     d14:	9e 2d       	mov	r25, r14
     d16:	a1 de       	rcall	.-702    	; 0xa5a <update_total_earnings>
			
			char response[50];
			sprintf(response, "Rent paid. New balance: $%d\n", tenants[i].rent_paid);
     d18:	f8 01       	movw	r30, r16
     d1a:	84 8d       	ldd	r24, Z+28	; 0x1c
     d1c:	1f 92       	push	r1
     d1e:	8f 93       	push	r24
     d20:	8d ed       	ldi	r24, 0xDD	; 221
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	8e 01       	movw	r16, r28
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	1f 93       	push	r17
     d30:	0f 93       	push	r16
			uart_print(response);
     d32:	c5 d1       	rcall	.+906    	; 0x10be <sprintf>
     d34:	c8 01       	movw	r24, r16
     d36:	08 d1       	rcall	.+528    	; 0xf48 <uart_print>
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0b c0       	rjmp	.+22     	; 0xd5c <pay_rent+0x90>
	}
	uart_print("Error: Tenant not found\n");
}

void pay_rent(uint8_t id, uint16_t amount) {
	for (int i = 0; i < tenant_count; i++) {
     d46:	4f 5f       	subi	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <tenant_count>
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	42 17       	cp	r20, r18
     d52:	53 07       	cpc	r21, r19
			sprintf(response, "Rent paid. New balance: $%d\n", tenants[i].rent_paid);
			uart_print(response);
			return;
		}
	}
	uart_print("Error: Tenant not found\n");
     d54:	74 f2       	brlt	.-100    	; 0xcf2 <pay_rent+0x26>
     d56:	86 e1       	ldi	r24, 0x16	; 22
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	f6 d0       	rcall	.+492    	; 0xf48 <uart_print>
}
     d5c:	e2 96       	adiw	r28, 0x32	; 50
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <list_tenants>:

void list_tenants(void) {
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	c4 56       	subi	r28, 0x64	; 100
     d88:	d1 09       	sbc	r29, r1
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < tenant_count; i++) {
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	29 c0       	rjmp	.+82     	; 0xdec <list_tenants+0x76>
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
     d9a:	2d e1       	ldi	r18, 0x1D	; 29
     d9c:	20 9f       	mul	r18, r16
     d9e:	c0 01       	movw	r24, r0
     da0:	21 9f       	mul	r18, r17
     da2:	90 0d       	add	r25, r0
     da4:	11 24       	eor	r1, r1
     da6:	fc 01       	movw	r30, r24
     da8:	e1 55       	subi	r30, 0x51	; 81
     daa:	fb 4f       	sbci	r31, 0xFB	; 251
     dac:	44 8d       	ldd	r20, Z+28	; 0x1c
     dae:	35 89       	ldd	r19, Z+21	; 0x15
     db0:	80 55       	subi	r24, 0x50	; 80
     db2:	9b 4f       	sbci	r25, 0xFB	; 251
     db4:	20 81       	ld	r18, Z
}

void list_tenants(void) {
	for (int i = 0; i < tenant_count; i++) {
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
     db6:	1f 92       	push	r1
     db8:	4f 93       	push	r20
     dba:	1f 92       	push	r1
     dbc:	3f 93       	push	r19
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	1f 92       	push	r1
     dc4:	2f 93       	push	r18
     dc6:	8a ef       	ldi	r24, 0xFA	; 250
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	7c 01       	movw	r14, r24
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	72 d1       	rcall	.+740    	; 0x10be <sprintf>
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
		uart_print(tenant_info);
     dda:	c7 01       	movw	r24, r14
     ddc:	b5 d0       	rcall	.+362    	; 0xf48 <uart_print>
	}
	uart_print("Error: Tenant not found\n");
}

void list_tenants(void) {
	for (int i = 0; i < tenant_count; i++) {
     dde:	0f 5f       	subi	r16, 0xFF	; 255
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <tenant_count>
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	08 17       	cp	r16, r24
     df4:	19 07       	cpc	r17, r25
     df6:	8c f2       	brlt	.-94     	; 0xd9a <list_tenants+0x24>
		char tenant_info[100];
		sprintf(tenant_info, "ID: %d, Name: %s, Floor: %d, Rent Paid: $%d\n",
		tenants[i].id, tenants[i].name, tenants[i].floor, tenants[i].rent_paid);
		uart_print(tenant_info);
	}
     df8:	cc 59       	subi	r28, 0x9C	; 156
     dfa:	df 4f       	sbci	r29, 0xFF	; 255
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <process_tenant_command>:
	
	// Save tenants to EEPROM
	eeprom_write_block((const void*)tenants, (void*)EEPROM_TENANTS_ADDR, sizeof(Tenant) * tenant_count);
}

void process_tenant_command(char* command) {
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	65 97       	sbiw	r28, 0x15	; 21
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	8c 01       	movw	r16, r24
	char response[100];
	if (strncmp(command, "add ", 4) == 0) {
     e32:	44 e0       	ldi	r20, 0x04	; 4
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	67 e2       	ldi	r22, 0x27	; 39
     e38:	74 e0       	ldi	r23, 0x04	; 4
     e3a:	24 d1       	rcall	.+584    	; 0x1084 <strncmp>
     e3c:	89 2b       	or	r24, r25
     e3e:	d1 f4       	brne	.+52     	; 0xe74 <process_tenant_command+0x60>
		char name[20];
		uint8_t floor;
		sscanf(command + 4, "%s %hhu", name, &floor);
     e40:	ce 01       	movw	r24, r28
     e42:	45 96       	adiw	r24, 0x15	; 21
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	44 97       	sbiw	r24, 0x14	; 20
     e4a:	7c 01       	movw	r14, r24
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	8c e2       	ldi	r24, 0x2C	; 44
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	0c 5f       	subi	r16, 0xFC	; 252
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	1f 93       	push	r17
     e5e:	0f 93       	push	r16
     e60:	5c d1       	rcall	.+696    	; 0x111a <sscanf>
		add_tenant(name, floor);
     e62:	6d 89       	ldd	r22, Y+21	; 0x15
     e64:	c7 01       	movw	r24, r14
     e66:	7d de       	rcall	.-774    	; 0xb62 <add_tenant>
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	4b c0       	rjmp	.+150    	; 0xf0a <process_tenant_command+0xf6>
		} else if (strncmp(command, "remove ", 7) == 0) {
     e74:	47 e0       	ldi	r20, 0x07	; 7
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	64 e3       	ldi	r22, 0x34	; 52
     e7a:	74 e0       	ldi	r23, 0x04	; 4
     e7c:	c8 01       	movw	r24, r16
     e7e:	02 d1       	rcall	.+516    	; 0x1084 <strncmp>
     e80:	89 2b       	or	r24, r25
     e82:	b1 f4       	brne	.+44     	; 0xeb0 <process_tenant_command+0x9c>
		uint8_t id;
		sscanf(command + 7, "%hhu", &id);
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	8f e2       	ldi	r24, 0x2F	; 47
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	09 5f       	subi	r16, 0xF9	; 249
     e96:	1f 4f       	sbci	r17, 0xFF	; 255
     e98:	1f 93       	push	r17
     e9a:	0f 93       	push	r16
		remove_tenant(id);
     e9c:	3e d1       	rcall	.+636    	; 0x111a <sscanf>
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	d5 de       	rcall	.-598    	; 0xc4c <remove_tenant>
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
		} else if (strncmp(command, "pay ", 4) == 0) {
     eae:	2d c0       	rjmp	.+90     	; 0xf0a <process_tenant_command+0xf6>
     eb0:	44 e0       	ldi	r20, 0x04	; 4
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	6c e3       	ldi	r22, 0x3C	; 60
     eb6:	74 e0       	ldi	r23, 0x04	; 4
     eb8:	c8 01       	movw	r24, r16
     eba:	e4 d0       	rcall	.+456    	; 0x1084 <strncmp>
     ebc:	89 2b       	or	r24, r25
     ebe:	d1 f4       	brne	.+52     	; 0xef4 <process_tenant_command+0xe0>
		uint8_t id;
		uint16_t amount;
		sscanf(command + 4, "%hhu %hu", &id, &amount);
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	44 96       	adiw	r24, 0x14	; 20
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	86 ea       	ldi	r24, 0xA6	; 166
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	0c 5f       	subi	r16, 0xFC	; 252
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
		pay_rent(id, amount);
     ede:	1d d1       	rcall	.+570    	; 0x111a <sscanf>
     ee0:	69 81       	ldd	r22, Y+1	; 0x01
     ee2:	7a 81       	ldd	r23, Y+2	; 0x02
     ee4:	8d 89       	ldd	r24, Y+21	; 0x15
     ee6:	f2 de       	rcall	.-540    	; 0xccc <pay_rent>
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
		} else if (strcmp(command, "list") == 0) {
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <process_tenant_command+0xf6>
     ef4:	61 e4       	ldi	r22, 0x41	; 65
     ef6:	74 e0       	ldi	r23, 0x04	; 4
     ef8:	c8 01       	movw	r24, r16
     efa:	bb d0       	rcall	.+374    	; 0x1072 <strcmp>
		list_tenants();
     efc:	89 2b       	or	r24, r25
     efe:	11 f4       	brne	.+4      	; 0xf04 <process_tenant_command+0xf0>
     f00:	3a df       	rcall	.-396    	; 0xd76 <list_tenants>
		} else {
		uart_print("Unknown tenant command\n");
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <process_tenant_command+0xf6>
     f04:	86 e4       	ldi	r24, 0x46	; 70
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	1f d0       	rcall	.+62     	; 0xf48 <uart_print>
	}
}
     f0a:	65 96       	adiw	r28, 0x15	; 21
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	08 95       	ret

00000f24 <uart_init>:
 */ 
#include "uart.h"

void uart_init(void) {
	// Set baud rate
	UBRR0H = (unsigned char)(MYUBRR>>8);
     f24:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)MYUBRR;
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f2c:	88 e1       	ldi	r24, 0x18	; 24
     f2e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 1stop bit
	UCSR0C = (3<<UCSZ00);
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     f36:	08 95       	ret

00000f38 <uart_transmit>:
}

void uart_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
     f38:	5d 9b       	sbis	0x0b, 5	; 11
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <uart_transmit>
	// Put data into buffer, sends the data
	UDR0 = data;
     f3c:	8c b9       	out	0x0c, r24	; 12
     f3e:	08 95       	ret

00000f40 <uart_receive>:
}

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1<<RXC0)));
     f40:	5f 9b       	sbis	0x0b, 7	; 11
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <uart_receive>
	// Get and return received data from buffer
	return UDR0;
     f44:	8c b1       	in	r24, 0x0c	; 12
}
     f46:	08 95       	ret

00000f48 <uart_print>:

void uart_print(char* str) {
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
	while (*str) {
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <uart_print+0xc>
		uart_transmit(*str);
     f50:	f3 df       	rcall	.-26     	; 0xf38 <uart_transmit>
		str++;
     f52:	21 96       	adiw	r28, 0x01	; 1
	// Get and return received data from buffer
	return UDR0;
}

void uart_print(char* str) {
	while (*str) {
     f54:	88 81       	ld	r24, Y
     f56:	81 11       	cpse	r24, r1
     f58:	fb cf       	rjmp	.-10     	; 0xf50 <uart_print+0x8>
		uart_transmit(*str);
		str++;
	}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <__divmodhi4>:
     f60:	97 fb       	bst	r25, 7
     f62:	07 2e       	mov	r0, r23
     f64:	16 f4       	brtc	.+4      	; 0xf6a <__divmodhi4+0xa>
     f66:	00 94       	com	r0
     f68:	06 d0       	rcall	.+12     	; 0xf76 <__divmodhi4_neg1>
     f6a:	77 fd       	sbrc	r23, 7
     f6c:	08 d0       	rcall	.+16     	; 0xf7e <__divmodhi4_neg2>
     f6e:	0b d0       	rcall	.+22     	; 0xf86 <__udivmodhi4>
     f70:	07 fc       	sbrc	r0, 7
     f72:	05 d0       	rcall	.+10     	; 0xf7e <__divmodhi4_neg2>
     f74:	3e f4       	brtc	.+14     	; 0xf84 <__divmodhi4_exit>

00000f76 <__divmodhi4_neg1>:
     f76:	90 95       	com	r25
     f78:	81 95       	neg	r24
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__divmodhi4_neg2>:
     f7e:	70 95       	com	r23
     f80:	61 95       	neg	r22
     f82:	7f 4f       	sbci	r23, 0xFF	; 255

00000f84 <__divmodhi4_exit>:
     f84:	08 95       	ret

00000f86 <__udivmodhi4>:
     f86:	aa 1b       	sub	r26, r26
     f88:	bb 1b       	sub	r27, r27
     f8a:	51 e1       	ldi	r21, 0x11	; 17
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <__udivmodhi4_ep>

00000f8e <__udivmodhi4_loop>:
     f8e:	aa 1f       	adc	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	a6 17       	cp	r26, r22
     f94:	b7 07       	cpc	r27, r23
     f96:	10 f0       	brcs	.+4      	; 0xf9c <__udivmodhi4_ep>
     f98:	a6 1b       	sub	r26, r22
     f9a:	b7 0b       	sbc	r27, r23

00000f9c <__udivmodhi4_ep>:
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	5a 95       	dec	r21
     fa2:	a9 f7       	brne	.-22     	; 0xf8e <__udivmodhi4_loop>
     fa4:	80 95       	com	r24
     fa6:	90 95       	com	r25
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	08 95       	ret

00000fae <do_rand>:
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
     fc4:	68 81       	ld	r22, Y
     fc6:	79 81       	ldd	r23, Y+1	; 0x01
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	61 15       	cp	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	81 05       	cpc	r24, r1
     fd2:	91 05       	cpc	r25, r1
     fd4:	21 f4       	brne	.+8      	; 0xfde <do_rand+0x30>
     fd6:	64 e2       	ldi	r22, 0x24	; 36
     fd8:	79 ed       	ldi	r23, 0xD9	; 217
     fda:	8b e5       	ldi	r24, 0x5B	; 91
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	2d e1       	ldi	r18, 0x1D	; 29
     fe0:	33 ef       	ldi	r19, 0xF3	; 243
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	c3 d6       	rcall	.+3462   	; 0x1d6e <__divmodsi4>
     fe8:	49 01       	movw	r8, r18
     fea:	5a 01       	movw	r10, r20
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	a7 ea       	ldi	r26, 0xA7	; 167
     ff2:	b1 e4       	ldi	r27, 0x41	; 65
     ff4:	d8 d6       	rcall	.+3504   	; 0x1da6 <__muluhisi3>
     ff6:	6b 01       	movw	r12, r22
     ff8:	7c 01       	movw	r14, r24
     ffa:	ac ee       	ldi	r26, 0xEC	; 236
     ffc:	b4 ef       	ldi	r27, 0xF4	; 244
     ffe:	a5 01       	movw	r20, r10
    1000:	94 01       	movw	r18, r8
    1002:	dd d6       	rcall	.+3514   	; 0x1dbe <__mulohisi3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8c 0d       	add	r24, r12
    100a:	9d 1d       	adc	r25, r13
    100c:	ae 1d       	adc	r26, r14
    100e:	bf 1d       	adc	r27, r15
    1010:	b7 ff       	sbrs	r27, 7
    1012:	03 c0       	rjmp	.+6      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	a1 09       	sbc	r26, r1
    1018:	b0 48       	sbci	r27, 0x80	; 128
    101a:	88 83       	st	Y, r24
    101c:	99 83       	std	Y+1, r25	; 0x01
    101e:	aa 83       	std	Y+2, r26	; 0x02
    1020:	bb 83       	std	Y+3, r27	; 0x03
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	08 95       	ret

0000103a <rand_r>:
    103a:	b9 cf       	rjmp	.-142    	; 0xfae <do_rand>

0000103c <rand>:
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	b6 cf       	rjmp	.-148    	; 0xfae <do_rand>

00001042 <srand>:
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    104a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    104e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1052:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1056:	08 95       	ret

00001058 <memcmp>:
    1058:	fb 01       	movw	r30, r22
    105a:	dc 01       	movw	r26, r24
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <memcmp+0xe>
    105e:	8d 91       	ld	r24, X+
    1060:	01 90       	ld	r0, Z+
    1062:	80 19       	sub	r24, r0
    1064:	21 f4       	brne	.+8      	; 0x106e <memcmp+0x16>
    1066:	41 50       	subi	r20, 0x01	; 1
    1068:	50 40       	sbci	r21, 0x00	; 0
    106a:	c8 f7       	brcc	.-14     	; 0x105e <memcmp+0x6>
    106c:	88 1b       	sub	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	08 95       	ret

00001072 <strcmp>:
    1072:	fb 01       	movw	r30, r22
    1074:	dc 01       	movw	r26, r24
    1076:	8d 91       	ld	r24, X+
    1078:	01 90       	ld	r0, Z+
    107a:	80 19       	sub	r24, r0
    107c:	01 10       	cpse	r0, r1
    107e:	d9 f3       	breq	.-10     	; 0x1076 <strcmp+0x4>
    1080:	99 0b       	sbc	r25, r25
    1082:	08 95       	ret

00001084 <strncmp>:
    1084:	fb 01       	movw	r30, r22
    1086:	dc 01       	movw	r26, r24
    1088:	41 50       	subi	r20, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	30 f0       	brcs	.+12     	; 0x109a <strncmp+0x16>
    108e:	8d 91       	ld	r24, X+
    1090:	01 90       	ld	r0, Z+
    1092:	80 19       	sub	r24, r0
    1094:	19 f4       	brne	.+6      	; 0x109c <strncmp+0x18>
    1096:	00 20       	and	r0, r0
    1098:	b9 f7       	brne	.-18     	; 0x1088 <strncmp+0x4>
    109a:	88 1b       	sub	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	08 95       	ret

000010a0 <strncpy>:
    10a0:	fb 01       	movw	r30, r22
    10a2:	dc 01       	movw	r26, r24
    10a4:	41 50       	subi	r20, 0x01	; 1
    10a6:	50 40       	sbci	r21, 0x00	; 0
    10a8:	48 f0       	brcs	.+18     	; 0x10bc <strncpy+0x1c>
    10aa:	01 90       	ld	r0, Z+
    10ac:	0d 92       	st	X+, r0
    10ae:	00 20       	and	r0, r0
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <strncpy+0x4>
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <strncpy+0x16>
    10b4:	1d 92       	st	X+, r1
    10b6:	41 50       	subi	r20, 0x01	; 1
    10b8:	50 40       	sbci	r21, 0x00	; 0
    10ba:	e0 f7       	brcc	.-8      	; 0x10b4 <strncpy+0x14>
    10bc:	08 95       	ret

000010be <sprintf>:
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	2e 97       	sbiw	r28, 0x0e	; 14
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	0d 89       	ldd	r16, Y+21	; 0x15
    10d8:	1e 89       	ldd	r17, Y+22	; 0x16
    10da:	86 e0       	ldi	r24, 0x06	; 6
    10dc:	8c 83       	std	Y+4, r24	; 0x04
    10de:	1a 83       	std	Y+2, r17	; 0x02
    10e0:	09 83       	std	Y+1, r16	; 0x01
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f e7       	ldi	r25, 0x7F	; 127
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	ae 01       	movw	r20, r28
    10ec:	47 5e       	subi	r20, 0xE7	; 231
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	6f 89       	ldd	r22, Y+23	; 0x17
    10f2:	78 8d       	ldd	r23, Y+24	; 0x18
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	31 d0       	rcall	.+98     	; 0x115c <vfprintf>
    10fa:	ef 81       	ldd	r30, Y+7	; 0x07
    10fc:	f8 85       	ldd	r31, Y+8	; 0x08
    10fe:	e0 0f       	add	r30, r16
    1100:	f1 1f       	adc	r31, r17
    1102:	10 82       	st	Z, r1
    1104:	2e 96       	adiw	r28, 0x0e	; 14
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <sscanf>:
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	2e 97       	sbiw	r28, 0x0e	; 14
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	85 e0       	ldi	r24, 0x05	; 5
    1130:	8c 83       	std	Y+4, r24	; 0x04
    1132:	8b 89       	ldd	r24, Y+19	; 0x13
    1134:	9c 89       	ldd	r25, Y+20	; 0x14
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	ae 01       	movw	r20, r28
    113c:	49 5e       	subi	r20, 0xE9	; 233
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	6d 89       	ldd	r22, Y+21	; 0x15
    1142:	7e 89       	ldd	r23, Y+22	; 0x16
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	b8 d3       	rcall	.+1904   	; 0x18ba <vfscanf>
    114a:	2e 96       	adiw	r28, 0x0e	; 14
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <vfprintf>:
    115c:	2f 92       	push	r2
    115e:	3f 92       	push	r3
    1160:	4f 92       	push	r4
    1162:	5f 92       	push	r5
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	2b 97       	sbiw	r28, 0x0b	; 11
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	6c 01       	movw	r12, r24
    1192:	7b 01       	movw	r14, r22
    1194:	8a 01       	movw	r16, r20
    1196:	fc 01       	movw	r30, r24
    1198:	17 82       	std	Z+7, r1	; 0x07
    119a:	16 82       	std	Z+6, r1	; 0x06
    119c:	83 81       	ldd	r24, Z+3	; 0x03
    119e:	81 ff       	sbrs	r24, 1
    11a0:	bf c1       	rjmp	.+894    	; 0x1520 <vfprintf+0x3c4>
    11a2:	ce 01       	movw	r24, r28
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	3c 01       	movw	r6, r24
    11a8:	f6 01       	movw	r30, r12
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	f7 01       	movw	r30, r14
    11ae:	93 fd       	sbrc	r25, 3
    11b0:	85 91       	lpm	r24, Z+
    11b2:	93 ff       	sbrs	r25, 3
    11b4:	81 91       	ld	r24, Z+
    11b6:	7f 01       	movw	r14, r30
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <vfprintf+0x62>
    11bc:	ad c1       	rjmp	.+858    	; 0x1518 <vfprintf+0x3bc>
    11be:	85 32       	cpi	r24, 0x25	; 37
    11c0:	39 f4       	brne	.+14     	; 0x11d0 <vfprintf+0x74>
    11c2:	93 fd       	sbrc	r25, 3
    11c4:	85 91       	lpm	r24, Z+
    11c6:	93 ff       	sbrs	r25, 3
    11c8:	81 91       	ld	r24, Z+
    11ca:	7f 01       	movw	r14, r30
    11cc:	85 32       	cpi	r24, 0x25	; 37
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <vfprintf+0x7c>
    11d0:	b6 01       	movw	r22, r12
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	f0 d4       	rcall	.+2528   	; 0x1bb6 <fputc>
    11d6:	e8 cf       	rjmp	.-48     	; 0x11a8 <vfprintf+0x4c>
    11d8:	91 2c       	mov	r9, r1
    11da:	21 2c       	mov	r2, r1
    11dc:	31 2c       	mov	r3, r1
    11de:	ff e1       	ldi	r31, 0x1F	; 31
    11e0:	f3 15       	cp	r31, r3
    11e2:	d8 f0       	brcs	.+54     	; 0x121a <vfprintf+0xbe>
    11e4:	8b 32       	cpi	r24, 0x2B	; 43
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0xaa>
    11e8:	38 f4       	brcc	.+14     	; 0x11f8 <vfprintf+0x9c>
    11ea:	80 32       	cpi	r24, 0x20	; 32
    11ec:	79 f0       	breq	.+30     	; 0x120c <vfprintf+0xb0>
    11ee:	83 32       	cpi	r24, 0x23	; 35
    11f0:	a1 f4       	brne	.+40     	; 0x121a <vfprintf+0xbe>
    11f2:	23 2d       	mov	r18, r3
    11f4:	20 61       	ori	r18, 0x10	; 16
    11f6:	1d c0       	rjmp	.+58     	; 0x1232 <vfprintf+0xd6>
    11f8:	8d 32       	cpi	r24, 0x2D	; 45
    11fa:	61 f0       	breq	.+24     	; 0x1214 <vfprintf+0xb8>
    11fc:	80 33       	cpi	r24, 0x30	; 48
    11fe:	69 f4       	brne	.+26     	; 0x121a <vfprintf+0xbe>
    1200:	23 2d       	mov	r18, r3
    1202:	21 60       	ori	r18, 0x01	; 1
    1204:	16 c0       	rjmp	.+44     	; 0x1232 <vfprintf+0xd6>
    1206:	83 2d       	mov	r24, r3
    1208:	82 60       	ori	r24, 0x02	; 2
    120a:	38 2e       	mov	r3, r24
    120c:	e3 2d       	mov	r30, r3
    120e:	e4 60       	ori	r30, 0x04	; 4
    1210:	3e 2e       	mov	r3, r30
    1212:	2a c0       	rjmp	.+84     	; 0x1268 <vfprintf+0x10c>
    1214:	f3 2d       	mov	r31, r3
    1216:	f8 60       	ori	r31, 0x08	; 8
    1218:	1d c0       	rjmp	.+58     	; 0x1254 <vfprintf+0xf8>
    121a:	37 fc       	sbrc	r3, 7
    121c:	2d c0       	rjmp	.+90     	; 0x1278 <vfprintf+0x11c>
    121e:	20 ed       	ldi	r18, 0xD0	; 208
    1220:	28 0f       	add	r18, r24
    1222:	2a 30       	cpi	r18, 0x0A	; 10
    1224:	40 f0       	brcs	.+16     	; 0x1236 <vfprintf+0xda>
    1226:	8e 32       	cpi	r24, 0x2E	; 46
    1228:	b9 f4       	brne	.+46     	; 0x1258 <vfprintf+0xfc>
    122a:	36 fc       	sbrc	r3, 6
    122c:	75 c1       	rjmp	.+746    	; 0x1518 <vfprintf+0x3bc>
    122e:	23 2d       	mov	r18, r3
    1230:	20 64       	ori	r18, 0x40	; 64
    1232:	32 2e       	mov	r3, r18
    1234:	19 c0       	rjmp	.+50     	; 0x1268 <vfprintf+0x10c>
    1236:	36 fe       	sbrs	r3, 6
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <vfprintf+0xea>
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	98 9e       	mul	r9, r24
    123e:	20 0d       	add	r18, r0
    1240:	11 24       	eor	r1, r1
    1242:	92 2e       	mov	r9, r18
    1244:	11 c0       	rjmp	.+34     	; 0x1268 <vfprintf+0x10c>
    1246:	ea e0       	ldi	r30, 0x0A	; 10
    1248:	2e 9e       	mul	r2, r30
    124a:	20 0d       	add	r18, r0
    124c:	11 24       	eor	r1, r1
    124e:	22 2e       	mov	r2, r18
    1250:	f3 2d       	mov	r31, r3
    1252:	f0 62       	ori	r31, 0x20	; 32
    1254:	3f 2e       	mov	r3, r31
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <vfprintf+0x10c>
    1258:	8c 36       	cpi	r24, 0x6C	; 108
    125a:	21 f4       	brne	.+8      	; 0x1264 <vfprintf+0x108>
    125c:	83 2d       	mov	r24, r3
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	38 2e       	mov	r3, r24
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x10c>
    1264:	88 36       	cpi	r24, 0x68	; 104
    1266:	41 f4       	brne	.+16     	; 0x1278 <vfprintf+0x11c>
    1268:	f7 01       	movw	r30, r14
    126a:	93 fd       	sbrc	r25, 3
    126c:	85 91       	lpm	r24, Z+
    126e:	93 ff       	sbrs	r25, 3
    1270:	81 91       	ld	r24, Z+
    1272:	7f 01       	movw	r14, r30
    1274:	81 11       	cpse	r24, r1
    1276:	b3 cf       	rjmp	.-154    	; 0x11de <vfprintf+0x82>
    1278:	98 2f       	mov	r25, r24
    127a:	9f 7d       	andi	r25, 0xDF	; 223
    127c:	95 54       	subi	r25, 0x45	; 69
    127e:	93 30       	cpi	r25, 0x03	; 3
    1280:	28 f4       	brcc	.+10     	; 0x128c <vfprintf+0x130>
    1282:	0c 5f       	subi	r16, 0xFC	; 252
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	9f e3       	ldi	r25, 0x3F	; 63
    1288:	99 83       	std	Y+1, r25	; 0x01
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <vfprintf+0x14a>
    128c:	83 36       	cpi	r24, 0x63	; 99
    128e:	31 f0       	breq	.+12     	; 0x129c <vfprintf+0x140>
    1290:	83 37       	cpi	r24, 0x73	; 115
    1292:	71 f0       	breq	.+28     	; 0x12b0 <vfprintf+0x154>
    1294:	83 35       	cpi	r24, 0x53	; 83
    1296:	09 f0       	breq	.+2      	; 0x129a <vfprintf+0x13e>
    1298:	55 c0       	rjmp	.+170    	; 0x1344 <vfprintf+0x1e8>
    129a:	20 c0       	rjmp	.+64     	; 0x12dc <vfprintf+0x180>
    129c:	f8 01       	movw	r30, r16
    129e:	80 81       	ld	r24, Z
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	0e 5f       	subi	r16, 0xFE	; 254
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	88 24       	eor	r8, r8
    12a8:	83 94       	inc	r8
    12aa:	91 2c       	mov	r9, r1
    12ac:	53 01       	movw	r10, r6
    12ae:	12 c0       	rjmp	.+36     	; 0x12d4 <vfprintf+0x178>
    12b0:	28 01       	movw	r4, r16
    12b2:	f2 e0       	ldi	r31, 0x02	; 2
    12b4:	4f 0e       	add	r4, r31
    12b6:	51 1c       	adc	r5, r1
    12b8:	f8 01       	movw	r30, r16
    12ba:	a0 80       	ld	r10, Z
    12bc:	b1 80       	ldd	r11, Z+1	; 0x01
    12be:	36 fe       	sbrs	r3, 6
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <vfprintf+0x16c>
    12c2:	69 2d       	mov	r22, r9
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <vfprintf+0x170>
    12c8:	6f ef       	ldi	r22, 0xFF	; 255
    12ca:	7f ef       	ldi	r23, 0xFF	; 255
    12cc:	c5 01       	movw	r24, r10
    12ce:	2a d4       	rcall	.+2132   	; 0x1b24 <strnlen>
    12d0:	4c 01       	movw	r8, r24
    12d2:	82 01       	movw	r16, r4
    12d4:	f3 2d       	mov	r31, r3
    12d6:	ff 77       	andi	r31, 0x7F	; 127
    12d8:	3f 2e       	mov	r3, r31
    12da:	15 c0       	rjmp	.+42     	; 0x1306 <vfprintf+0x1aa>
    12dc:	28 01       	movw	r4, r16
    12de:	22 e0       	ldi	r18, 0x02	; 2
    12e0:	42 0e       	add	r4, r18
    12e2:	51 1c       	adc	r5, r1
    12e4:	f8 01       	movw	r30, r16
    12e6:	a0 80       	ld	r10, Z
    12e8:	b1 80       	ldd	r11, Z+1	; 0x01
    12ea:	36 fe       	sbrs	r3, 6
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <vfprintf+0x198>
    12ee:	69 2d       	mov	r22, r9
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <vfprintf+0x19c>
    12f4:	6f ef       	ldi	r22, 0xFF	; 255
    12f6:	7f ef       	ldi	r23, 0xFF	; 255
    12f8:	c5 01       	movw	r24, r10
    12fa:	09 d4       	rcall	.+2066   	; 0x1b0e <strnlen_P>
    12fc:	4c 01       	movw	r8, r24
    12fe:	f3 2d       	mov	r31, r3
    1300:	f0 68       	ori	r31, 0x80	; 128
    1302:	3f 2e       	mov	r3, r31
    1304:	82 01       	movw	r16, r4
    1306:	33 fc       	sbrc	r3, 3
    1308:	19 c0       	rjmp	.+50     	; 0x133c <vfprintf+0x1e0>
    130a:	82 2d       	mov	r24, r2
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	88 16       	cp	r8, r24
    1310:	99 06       	cpc	r9, r25
    1312:	a0 f4       	brcc	.+40     	; 0x133c <vfprintf+0x1e0>
    1314:	b6 01       	movw	r22, r12
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	4d d4       	rcall	.+2202   	; 0x1bb6 <fputc>
    131c:	2a 94       	dec	r2
    131e:	f5 cf       	rjmp	.-22     	; 0x130a <vfprintf+0x1ae>
    1320:	f5 01       	movw	r30, r10
    1322:	37 fc       	sbrc	r3, 7
    1324:	85 91       	lpm	r24, Z+
    1326:	37 fe       	sbrs	r3, 7
    1328:	81 91       	ld	r24, Z+
    132a:	5f 01       	movw	r10, r30
    132c:	b6 01       	movw	r22, r12
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	42 d4       	rcall	.+2180   	; 0x1bb6 <fputc>
    1332:	21 10       	cpse	r2, r1
    1334:	2a 94       	dec	r2
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	82 1a       	sub	r8, r18
    133a:	91 08       	sbc	r9, r1
    133c:	81 14       	cp	r8, r1
    133e:	91 04       	cpc	r9, r1
    1340:	79 f7       	brne	.-34     	; 0x1320 <vfprintf+0x1c4>
    1342:	e1 c0       	rjmp	.+450    	; 0x1506 <vfprintf+0x3aa>
    1344:	84 36       	cpi	r24, 0x64	; 100
    1346:	11 f0       	breq	.+4      	; 0x134c <vfprintf+0x1f0>
    1348:	89 36       	cpi	r24, 0x69	; 105
    134a:	39 f5       	brne	.+78     	; 0x139a <vfprintf+0x23e>
    134c:	f8 01       	movw	r30, r16
    134e:	37 fe       	sbrs	r3, 7
    1350:	07 c0       	rjmp	.+14     	; 0x1360 <vfprintf+0x204>
    1352:	60 81       	ld	r22, Z
    1354:	71 81       	ldd	r23, Z+1	; 0x01
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	0c 5f       	subi	r16, 0xFC	; 252
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <vfprintf+0x214>
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	07 2e       	mov	r0, r23
    1366:	00 0c       	add	r0, r0
    1368:	88 0b       	sbc	r24, r24
    136a:	99 0b       	sbc	r25, r25
    136c:	0e 5f       	subi	r16, 0xFE	; 254
    136e:	1f 4f       	sbci	r17, 0xFF	; 255
    1370:	f3 2d       	mov	r31, r3
    1372:	ff 76       	andi	r31, 0x6F	; 111
    1374:	3f 2e       	mov	r3, r31
    1376:	97 ff       	sbrs	r25, 7
    1378:	09 c0       	rjmp	.+18     	; 0x138c <vfprintf+0x230>
    137a:	90 95       	com	r25
    137c:	80 95       	com	r24
    137e:	70 95       	com	r23
    1380:	61 95       	neg	r22
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	8f 4f       	sbci	r24, 0xFF	; 255
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	f0 68       	ori	r31, 0x80	; 128
    138a:	3f 2e       	mov	r3, r31
    138c:	2a e0       	ldi	r18, 0x0A	; 10
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	a3 01       	movw	r20, r6
    1392:	66 d4       	rcall	.+2252   	; 0x1c60 <__ultoa_invert>
    1394:	88 2e       	mov	r8, r24
    1396:	86 18       	sub	r8, r6
    1398:	44 c0       	rjmp	.+136    	; 0x1422 <vfprintf+0x2c6>
    139a:	85 37       	cpi	r24, 0x75	; 117
    139c:	31 f4       	brne	.+12     	; 0x13aa <vfprintf+0x24e>
    139e:	23 2d       	mov	r18, r3
    13a0:	2f 7e       	andi	r18, 0xEF	; 239
    13a2:	b2 2e       	mov	r11, r18
    13a4:	2a e0       	ldi	r18, 0x0A	; 10
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	25 c0       	rjmp	.+74     	; 0x13f4 <vfprintf+0x298>
    13aa:	93 2d       	mov	r25, r3
    13ac:	99 7f       	andi	r25, 0xF9	; 249
    13ae:	b9 2e       	mov	r11, r25
    13b0:	8f 36       	cpi	r24, 0x6F	; 111
    13b2:	c1 f0       	breq	.+48     	; 0x13e4 <vfprintf+0x288>
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <vfprintf+0x260>
    13b6:	88 35       	cpi	r24, 0x58	; 88
    13b8:	79 f0       	breq	.+30     	; 0x13d8 <vfprintf+0x27c>
    13ba:	ae c0       	rjmp	.+348    	; 0x1518 <vfprintf+0x3bc>
    13bc:	80 37       	cpi	r24, 0x70	; 112
    13be:	19 f0       	breq	.+6      	; 0x13c6 <vfprintf+0x26a>
    13c0:	88 37       	cpi	r24, 0x78	; 120
    13c2:	21 f0       	breq	.+8      	; 0x13cc <vfprintf+0x270>
    13c4:	a9 c0       	rjmp	.+338    	; 0x1518 <vfprintf+0x3bc>
    13c6:	e9 2f       	mov	r30, r25
    13c8:	e0 61       	ori	r30, 0x10	; 16
    13ca:	be 2e       	mov	r11, r30
    13cc:	b4 fe       	sbrs	r11, 4
    13ce:	0d c0       	rjmp	.+26     	; 0x13ea <vfprintf+0x28e>
    13d0:	fb 2d       	mov	r31, r11
    13d2:	f4 60       	ori	r31, 0x04	; 4
    13d4:	bf 2e       	mov	r11, r31
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <vfprintf+0x28e>
    13d8:	34 fe       	sbrs	r3, 4
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <vfprintf+0x294>
    13dc:	29 2f       	mov	r18, r25
    13de:	26 60       	ori	r18, 0x06	; 6
    13e0:	b2 2e       	mov	r11, r18
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <vfprintf+0x294>
    13e4:	28 e0       	ldi	r18, 0x08	; 8
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <vfprintf+0x298>
    13ea:	20 e1       	ldi	r18, 0x10	; 16
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x298>
    13f0:	20 e1       	ldi	r18, 0x10	; 16
    13f2:	32 e0       	ldi	r19, 0x02	; 2
    13f4:	f8 01       	movw	r30, r16
    13f6:	b7 fe       	sbrs	r11, 7
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <vfprintf+0x2ac>
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	0c 5f       	subi	r16, 0xFC	; 252
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <vfprintf+0x2b8>
    1408:	60 81       	ld	r22, Z
    140a:	71 81       	ldd	r23, Z+1	; 0x01
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 5f       	subi	r16, 0xFE	; 254
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	a3 01       	movw	r20, r6
    1416:	24 d4       	rcall	.+2120   	; 0x1c60 <__ultoa_invert>
    1418:	88 2e       	mov	r8, r24
    141a:	86 18       	sub	r8, r6
    141c:	fb 2d       	mov	r31, r11
    141e:	ff 77       	andi	r31, 0x7F	; 127
    1420:	3f 2e       	mov	r3, r31
    1422:	36 fe       	sbrs	r3, 6
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <vfprintf+0x2e4>
    1426:	23 2d       	mov	r18, r3
    1428:	2e 7f       	andi	r18, 0xFE	; 254
    142a:	a2 2e       	mov	r10, r18
    142c:	89 14       	cp	r8, r9
    142e:	58 f4       	brcc	.+22     	; 0x1446 <vfprintf+0x2ea>
    1430:	34 fe       	sbrs	r3, 4
    1432:	0b c0       	rjmp	.+22     	; 0x144a <vfprintf+0x2ee>
    1434:	32 fc       	sbrc	r3, 2
    1436:	09 c0       	rjmp	.+18     	; 0x144a <vfprintf+0x2ee>
    1438:	83 2d       	mov	r24, r3
    143a:	8e 7e       	andi	r24, 0xEE	; 238
    143c:	a8 2e       	mov	r10, r24
    143e:	05 c0       	rjmp	.+10     	; 0x144a <vfprintf+0x2ee>
    1440:	b8 2c       	mov	r11, r8
    1442:	a3 2c       	mov	r10, r3
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x2f0>
    1446:	b8 2c       	mov	r11, r8
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x2f0>
    144a:	b9 2c       	mov	r11, r9
    144c:	a4 fe       	sbrs	r10, 4
    144e:	0f c0       	rjmp	.+30     	; 0x146e <vfprintf+0x312>
    1450:	fe 01       	movw	r30, r28
    1452:	e8 0d       	add	r30, r8
    1454:	f1 1d       	adc	r31, r1
    1456:	80 81       	ld	r24, Z
    1458:	80 33       	cpi	r24, 0x30	; 48
    145a:	21 f4       	brne	.+8      	; 0x1464 <vfprintf+0x308>
    145c:	9a 2d       	mov	r25, r10
    145e:	99 7e       	andi	r25, 0xE9	; 233
    1460:	a9 2e       	mov	r10, r25
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <vfprintf+0x31a>
    1464:	a2 fe       	sbrs	r10, 2
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <vfprintf+0x318>
    1468:	b3 94       	inc	r11
    146a:	b3 94       	inc	r11
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <vfprintf+0x31a>
    146e:	8a 2d       	mov	r24, r10
    1470:	86 78       	andi	r24, 0x86	; 134
    1472:	09 f0       	breq	.+2      	; 0x1476 <vfprintf+0x31a>
    1474:	b3 94       	inc	r11
    1476:	a3 fc       	sbrc	r10, 3
    1478:	10 c0       	rjmp	.+32     	; 0x149a <vfprintf+0x33e>
    147a:	a0 fe       	sbrs	r10, 0
    147c:	06 c0       	rjmp	.+12     	; 0x148a <vfprintf+0x32e>
    147e:	b2 14       	cp	r11, r2
    1480:	80 f4       	brcc	.+32     	; 0x14a2 <vfprintf+0x346>
    1482:	28 0c       	add	r2, r8
    1484:	92 2c       	mov	r9, r2
    1486:	9b 18       	sub	r9, r11
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <vfprintf+0x348>
    148a:	b2 14       	cp	r11, r2
    148c:	58 f4       	brcc	.+22     	; 0x14a4 <vfprintf+0x348>
    148e:	b6 01       	movw	r22, r12
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	90 d3       	rcall	.+1824   	; 0x1bb6 <fputc>
    1496:	b3 94       	inc	r11
    1498:	f8 cf       	rjmp	.-16     	; 0x148a <vfprintf+0x32e>
    149a:	b2 14       	cp	r11, r2
    149c:	18 f4       	brcc	.+6      	; 0x14a4 <vfprintf+0x348>
    149e:	2b 18       	sub	r2, r11
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfprintf+0x34a>
    14a2:	98 2c       	mov	r9, r8
    14a4:	21 2c       	mov	r2, r1
    14a6:	a4 fe       	sbrs	r10, 4
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <vfprintf+0x36c>
    14aa:	b6 01       	movw	r22, r12
    14ac:	80 e3       	ldi	r24, 0x30	; 48
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	82 d3       	rcall	.+1796   	; 0x1bb6 <fputc>
    14b2:	a2 fe       	sbrs	r10, 2
    14b4:	16 c0       	rjmp	.+44     	; 0x14e2 <vfprintf+0x386>
    14b6:	a1 fc       	sbrc	r10, 1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <vfprintf+0x364>
    14ba:	88 e7       	ldi	r24, 0x78	; 120
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x368>
    14c0:	88 e5       	ldi	r24, 0x58	; 88
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	b6 01       	movw	r22, r12
    14c6:	0c c0       	rjmp	.+24     	; 0x14e0 <vfprintf+0x384>
    14c8:	8a 2d       	mov	r24, r10
    14ca:	86 78       	andi	r24, 0x86	; 134
    14cc:	51 f0       	breq	.+20     	; 0x14e2 <vfprintf+0x386>
    14ce:	a1 fe       	sbrs	r10, 1
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x37a>
    14d2:	8b e2       	ldi	r24, 0x2B	; 43
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <vfprintf+0x37c>
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	a7 fc       	sbrc	r10, 7
    14da:	8d e2       	ldi	r24, 0x2D	; 45
    14dc:	b6 01       	movw	r22, r12
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	6a d3       	rcall	.+1748   	; 0x1bb6 <fputc>
    14e2:	89 14       	cp	r8, r9
    14e4:	30 f4       	brcc	.+12     	; 0x14f2 <vfprintf+0x396>
    14e6:	b6 01       	movw	r22, r12
    14e8:	80 e3       	ldi	r24, 0x30	; 48
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	64 d3       	rcall	.+1736   	; 0x1bb6 <fputc>
    14ee:	9a 94       	dec	r9
    14f0:	f8 cf       	rjmp	.-16     	; 0x14e2 <vfprintf+0x386>
    14f2:	8a 94       	dec	r8
    14f4:	f3 01       	movw	r30, r6
    14f6:	e8 0d       	add	r30, r8
    14f8:	f1 1d       	adc	r31, r1
    14fa:	80 81       	ld	r24, Z
    14fc:	b6 01       	movw	r22, r12
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	5a d3       	rcall	.+1716   	; 0x1bb6 <fputc>
    1502:	81 10       	cpse	r8, r1
    1504:	f6 cf       	rjmp	.-20     	; 0x14f2 <vfprintf+0x396>
    1506:	22 20       	and	r2, r2
    1508:	09 f4       	brne	.+2      	; 0x150c <vfprintf+0x3b0>
    150a:	4e ce       	rjmp	.-868    	; 0x11a8 <vfprintf+0x4c>
    150c:	b6 01       	movw	r22, r12
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	51 d3       	rcall	.+1698   	; 0x1bb6 <fputc>
    1514:	2a 94       	dec	r2
    1516:	f7 cf       	rjmp	.-18     	; 0x1506 <vfprintf+0x3aa>
    1518:	f6 01       	movw	r30, r12
    151a:	86 81       	ldd	r24, Z+6	; 0x06
    151c:	97 81       	ldd	r25, Z+7	; 0x07
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <vfprintf+0x3c8>
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	2b 96       	adiw	r28, 0x0b	; 11
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	9f 90       	pop	r9
    1546:	8f 90       	pop	r8
    1548:	7f 90       	pop	r7
    154a:	6f 90       	pop	r6
    154c:	5f 90       	pop	r5
    154e:	4f 90       	pop	r4
    1550:	3f 90       	pop	r3
    1552:	2f 90       	pop	r2
    1554:	08 95       	ret

00001556 <putval>:
    1556:	20 fd       	sbrc	r18, 0
    1558:	09 c0       	rjmp	.+18     	; 0x156c <putval+0x16>
    155a:	fc 01       	movw	r30, r24
    155c:	23 fd       	sbrc	r18, 3
    155e:	05 c0       	rjmp	.+10     	; 0x156a <putval+0x14>
    1560:	22 ff       	sbrs	r18, 2
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <putval+0x12>
    1564:	73 83       	std	Z+3, r23	; 0x03
    1566:	62 83       	std	Z+2, r22	; 0x02
    1568:	51 83       	std	Z+1, r21	; 0x01
    156a:	40 83       	st	Z, r20
    156c:	08 95       	ret

0000156e <mulacc>:
    156e:	44 fd       	sbrc	r20, 4
    1570:	17 c0       	rjmp	.+46     	; 0x15a0 <mulacc+0x32>
    1572:	46 fd       	sbrc	r20, 6
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <mulacc+0x36>
    1576:	ab 01       	movw	r20, r22
    1578:	bc 01       	movw	r22, r24
    157a:	da 01       	movw	r26, r20
    157c:	fb 01       	movw	r30, r22
    157e:	aa 0f       	add	r26, r26
    1580:	bb 1f       	adc	r27, r27
    1582:	ee 1f       	adc	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	10 94       	com	r1
    1588:	d1 f7       	brne	.-12     	; 0x157e <mulacc+0x10>
    158a:	4a 0f       	add	r20, r26
    158c:	5b 1f       	adc	r21, r27
    158e:	6e 1f       	adc	r22, r30
    1590:	7f 1f       	adc	r23, r31
    1592:	cb 01       	movw	r24, r22
    1594:	ba 01       	movw	r22, r20
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <mulacc+0x44>
    15a0:	33 e0       	ldi	r19, 0x03	; 3
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <mulacc+0x38>
    15a4:	34 e0       	ldi	r19, 0x04	; 4
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	31 50       	subi	r19, 0x01	; 1
    15b0:	d1 f7       	brne	.-12     	; 0x15a6 <mulacc+0x38>
    15b2:	62 0f       	add	r22, r18
    15b4:	71 1d       	adc	r23, r1
    15b6:	81 1d       	adc	r24, r1
    15b8:	91 1d       	adc	r25, r1
    15ba:	08 95       	ret

000015bc <skip_spaces>:
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	8c 01       	movw	r16, r24
    15c6:	c8 01       	movw	r24, r16
    15c8:	b8 d2       	rcall	.+1392   	; 0x1b3a <fgetc>
    15ca:	ec 01       	movw	r28, r24
    15cc:	97 fd       	sbrc	r25, 7
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <skip_spaces+0x20>
    15d0:	8b d2       	rcall	.+1302   	; 0x1ae8 <isspace>
    15d2:	89 2b       	or	r24, r25
    15d4:	c1 f7       	brne	.-16     	; 0x15c6 <skip_spaces+0xa>
    15d6:	b8 01       	movw	r22, r16
    15d8:	ce 01       	movw	r24, r28
    15da:	29 d3       	rcall	.+1618   	; 0x1c2e <ungetc>
    15dc:	ce 01       	movw	r24, r28
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <conv_int>:
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	8c 01       	movw	r16, r24
    15fe:	d6 2f       	mov	r29, r22
    1600:	7a 01       	movw	r14, r20
    1602:	b2 2e       	mov	r11, r18
    1604:	9a d2       	rcall	.+1332   	; 0x1b3a <fgetc>
    1606:	9c 01       	movw	r18, r24
    1608:	33 27       	eor	r19, r19
    160a:	2b 32       	cpi	r18, 0x2B	; 43
    160c:	31 05       	cpc	r19, r1
    160e:	31 f0       	breq	.+12     	; 0x161c <conv_int+0x34>
    1610:	2d 32       	cpi	r18, 0x2D	; 45
    1612:	31 05       	cpc	r19, r1
    1614:	59 f4       	brne	.+22     	; 0x162c <conv_int+0x44>
    1616:	8b 2d       	mov	r24, r11
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	b8 2e       	mov	r11, r24
    161c:	d1 50       	subi	r29, 0x01	; 1
    161e:	11 f4       	brne	.+4      	; 0x1624 <conv_int+0x3c>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	61 c0       	rjmp	.+194    	; 0x16e6 <conv_int+0xfe>
    1624:	c8 01       	movw	r24, r16
    1626:	89 d2       	rcall	.+1298   	; 0x1b3a <fgetc>
    1628:	97 fd       	sbrc	r25, 7
    162a:	fa cf       	rjmp	.-12     	; 0x1620 <conv_int+0x38>
    162c:	cb 2d       	mov	r28, r11
    162e:	cd 7f       	andi	r28, 0xFD	; 253
    1630:	2b 2d       	mov	r18, r11
    1632:	20 73       	andi	r18, 0x30	; 48
    1634:	f9 f4       	brne	.+62     	; 0x1674 <conv_int+0x8c>
    1636:	80 33       	cpi	r24, 0x30	; 48
    1638:	e9 f4       	brne	.+58     	; 0x1674 <conv_int+0x8c>
    163a:	aa 24       	eor	r10, r10
    163c:	aa 94       	dec	r10
    163e:	ad 0e       	add	r10, r29
    1640:	09 f4       	brne	.+2      	; 0x1644 <conv_int+0x5c>
    1642:	3e c0       	rjmp	.+124    	; 0x16c0 <conv_int+0xd8>
    1644:	c8 01       	movw	r24, r16
    1646:	79 d2       	rcall	.+1266   	; 0x1b3a <fgetc>
    1648:	97 fd       	sbrc	r25, 7
    164a:	3a c0       	rjmp	.+116    	; 0x16c0 <conv_int+0xd8>
    164c:	9c 01       	movw	r18, r24
    164e:	2f 7d       	andi	r18, 0xDF	; 223
    1650:	33 27       	eor	r19, r19
    1652:	28 35       	cpi	r18, 0x58	; 88
    1654:	31 05       	cpc	r19, r1
    1656:	41 f4       	brne	.+16     	; 0x1668 <conv_int+0x80>
    1658:	c2 64       	ori	r28, 0x42	; 66
    165a:	d2 50       	subi	r29, 0x02	; 2
    165c:	89 f1       	breq	.+98     	; 0x16c0 <conv_int+0xd8>
    165e:	c8 01       	movw	r24, r16
    1660:	6c d2       	rcall	.+1240   	; 0x1b3a <fgetc>
    1662:	97 ff       	sbrs	r25, 7
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <conv_int+0x8c>
    1666:	2c c0       	rjmp	.+88     	; 0x16c0 <conv_int+0xd8>
    1668:	b6 fe       	sbrs	r11, 6
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <conv_int+0x88>
    166c:	c2 60       	ori	r28, 0x02	; 2
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <conv_int+0x8a>
    1670:	c2 61       	ori	r28, 0x12	; 18
    1672:	da 2d       	mov	r29, r10
    1674:	81 2c       	mov	r8, r1
    1676:	91 2c       	mov	r9, r1
    1678:	54 01       	movw	r10, r8
    167a:	20 ed       	ldi	r18, 0xD0	; 208
    167c:	28 0f       	add	r18, r24
    167e:	28 30       	cpi	r18, 0x08	; 8
    1680:	78 f0       	brcs	.+30     	; 0x16a0 <conv_int+0xb8>
    1682:	c4 ff       	sbrs	r28, 4
    1684:	03 c0       	rjmp	.+6      	; 0x168c <conv_int+0xa4>
    1686:	b8 01       	movw	r22, r16
    1688:	d2 d2       	rcall	.+1444   	; 0x1c2e <ungetc>
    168a:	17 c0       	rjmp	.+46     	; 0x16ba <conv_int+0xd2>
    168c:	2a 30       	cpi	r18, 0x0A	; 10
    168e:	40 f0       	brcs	.+16     	; 0x16a0 <conv_int+0xb8>
    1690:	c6 ff       	sbrs	r28, 6
    1692:	f9 cf       	rjmp	.-14     	; 0x1686 <conv_int+0x9e>
    1694:	2f 7d       	andi	r18, 0xDF	; 223
    1696:	3f ee       	ldi	r19, 0xEF	; 239
    1698:	32 0f       	add	r19, r18
    169a:	36 30       	cpi	r19, 0x06	; 6
    169c:	a0 f7       	brcc	.-24     	; 0x1686 <conv_int+0x9e>
    169e:	27 50       	subi	r18, 0x07	; 7
    16a0:	4c 2f       	mov	r20, r28
    16a2:	c5 01       	movw	r24, r10
    16a4:	b4 01       	movw	r22, r8
    16a6:	63 df       	rcall	.-314    	; 0x156e <mulacc>
    16a8:	4b 01       	movw	r8, r22
    16aa:	5c 01       	movw	r10, r24
    16ac:	c2 60       	ori	r28, 0x02	; 2
    16ae:	d1 50       	subi	r29, 0x01	; 1
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <conv_int+0xde>
    16b2:	c8 01       	movw	r24, r16
    16b4:	42 d2       	rcall	.+1156   	; 0x1b3a <fgetc>
    16b6:	97 ff       	sbrs	r25, 7
    16b8:	e0 cf       	rjmp	.-64     	; 0x167a <conv_int+0x92>
    16ba:	c1 fd       	sbrc	r28, 1
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <conv_int+0xde>
    16be:	b0 cf       	rjmp	.-160    	; 0x1620 <conv_int+0x38>
    16c0:	81 2c       	mov	r8, r1
    16c2:	91 2c       	mov	r9, r1
    16c4:	54 01       	movw	r10, r8
    16c6:	c7 ff       	sbrs	r28, 7
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <conv_int+0xf2>
    16ca:	b0 94       	com	r11
    16cc:	a0 94       	com	r10
    16ce:	90 94       	com	r9
    16d0:	80 94       	com	r8
    16d2:	81 1c       	adc	r8, r1
    16d4:	91 1c       	adc	r9, r1
    16d6:	a1 1c       	adc	r10, r1
    16d8:	b1 1c       	adc	r11, r1
    16da:	2c 2f       	mov	r18, r28
    16dc:	b5 01       	movw	r22, r10
    16de:	a4 01       	movw	r20, r8
    16e0:	c7 01       	movw	r24, r14
    16e2:	39 df       	rcall	.-398    	; 0x1556 <putval>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	bf 90       	pop	r11
    16f4:	af 90       	pop	r10
    16f6:	9f 90       	pop	r9
    16f8:	8f 90       	pop	r8
    16fa:	08 95       	ret

000016fc <conv_brk>:
    16fc:	5f 92       	push	r5
    16fe:	6f 92       	push	r6
    1700:	7f 92       	push	r7
    1702:	8f 92       	push	r8
    1704:	9f 92       	push	r9
    1706:	af 92       	push	r10
    1708:	bf 92       	push	r11
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	a0 97       	sbiw	r28, 0x20	; 32
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	5c 01       	movw	r10, r24
    172c:	96 2e       	mov	r9, r22
    172e:	7a 01       	movw	r14, r20
    1730:	f9 01       	movw	r30, r18
    1732:	8e 01       	movw	r16, r28
    1734:	0f 5f       	subi	r16, 0xFF	; 255
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	68 01       	movw	r12, r16
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	d8 01       	movw	r26, r16
    173e:	1d 92       	st	X+, r1
    1740:	8a 95       	dec	r24
    1742:	e9 f7       	brne	.-6      	; 0x173e <conv_brk+0x42>
    1744:	d5 01       	movw	r26, r10
    1746:	13 96       	adiw	r26, 0x03	; 3
    1748:	8c 90       	ld	r8, X
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	61 2c       	mov	r6, r1
    1750:	71 2c       	mov	r7, r1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	83 fc       	sbrc	r8, 3
    175a:	25 91       	lpm	r18, Z+
    175c:	83 fe       	sbrs	r8, 3
    175e:	21 91       	ld	r18, Z+
    1760:	8f 01       	movw	r16, r30
    1762:	52 2e       	mov	r5, r18
    1764:	21 11       	cpse	r18, r1
    1766:	03 c0       	rjmp	.+6      	; 0x176e <conv_brk+0x72>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	90 c0       	rjmp	.+288    	; 0x188e <conv_brk+0x192>
    176e:	2e 35       	cpi	r18, 0x5E	; 94
    1770:	11 f4       	brne	.+4      	; 0x1776 <conv_brk+0x7a>
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	51 f1       	breq	.+84     	; 0x17ca <conv_brk+0xce>
    1776:	43 2f       	mov	r20, r19
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	48 17       	cp	r20, r24
    177c:	59 07       	cpc	r21, r25
    177e:	3c f4       	brge	.+14     	; 0x178e <conv_brk+0x92>
    1780:	2d 35       	cpi	r18, 0x5D	; 93
    1782:	59 f1       	breq	.+86     	; 0x17da <conv_brk+0xde>
    1784:	2d 32       	cpi	r18, 0x2D	; 45
    1786:	19 f4       	brne	.+6      	; 0x178e <conv_brk+0x92>
    1788:	77 20       	and	r7, r7
    178a:	09 f1       	breq	.+66     	; 0x17ce <conv_brk+0xd2>
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <conv_brk+0x98>
    178e:	77 20       	and	r7, r7
    1790:	09 f4       	brne	.+2      	; 0x1794 <conv_brk+0x98>
    1792:	68 c0       	rjmp	.+208    	; 0x1864 <conv_brk+0x168>
    1794:	45 2d       	mov	r20, r5
    1796:	46 95       	lsr	r20
    1798:	46 95       	lsr	r20
    179a:	46 95       	lsr	r20
    179c:	d6 01       	movw	r26, r12
    179e:	a4 0f       	add	r26, r20
    17a0:	b1 1d       	adc	r27, r1
    17a2:	45 2d       	mov	r20, r5
    17a4:	47 70       	andi	r20, 0x07	; 7
    17a6:	8b 01       	movw	r16, r22
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <conv_brk+0xb2>
    17aa:	00 0f       	add	r16, r16
    17ac:	11 1f       	adc	r17, r17
    17ae:	4a 95       	dec	r20
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <conv_brk+0xae>
    17b2:	a8 01       	movw	r20, r16
    17b4:	5c 91       	ld	r21, X
    17b6:	45 2b       	or	r20, r21
    17b8:	4c 93       	st	X, r20
    17ba:	65 14       	cp	r6, r5
    17bc:	59 f0       	breq	.+22     	; 0x17d4 <conv_brk+0xd8>
    17be:	56 14       	cp	r5, r6
    17c0:	10 f4       	brcc	.+4      	; 0x17c6 <conv_brk+0xca>
    17c2:	53 94       	inc	r5
    17c4:	e7 cf       	rjmp	.-50     	; 0x1794 <conv_brk+0x98>
    17c6:	5a 94       	dec	r5
    17c8:	e5 cf       	rjmp	.-54     	; 0x1794 <conv_brk+0x98>
    17ca:	31 e0       	ldi	r19, 0x01	; 1
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <conv_brk+0xda>
    17ce:	77 24       	eor	r7, r7
    17d0:	73 94       	inc	r7
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <conv_brk+0xda>
    17d4:	71 2c       	mov	r7, r1
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	bf cf       	rjmp	.-130    	; 0x1758 <conv_brk+0x5c>
    17da:	77 20       	and	r7, r7
    17dc:	19 f0       	breq	.+6      	; 0x17e4 <conv_brk+0xe8>
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	80 62       	ori	r24, 0x20	; 32
    17e2:	8e 83       	std	Y+6, r24	; 0x06
    17e4:	31 11       	cpse	r19, r1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <conv_brk+0xf2>
    17e8:	88 24       	eor	r8, r8
    17ea:	83 94       	inc	r8
    17ec:	17 c0       	rjmp	.+46     	; 0x181c <conv_brk+0x120>
    17ee:	f6 01       	movw	r30, r12
    17f0:	9e 01       	movw	r18, r28
    17f2:	2f 5d       	subi	r18, 0xDF	; 223
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	80 95       	com	r24
    17fa:	81 93       	st	Z+, r24
    17fc:	2e 17       	cp	r18, r30
    17fe:	3f 07       	cpc	r19, r31
    1800:	d1 f7       	brne	.-12     	; 0x17f6 <conv_brk+0xfa>
    1802:	f2 cf       	rjmp	.-28     	; 0x17e8 <conv_brk+0xec>
    1804:	e1 14       	cp	r14, r1
    1806:	f1 04       	cpc	r15, r1
    1808:	29 f0       	breq	.+10     	; 0x1814 <conv_brk+0x118>
    180a:	d7 01       	movw	r26, r14
    180c:	8c 93       	st	X, r24
    180e:	f7 01       	movw	r30, r14
    1810:	31 96       	adiw	r30, 0x01	; 1
    1812:	7f 01       	movw	r14, r30
    1814:	9a 94       	dec	r9
    1816:	81 2c       	mov	r8, r1
    1818:	99 20       	and	r9, r9
    181a:	e9 f0       	breq	.+58     	; 0x1856 <conv_brk+0x15a>
    181c:	c5 01       	movw	r24, r10
    181e:	8d d1       	rcall	.+794    	; 0x1b3a <fgetc>
    1820:	97 fd       	sbrc	r25, 7
    1822:	17 c0       	rjmp	.+46     	; 0x1852 <conv_brk+0x156>
    1824:	fc 01       	movw	r30, r24
    1826:	ff 27       	eor	r31, r31
    1828:	23 e0       	ldi	r18, 0x03	; 3
    182a:	f5 95       	asr	r31
    182c:	e7 95       	ror	r30
    182e:	2a 95       	dec	r18
    1830:	e1 f7       	brne	.-8      	; 0x182a <conv_brk+0x12e>
    1832:	ec 0d       	add	r30, r12
    1834:	fd 1d       	adc	r31, r13
    1836:	20 81       	ld	r18, Z
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	ac 01       	movw	r20, r24
    183c:	47 70       	andi	r20, 0x07	; 7
    183e:	55 27       	eor	r21, r21
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <conv_brk+0x14a>
    1842:	35 95       	asr	r19
    1844:	27 95       	ror	r18
    1846:	4a 95       	dec	r20
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <conv_brk+0x146>
    184a:	20 fd       	sbrc	r18, 0
    184c:	db cf       	rjmp	.-74     	; 0x1804 <conv_brk+0x108>
    184e:	b5 01       	movw	r22, r10
    1850:	ee d1       	rcall	.+988    	; 0x1c2e <ungetc>
    1852:	81 10       	cpse	r8, r1
    1854:	89 cf       	rjmp	.-238    	; 0x1768 <conv_brk+0x6c>
    1856:	e1 14       	cp	r14, r1
    1858:	f1 04       	cpc	r15, r1
    185a:	11 f0       	breq	.+4      	; 0x1860 <conv_brk+0x164>
    185c:	d7 01       	movw	r26, r14
    185e:	1c 92       	st	X, r1
    1860:	c8 01       	movw	r24, r16
    1862:	15 c0       	rjmp	.+42     	; 0x188e <conv_brk+0x192>
    1864:	42 2f       	mov	r20, r18
    1866:	46 95       	lsr	r20
    1868:	46 95       	lsr	r20
    186a:	46 95       	lsr	r20
    186c:	d6 01       	movw	r26, r12
    186e:	a4 0f       	add	r26, r20
    1870:	b1 1d       	adc	r27, r1
    1872:	42 2f       	mov	r20, r18
    1874:	47 70       	andi	r20, 0x07	; 7
    1876:	8b 01       	movw	r16, r22
    1878:	02 c0       	rjmp	.+4      	; 0x187e <conv_brk+0x182>
    187a:	00 0f       	add	r16, r16
    187c:	11 1f       	adc	r17, r17
    187e:	4a 95       	dec	r20
    1880:	e2 f7       	brpl	.-8      	; 0x187a <conv_brk+0x17e>
    1882:	a8 01       	movw	r20, r16
    1884:	5c 91       	ld	r21, X
    1886:	45 2b       	or	r20, r21
    1888:	4c 93       	st	X, r20
    188a:	62 2e       	mov	r6, r18
    188c:	a4 cf       	rjmp	.-184    	; 0x17d6 <conv_brk+0xda>
    188e:	a0 96       	adiw	r28, 0x20	; 32
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	9f 90       	pop	r9
    18b0:	8f 90       	pop	r8
    18b2:	7f 90       	pop	r7
    18b4:	6f 90       	pop	r6
    18b6:	5f 90       	pop	r5
    18b8:	08 95       	ret

000018ba <vfscanf>:
    18ba:	5f 92       	push	r5
    18bc:	6f 92       	push	r6
    18be:	7f 92       	push	r7
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	6c 01       	movw	r12, r24
    18da:	eb 01       	movw	r28, r22
    18dc:	5a 01       	movw	r10, r20
    18de:	fc 01       	movw	r30, r24
    18e0:	17 82       	std	Z+7, r1	; 0x07
    18e2:	16 82       	std	Z+6, r1	; 0x06
    18e4:	51 2c       	mov	r5, r1
    18e6:	f6 01       	movw	r30, r12
    18e8:	e3 80       	ldd	r14, Z+3	; 0x03
    18ea:	fe 01       	movw	r30, r28
    18ec:	e3 fc       	sbrc	r14, 3
    18ee:	85 91       	lpm	r24, Z+
    18f0:	e3 fe       	sbrs	r14, 3
    18f2:	81 91       	ld	r24, Z+
    18f4:	18 2f       	mov	r17, r24
    18f6:	ef 01       	movw	r28, r30
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <vfscanf+0x44>
    18fc:	e0 c0       	rjmp	.+448    	; 0x1abe <vfscanf+0x204>
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	f3 d0       	rcall	.+486    	; 0x1ae8 <isspace>
    1902:	89 2b       	or	r24, r25
    1904:	19 f0       	breq	.+6      	; 0x190c <vfscanf+0x52>
    1906:	c6 01       	movw	r24, r12
    1908:	59 de       	rcall	.-846    	; 0x15bc <skip_spaces>
    190a:	ed cf       	rjmp	.-38     	; 0x18e6 <vfscanf+0x2c>
    190c:	15 32       	cpi	r17, 0x25	; 37
    190e:	41 f4       	brne	.+16     	; 0x1920 <vfscanf+0x66>
    1910:	fe 01       	movw	r30, r28
    1912:	e3 fc       	sbrc	r14, 3
    1914:	15 91       	lpm	r17, Z+
    1916:	e3 fe       	sbrs	r14, 3
    1918:	11 91       	ld	r17, Z+
    191a:	ef 01       	movw	r28, r30
    191c:	15 32       	cpi	r17, 0x25	; 37
    191e:	71 f4       	brne	.+28     	; 0x193c <vfscanf+0x82>
    1920:	c6 01       	movw	r24, r12
    1922:	0b d1       	rcall	.+534    	; 0x1b3a <fgetc>
    1924:	97 fd       	sbrc	r25, 7
    1926:	c9 c0       	rjmp	.+402    	; 0x1aba <vfscanf+0x200>
    1928:	41 2f       	mov	r20, r17
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	9c 01       	movw	r18, r24
    192e:	33 27       	eor	r19, r19
    1930:	24 17       	cp	r18, r20
    1932:	35 07       	cpc	r19, r21
    1934:	c1 f2       	breq	.-80     	; 0x18e6 <vfscanf+0x2c>
    1936:	b6 01       	movw	r22, r12
    1938:	7a d1       	rcall	.+756    	; 0x1c2e <ungetc>
    193a:	c1 c0       	rjmp	.+386    	; 0x1abe <vfscanf+0x204>
    193c:	1a 32       	cpi	r17, 0x2A	; 42
    193e:	39 f4       	brne	.+14     	; 0x194e <vfscanf+0x94>
    1940:	e3 fc       	sbrc	r14, 3
    1942:	15 91       	lpm	r17, Z+
    1944:	e3 fe       	sbrs	r14, 3
    1946:	11 91       	ld	r17, Z+
    1948:	ef 01       	movw	r28, r30
    194a:	01 e0       	ldi	r16, 0x01	; 1
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfscanf+0x96>
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	f1 2c       	mov	r15, r1
    1952:	20 ed       	ldi	r18, 0xD0	; 208
    1954:	21 0f       	add	r18, r17
    1956:	2a 30       	cpi	r18, 0x0A	; 10
    1958:	78 f4       	brcc	.+30     	; 0x1978 <vfscanf+0xbe>
    195a:	02 60       	ori	r16, 0x02	; 2
    195c:	6f 2d       	mov	r22, r15
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	40 e2       	ldi	r20, 0x20	; 32
    1966:	03 de       	rcall	.-1018   	; 0x156e <mulacc>
    1968:	f6 2e       	mov	r15, r22
    196a:	fe 01       	movw	r30, r28
    196c:	e3 fc       	sbrc	r14, 3
    196e:	15 91       	lpm	r17, Z+
    1970:	e3 fe       	sbrs	r14, 3
    1972:	11 91       	ld	r17, Z+
    1974:	ef 01       	movw	r28, r30
    1976:	ed cf       	rjmp	.-38     	; 0x1952 <vfscanf+0x98>
    1978:	01 ff       	sbrs	r16, 1
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <vfscanf+0xc8>
    197c:	f1 10       	cpse	r15, r1
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <vfscanf+0xcc>
    1980:	9e c0       	rjmp	.+316    	; 0x1abe <vfscanf+0x204>
    1982:	ff 24       	eor	r15, r15
    1984:	fa 94       	dec	r15
    1986:	18 36       	cpi	r17, 0x68	; 104
    1988:	19 f0       	breq	.+6      	; 0x1990 <vfscanf+0xd6>
    198a:	1c 36       	cpi	r17, 0x6C	; 108
    198c:	51 f0       	breq	.+20     	; 0x19a2 <vfscanf+0xe8>
    198e:	10 c0       	rjmp	.+32     	; 0x19b0 <vfscanf+0xf6>
    1990:	fe 01       	movw	r30, r28
    1992:	e3 fc       	sbrc	r14, 3
    1994:	15 91       	lpm	r17, Z+
    1996:	e3 fe       	sbrs	r14, 3
    1998:	11 91       	ld	r17, Z+
    199a:	ef 01       	movw	r28, r30
    199c:	18 36       	cpi	r17, 0x68	; 104
    199e:	41 f4       	brne	.+16     	; 0x19b0 <vfscanf+0xf6>
    19a0:	08 60       	ori	r16, 0x08	; 8
    19a2:	04 60       	ori	r16, 0x04	; 4
    19a4:	fe 01       	movw	r30, r28
    19a6:	e3 fc       	sbrc	r14, 3
    19a8:	15 91       	lpm	r17, Z+
    19aa:	e3 fe       	sbrs	r14, 3
    19ac:	11 91       	ld	r17, Z+
    19ae:	ef 01       	movw	r28, r30
    19b0:	11 23       	and	r17, r17
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <vfscanf+0xfc>
    19b4:	84 c0       	rjmp	.+264    	; 0x1abe <vfscanf+0x204>
    19b6:	61 2f       	mov	r22, r17
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	8c e8       	ldi	r24, 0x8C	; 140
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c d0       	rcall	.+312    	; 0x1af8 <strchr_P>
    19c0:	89 2b       	or	r24, r25
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <vfscanf+0x10c>
    19c4:	7c c0       	rjmp	.+248    	; 0x1abe <vfscanf+0x204>
    19c6:	00 fd       	sbrc	r16, 0
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <vfscanf+0x11e>
    19ca:	f5 01       	movw	r30, r10
    19cc:	80 80       	ld	r8, Z
    19ce:	91 80       	ldd	r9, Z+1	; 0x01
    19d0:	c5 01       	movw	r24, r10
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	5c 01       	movw	r10, r24
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfscanf+0x122>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	1e 36       	cpi	r17, 0x6E	; 110
    19de:	49 f4       	brne	.+18     	; 0x19f2 <vfscanf+0x138>
    19e0:	f6 01       	movw	r30, r12
    19e2:	46 81       	ldd	r20, Z+6	; 0x06
    19e4:	57 81       	ldd	r21, Z+7	; 0x07
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	20 2f       	mov	r18, r16
    19ec:	c4 01       	movw	r24, r8
    19ee:	b3 dd       	rcall	.-1178   	; 0x1556 <putval>
    19f0:	7a cf       	rjmp	.-268    	; 0x18e6 <vfscanf+0x2c>
    19f2:	13 36       	cpi	r17, 0x63	; 99
    19f4:	a1 f4       	brne	.+40     	; 0x1a1e <vfscanf+0x164>
    19f6:	01 fd       	sbrc	r16, 1
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <vfscanf+0x144>
    19fa:	ff 24       	eor	r15, r15
    19fc:	f3 94       	inc	r15
    19fe:	c6 01       	movw	r24, r12
    1a00:	9c d0       	rcall	.+312    	; 0x1b3a <fgetc>
    1a02:	97 fd       	sbrc	r25, 7
    1a04:	5a c0       	rjmp	.+180    	; 0x1aba <vfscanf+0x200>
    1a06:	81 14       	cp	r8, r1
    1a08:	91 04       	cpc	r9, r1
    1a0a:	29 f0       	breq	.+10     	; 0x1a16 <vfscanf+0x15c>
    1a0c:	f4 01       	movw	r30, r8
    1a0e:	80 83       	st	Z, r24
    1a10:	c4 01       	movw	r24, r8
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	4c 01       	movw	r8, r24
    1a16:	fa 94       	dec	r15
    1a18:	f1 10       	cpse	r15, r1
    1a1a:	f1 cf       	rjmp	.-30     	; 0x19fe <vfscanf+0x144>
    1a1c:	4a c0       	rjmp	.+148    	; 0x1ab2 <vfscanf+0x1f8>
    1a1e:	1b 35       	cpi	r17, 0x5B	; 91
    1a20:	51 f4       	brne	.+20     	; 0x1a36 <vfscanf+0x17c>
    1a22:	9e 01       	movw	r18, r28
    1a24:	a4 01       	movw	r20, r8
    1a26:	6f 2d       	mov	r22, r15
    1a28:	c6 01       	movw	r24, r12
    1a2a:	68 de       	rcall	.-816    	; 0x16fc <conv_brk>
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	89 2b       	or	r24, r25
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <vfscanf+0x17a>
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <vfscanf+0x1f8>
    1a34:	39 c0       	rjmp	.+114    	; 0x1aa8 <vfscanf+0x1ee>
    1a36:	c6 01       	movw	r24, r12
    1a38:	c1 dd       	rcall	.-1150   	; 0x15bc <skip_spaces>
    1a3a:	97 fd       	sbrc	r25, 7
    1a3c:	3e c0       	rjmp	.+124    	; 0x1aba <vfscanf+0x200>
    1a3e:	1f 36       	cpi	r17, 0x6F	; 111
    1a40:	49 f1       	breq	.+82     	; 0x1a94 <vfscanf+0x1da>
    1a42:	28 f4       	brcc	.+10     	; 0x1a4e <vfscanf+0x194>
    1a44:	14 36       	cpi	r17, 0x64	; 100
    1a46:	21 f1       	breq	.+72     	; 0x1a90 <vfscanf+0x1d6>
    1a48:	19 36       	cpi	r17, 0x69	; 105
    1a4a:	39 f1       	breq	.+78     	; 0x1a9a <vfscanf+0x1e0>
    1a4c:	25 c0       	rjmp	.+74     	; 0x1a98 <vfscanf+0x1de>
    1a4e:	13 37       	cpi	r17, 0x73	; 115
    1a50:	71 f0       	breq	.+28     	; 0x1a6e <vfscanf+0x1b4>
    1a52:	15 37       	cpi	r17, 0x75	; 117
    1a54:	e9 f0       	breq	.+58     	; 0x1a90 <vfscanf+0x1d6>
    1a56:	20 c0       	rjmp	.+64     	; 0x1a98 <vfscanf+0x1de>
    1a58:	81 14       	cp	r8, r1
    1a5a:	91 04       	cpc	r9, r1
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <vfscanf+0x1ae>
    1a5e:	f4 01       	movw	r30, r8
    1a60:	60 82       	st	Z, r6
    1a62:	c4 01       	movw	r24, r8
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	4c 01       	movw	r8, r24
    1a68:	fa 94       	dec	r15
    1a6a:	ff 20       	and	r15, r15
    1a6c:	59 f0       	breq	.+22     	; 0x1a84 <vfscanf+0x1ca>
    1a6e:	c6 01       	movw	r24, r12
    1a70:	64 d0       	rcall	.+200    	; 0x1b3a <fgetc>
    1a72:	3c 01       	movw	r6, r24
    1a74:	97 fd       	sbrc	r25, 7
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <vfscanf+0x1ca>
    1a78:	37 d0       	rcall	.+110    	; 0x1ae8 <isspace>
    1a7a:	89 2b       	or	r24, r25
    1a7c:	69 f3       	breq	.-38     	; 0x1a58 <vfscanf+0x19e>
    1a7e:	b6 01       	movw	r22, r12
    1a80:	c3 01       	movw	r24, r6
    1a82:	d5 d0       	rcall	.+426    	; 0x1c2e <ungetc>
    1a84:	81 14       	cp	r8, r1
    1a86:	91 04       	cpc	r9, r1
    1a88:	a1 f0       	breq	.+40     	; 0x1ab2 <vfscanf+0x1f8>
    1a8a:	f4 01       	movw	r30, r8
    1a8c:	10 82       	st	Z, r1
    1a8e:	11 c0       	rjmp	.+34     	; 0x1ab2 <vfscanf+0x1f8>
    1a90:	00 62       	ori	r16, 0x20	; 32
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <vfscanf+0x1e0>
    1a94:	00 61       	ori	r16, 0x10	; 16
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <vfscanf+0x1e0>
    1a98:	00 64       	ori	r16, 0x40	; 64
    1a9a:	20 2f       	mov	r18, r16
    1a9c:	a4 01       	movw	r20, r8
    1a9e:	6f 2d       	mov	r22, r15
    1aa0:	c6 01       	movw	r24, r12
    1aa2:	a2 dd       	rcall	.-1212   	; 0x15e8 <conv_int>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <vfscanf+0x1f8>
    1aa8:	f6 01       	movw	r30, r12
    1aaa:	83 81       	ldd	r24, Z+3	; 0x03
    1aac:	80 73       	andi	r24, 0x30	; 48
    1aae:	29 f4       	brne	.+10     	; 0x1aba <vfscanf+0x200>
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfscanf+0x204>
    1ab2:	00 fd       	sbrc	r16, 0
    1ab4:	18 cf       	rjmp	.-464    	; 0x18e6 <vfscanf+0x2c>
    1ab6:	53 94       	inc	r5
    1ab8:	16 cf       	rjmp	.-468    	; 0x18e6 <vfscanf+0x2c>
    1aba:	55 20       	and	r5, r5
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <vfscanf+0x20a>
    1abe:	85 2d       	mov	r24, r5
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <vfscanf+0x20e>
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	8f 90       	pop	r8
    1ae0:	7f 90       	pop	r7
    1ae2:	6f 90       	pop	r6
    1ae4:	5f 90       	pop	r5
    1ae6:	08 95       	ret

00001ae8 <isspace>:
    1ae8:	91 11       	cpse	r25, r1
    1aea:	18 c1       	rjmp	.+560    	; 0x1d1c <__ctype_isfalse>
    1aec:	80 32       	cpi	r24, 0x20	; 32
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <isspace+0xe>
    1af0:	89 50       	subi	r24, 0x09	; 9
    1af2:	85 50       	subi	r24, 0x05	; 5
    1af4:	d0 f7       	brcc	.-12     	; 0x1aea <isspace+0x2>
    1af6:	08 95       	ret

00001af8 <strchr_P>:
    1af8:	fc 01       	movw	r30, r24
    1afa:	05 90       	lpm	r0, Z+
    1afc:	06 16       	cp	r0, r22
    1afe:	21 f0       	breq	.+8      	; 0x1b08 <strchr_P+0x10>
    1b00:	00 20       	and	r0, r0
    1b02:	d9 f7       	brne	.-10     	; 0x1afa <strchr_P+0x2>
    1b04:	c0 01       	movw	r24, r0
    1b06:	08 95       	ret
    1b08:	31 97       	sbiw	r30, 0x01	; 1
    1b0a:	cf 01       	movw	r24, r30
    1b0c:	08 95       	ret

00001b0e <strnlen_P>:
    1b0e:	fc 01       	movw	r30, r24
    1b10:	05 90       	lpm	r0, Z+
    1b12:	61 50       	subi	r22, 0x01	; 1
    1b14:	70 40       	sbci	r23, 0x00	; 0
    1b16:	01 10       	cpse	r0, r1
    1b18:	d8 f7       	brcc	.-10     	; 0x1b10 <strnlen_P+0x2>
    1b1a:	80 95       	com	r24
    1b1c:	90 95       	com	r25
    1b1e:	8e 0f       	add	r24, r30
    1b20:	9f 1f       	adc	r25, r31
    1b22:	08 95       	ret

00001b24 <strnlen>:
    1b24:	fc 01       	movw	r30, r24
    1b26:	61 50       	subi	r22, 0x01	; 1
    1b28:	70 40       	sbci	r23, 0x00	; 0
    1b2a:	01 90       	ld	r0, Z+
    1b2c:	01 10       	cpse	r0, r1
    1b2e:	d8 f7       	brcc	.-10     	; 0x1b26 <strnlen+0x2>
    1b30:	80 95       	com	r24
    1b32:	90 95       	com	r25
    1b34:	8e 0f       	add	r24, r30
    1b36:	9f 1f       	adc	r25, r31
    1b38:	08 95       	ret

00001b3a <fgetc>:
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
    1b40:	2b 81       	ldd	r18, Y+3	; 0x03
    1b42:	20 ff       	sbrs	r18, 0
    1b44:	33 c0       	rjmp	.+102    	; 0x1bac <fgetc+0x72>
    1b46:	26 ff       	sbrs	r18, 6
    1b48:	0a c0       	rjmp	.+20     	; 0x1b5e <fgetc+0x24>
    1b4a:	2f 7b       	andi	r18, 0xBF	; 191
    1b4c:	2b 83       	std	Y+3, r18	; 0x03
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	9f 81       	ldd	r25, Y+7	; 0x07
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	9f 83       	std	Y+7, r25	; 0x07
    1b56:	8e 83       	std	Y+6, r24	; 0x06
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	29 c0       	rjmp	.+82     	; 0x1bb0 <fgetc+0x76>
    1b5e:	22 ff       	sbrs	r18, 2
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <fgetc+0x46>
    1b62:	e8 81       	ld	r30, Y
    1b64:	f9 81       	ldd	r31, Y+1	; 0x01
    1b66:	80 81       	ld	r24, Z
    1b68:	08 2e       	mov	r0, r24
    1b6a:	00 0c       	add	r0, r0
    1b6c:	99 0b       	sbc	r25, r25
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <fgetc+0x3e>
    1b72:	20 62       	ori	r18, 0x20	; 32
    1b74:	2b 83       	std	Y+3, r18	; 0x03
    1b76:	1a c0       	rjmp	.+52     	; 0x1bac <fgetc+0x72>
    1b78:	31 96       	adiw	r30, 0x01	; 1
    1b7a:	f9 83       	std	Y+1, r31	; 0x01
    1b7c:	e8 83       	st	Y, r30
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <fgetc+0x62>
    1b80:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b82:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b84:	09 95       	icall
    1b86:	97 ff       	sbrs	r25, 7
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <fgetc+0x62>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	11 f0       	breq	.+4      	; 0x1b94 <fgetc+0x5a>
    1b90:	80 e2       	ldi	r24, 0x20	; 32
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <fgetc+0x5c>
    1b94:	80 e1       	ldi	r24, 0x10	; 16
    1b96:	82 2b       	or	r24, r18
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	08 c0       	rjmp	.+16     	; 0x1bac <fgetc+0x72>
    1b9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	3f 83       	std	Y+7, r19	; 0x07
    1ba6:	2e 83       	std	Y+6, r18	; 0x06
    1ba8:	99 27       	eor	r25, r25
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <fgetc+0x76>
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9f ef       	ldi	r25, 0xFF	; 255
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <fputc>:
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	fb 01       	movw	r30, r22
    1bc0:	23 81       	ldd	r18, Z+3	; 0x03
    1bc2:	21 fd       	sbrc	r18, 1
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <fputc+0x16>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	2c c0       	rjmp	.+88     	; 0x1c24 <fputc+0x6e>
    1bcc:	22 ff       	sbrs	r18, 2
    1bce:	16 c0       	rjmp	.+44     	; 0x1bfc <fputc+0x46>
    1bd0:	46 81       	ldd	r20, Z+6	; 0x06
    1bd2:	57 81       	ldd	r21, Z+7	; 0x07
    1bd4:	24 81       	ldd	r18, Z+4	; 0x04
    1bd6:	35 81       	ldd	r19, Z+5	; 0x05
    1bd8:	42 17       	cp	r20, r18
    1bda:	53 07       	cpc	r21, r19
    1bdc:	44 f4       	brge	.+16     	; 0x1bee <fputc+0x38>
    1bde:	a0 81       	ld	r26, Z
    1be0:	b1 81       	ldd	r27, Z+1	; 0x01
    1be2:	9d 01       	movw	r18, r26
    1be4:	2f 5f       	subi	r18, 0xFF	; 255
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	31 83       	std	Z+1, r19	; 0x01
    1bea:	20 83       	st	Z, r18
    1bec:	8c 93       	st	X, r24
    1bee:	26 81       	ldd	r18, Z+6	; 0x06
    1bf0:	37 81       	ldd	r19, Z+7	; 0x07
    1bf2:	2f 5f       	subi	r18, 0xFF	; 255
    1bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf6:	37 83       	std	Z+7, r19	; 0x07
    1bf8:	26 83       	std	Z+6, r18	; 0x06
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <fputc+0x6e>
    1bfc:	8b 01       	movw	r16, r22
    1bfe:	ec 01       	movw	r28, r24
    1c00:	fb 01       	movw	r30, r22
    1c02:	00 84       	ldd	r0, Z+8	; 0x08
    1c04:	f1 85       	ldd	r31, Z+9	; 0x09
    1c06:	e0 2d       	mov	r30, r0
    1c08:	09 95       	icall
    1c0a:	89 2b       	or	r24, r25
    1c0c:	e1 f6       	brne	.-72     	; 0x1bc6 <fputc+0x10>
    1c0e:	d8 01       	movw	r26, r16
    1c10:	16 96       	adiw	r26, 0x06	; 6
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	17 97       	sbiw	r26, 0x07	; 7
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	17 96       	adiw	r26, 0x07	; 7
    1c1c:	9c 93       	st	X, r25
    1c1e:	8e 93       	st	-X, r24
    1c20:	16 97       	sbiw	r26, 0x06	; 6
    1c22:	ce 01       	movw	r24, r28
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	08 95       	ret

00001c2e <ungetc>:
    1c2e:	fb 01       	movw	r30, r22
    1c30:	23 81       	ldd	r18, Z+3	; 0x03
    1c32:	20 ff       	sbrs	r18, 0
    1c34:	12 c0       	rjmp	.+36     	; 0x1c5a <ungetc+0x2c>
    1c36:	26 fd       	sbrc	r18, 6
    1c38:	10 c0       	rjmp	.+32     	; 0x1c5a <ungetc+0x2c>
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	93 07       	cpc	r25, r19
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <ungetc+0x2c>
    1c42:	82 83       	std	Z+2, r24	; 0x02
    1c44:	2f 7d       	andi	r18, 0xDF	; 223
    1c46:	20 64       	ori	r18, 0x40	; 64
    1c48:	23 83       	std	Z+3, r18	; 0x03
    1c4a:	26 81       	ldd	r18, Z+6	; 0x06
    1c4c:	37 81       	ldd	r19, Z+7	; 0x07
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	31 09       	sbc	r19, r1
    1c52:	37 83       	std	Z+7, r19	; 0x07
    1c54:	26 83       	std	Z+6, r18	; 0x06
    1c56:	99 27       	eor	r25, r25
    1c58:	08 95       	ret
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	08 95       	ret

00001c60 <__ultoa_invert>:
    1c60:	fa 01       	movw	r30, r20
    1c62:	aa 27       	eor	r26, r26
    1c64:	28 30       	cpi	r18, 0x08	; 8
    1c66:	51 f1       	breq	.+84     	; 0x1cbc <__ultoa_invert+0x5c>
    1c68:	20 31       	cpi	r18, 0x10	; 16
    1c6a:	81 f1       	breq	.+96     	; 0x1ccc <__ultoa_invert+0x6c>
    1c6c:	e8 94       	clt
    1c6e:	6f 93       	push	r22
    1c70:	6e 7f       	andi	r22, 0xFE	; 254
    1c72:	6e 5f       	subi	r22, 0xFE	; 254
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	af 4f       	sbci	r26, 0xFF	; 255
    1c7c:	b1 e0       	ldi	r27, 0x01	; 1
    1c7e:	3e d0       	rcall	.+124    	; 0x1cfc <__ultoa_invert+0x9c>
    1c80:	b4 e0       	ldi	r27, 0x04	; 4
    1c82:	3c d0       	rcall	.+120    	; 0x1cfc <__ultoa_invert+0x9c>
    1c84:	67 0f       	add	r22, r23
    1c86:	78 1f       	adc	r23, r24
    1c88:	89 1f       	adc	r24, r25
    1c8a:	9a 1f       	adc	r25, r26
    1c8c:	a1 1d       	adc	r26, r1
    1c8e:	68 0f       	add	r22, r24
    1c90:	79 1f       	adc	r23, r25
    1c92:	8a 1f       	adc	r24, r26
    1c94:	91 1d       	adc	r25, r1
    1c96:	a1 1d       	adc	r26, r1
    1c98:	6a 0f       	add	r22, r26
    1c9a:	71 1d       	adc	r23, r1
    1c9c:	81 1d       	adc	r24, r1
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	20 d0       	rcall	.+64     	; 0x1ce4 <__ultoa_invert+0x84>
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <__ultoa_invert+0x48>
    1ca6:	68 94       	set
    1ca8:	3f 91       	pop	r19
    1caa:	2a e0       	ldi	r18, 0x0A	; 10
    1cac:	26 9f       	mul	r18, r22
    1cae:	11 24       	eor	r1, r1
    1cb0:	30 19       	sub	r19, r0
    1cb2:	30 5d       	subi	r19, 0xD0	; 208
    1cb4:	31 93       	st	Z+, r19
    1cb6:	de f6       	brtc	.-74     	; 0x1c6e <__ultoa_invert+0xe>
    1cb8:	cf 01       	movw	r24, r30
    1cba:	08 95       	ret
    1cbc:	46 2f       	mov	r20, r22
    1cbe:	47 70       	andi	r20, 0x07	; 7
    1cc0:	40 5d       	subi	r20, 0xD0	; 208
    1cc2:	41 93       	st	Z+, r20
    1cc4:	b3 e0       	ldi	r27, 0x03	; 3
    1cc6:	0f d0       	rcall	.+30     	; 0x1ce6 <__ultoa_invert+0x86>
    1cc8:	c9 f7       	brne	.-14     	; 0x1cbc <__ultoa_invert+0x5c>
    1cca:	f6 cf       	rjmp	.-20     	; 0x1cb8 <__ultoa_invert+0x58>
    1ccc:	46 2f       	mov	r20, r22
    1cce:	4f 70       	andi	r20, 0x0F	; 15
    1cd0:	40 5d       	subi	r20, 0xD0	; 208
    1cd2:	4a 33       	cpi	r20, 0x3A	; 58
    1cd4:	18 f0       	brcs	.+6      	; 0x1cdc <__ultoa_invert+0x7c>
    1cd6:	49 5d       	subi	r20, 0xD9	; 217
    1cd8:	31 fd       	sbrc	r19, 1
    1cda:	40 52       	subi	r20, 0x20	; 32
    1cdc:	41 93       	st	Z+, r20
    1cde:	02 d0       	rcall	.+4      	; 0x1ce4 <__ultoa_invert+0x84>
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <__ultoa_invert+0x6c>
    1ce2:	ea cf       	rjmp	.-44     	; 0x1cb8 <__ultoa_invert+0x58>
    1ce4:	b4 e0       	ldi	r27, 0x04	; 4
    1ce6:	a6 95       	lsr	r26
    1ce8:	97 95       	ror	r25
    1cea:	87 95       	ror	r24
    1cec:	77 95       	ror	r23
    1cee:	67 95       	ror	r22
    1cf0:	ba 95       	dec	r27
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <__ultoa_invert+0x86>
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	61 05       	cpc	r22, r1
    1cf8:	71 05       	cpc	r23, r1
    1cfa:	08 95       	ret
    1cfc:	9b 01       	movw	r18, r22
    1cfe:	ac 01       	movw	r20, r24
    1d00:	0a 2e       	mov	r0, r26
    1d02:	06 94       	lsr	r0
    1d04:	57 95       	ror	r21
    1d06:	47 95       	ror	r20
    1d08:	37 95       	ror	r19
    1d0a:	27 95       	ror	r18
    1d0c:	ba 95       	dec	r27
    1d0e:	c9 f7       	brne	.-14     	; 0x1d02 <__ultoa_invert+0xa2>
    1d10:	62 0f       	add	r22, r18
    1d12:	73 1f       	adc	r23, r19
    1d14:	84 1f       	adc	r24, r20
    1d16:	95 1f       	adc	r25, r21
    1d18:	a0 1d       	adc	r26, r0
    1d1a:	08 95       	ret

00001d1c <__ctype_isfalse>:
    1d1c:	99 27       	eor	r25, r25
    1d1e:	88 27       	eor	r24, r24

00001d20 <__ctype_istrue>:
    1d20:	08 95       	ret

00001d22 <eeprom_read_block>:
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22

00001d26 <eeprom_read_blraw>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	e1 99       	sbic	0x1c, 1	; 28
    1d2a:	fe cf       	rjmp	.-4      	; 0x1d28 <eeprom_read_blraw+0x2>
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <eeprom_read_blraw+0x14>
    1d2e:	ff bb       	out	0x1f, r31	; 31
    1d30:	ee bb       	out	0x1e, r30	; 30
    1d32:	e0 9a       	sbi	0x1c, 0	; 28
    1d34:	31 96       	adiw	r30, 0x01	; 1
    1d36:	0d b2       	in	r0, 0x1d	; 29
    1d38:	0d 92       	st	X+, r0
    1d3a:	41 50       	subi	r20, 0x01	; 1
    1d3c:	50 40       	sbci	r21, 0x00	; 0
    1d3e:	b8 f7       	brcc	.-18     	; 0x1d2e <eeprom_read_blraw+0x8>
    1d40:	08 95       	ret

00001d42 <eeprom_write_block>:
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <eeprom_write_block+0xa>
    1d48:	2d 91       	ld	r18, X+
    1d4a:	05 d0       	rcall	.+10     	; 0x1d56 <eeprom_write_r18>
    1d4c:	41 50       	subi	r20, 0x01	; 1
    1d4e:	50 40       	sbci	r21, 0x00	; 0
    1d50:	d8 f7       	brcc	.-10     	; 0x1d48 <eeprom_write_block+0x6>
    1d52:	08 95       	ret

00001d54 <eeprom_write_byte>:
    1d54:	26 2f       	mov	r18, r22

00001d56 <eeprom_write_r18>:
    1d56:	e1 99       	sbic	0x1c, 1	; 28
    1d58:	fe cf       	rjmp	.-4      	; 0x1d56 <eeprom_write_r18>
    1d5a:	9f bb       	out	0x1f, r25	; 31
    1d5c:	8e bb       	out	0x1e, r24	; 30
    1d5e:	2d bb       	out	0x1d, r18	; 29
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	e2 9a       	sbi	0x1c, 2	; 28
    1d66:	e1 9a       	sbi	0x1c, 1	; 28
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	08 95       	ret

00001d6e <__divmodsi4>:
    1d6e:	05 2e       	mov	r0, r21
    1d70:	97 fb       	bst	r25, 7
    1d72:	16 f4       	brtc	.+4      	; 0x1d78 <__divmodsi4+0xa>
    1d74:	00 94       	com	r0
    1d76:	0f d0       	rcall	.+30     	; 0x1d96 <__negsi2>
    1d78:	57 fd       	sbrc	r21, 7
    1d7a:	05 d0       	rcall	.+10     	; 0x1d86 <__divmodsi4_neg2>
    1d7c:	24 d0       	rcall	.+72     	; 0x1dc6 <__udivmodsi4>
    1d7e:	07 fc       	sbrc	r0, 7
    1d80:	02 d0       	rcall	.+4      	; 0x1d86 <__divmodsi4_neg2>
    1d82:	46 f4       	brtc	.+16     	; 0x1d94 <__divmodsi4_exit>
    1d84:	08 c0       	rjmp	.+16     	; 0x1d96 <__negsi2>

00001d86 <__divmodsi4_neg2>:
    1d86:	50 95       	com	r21
    1d88:	40 95       	com	r20
    1d8a:	30 95       	com	r19
    1d8c:	21 95       	neg	r18
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	4f 4f       	sbci	r20, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255

00001d94 <__divmodsi4_exit>:
    1d94:	08 95       	ret

00001d96 <__negsi2>:
    1d96:	90 95       	com	r25
    1d98:	80 95       	com	r24
    1d9a:	70 95       	com	r23
    1d9c:	61 95       	neg	r22
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	08 95       	ret

00001da6 <__muluhisi3>:
    1da6:	31 d0       	rcall	.+98     	; 0x1e0a <__umulhisi3>
    1da8:	a5 9f       	mul	r26, r21
    1daa:	90 0d       	add	r25, r0
    1dac:	b4 9f       	mul	r27, r20
    1dae:	90 0d       	add	r25, r0
    1db0:	a4 9f       	mul	r26, r20
    1db2:	80 0d       	add	r24, r0
    1db4:	91 1d       	adc	r25, r1
    1db6:	11 24       	eor	r1, r1
    1db8:	08 95       	ret

00001dba <__mulshisi3>:
    1dba:	b7 ff       	sbrs	r27, 7
    1dbc:	f4 cf       	rjmp	.-24     	; 0x1da6 <__muluhisi3>

00001dbe <__mulohisi3>:
    1dbe:	f3 df       	rcall	.-26     	; 0x1da6 <__muluhisi3>
    1dc0:	82 1b       	sub	r24, r18
    1dc2:	93 0b       	sbc	r25, r19
    1dc4:	08 95       	ret

00001dc6 <__udivmodsi4>:
    1dc6:	a1 e2       	ldi	r26, 0x21	; 33
    1dc8:	1a 2e       	mov	r1, r26
    1dca:	aa 1b       	sub	r26, r26
    1dcc:	bb 1b       	sub	r27, r27
    1dce:	fd 01       	movw	r30, r26
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <__udivmodsi4_ep>

00001dd2 <__udivmodsi4_loop>:
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	bb 1f       	adc	r27, r27
    1dd6:	ee 1f       	adc	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	a2 17       	cp	r26, r18
    1ddc:	b3 07       	cpc	r27, r19
    1dde:	e4 07       	cpc	r30, r20
    1de0:	f5 07       	cpc	r31, r21
    1de2:	20 f0       	brcs	.+8      	; 0x1dec <__udivmodsi4_ep>
    1de4:	a2 1b       	sub	r26, r18
    1de6:	b3 0b       	sbc	r27, r19
    1de8:	e4 0b       	sbc	r30, r20
    1dea:	f5 0b       	sbc	r31, r21

00001dec <__udivmodsi4_ep>:
    1dec:	66 1f       	adc	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	1a 94       	dec	r1
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <__udivmodsi4_loop>
    1df8:	60 95       	com	r22
    1dfa:	70 95       	com	r23
    1dfc:	80 95       	com	r24
    1dfe:	90 95       	com	r25
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	bd 01       	movw	r22, r26
    1e06:	cf 01       	movw	r24, r30
    1e08:	08 95       	ret

00001e0a <__umulhisi3>:
    1e0a:	a2 9f       	mul	r26, r18
    1e0c:	b0 01       	movw	r22, r0
    1e0e:	b3 9f       	mul	r27, r19
    1e10:	c0 01       	movw	r24, r0
    1e12:	a3 9f       	mul	r26, r19
    1e14:	70 0d       	add	r23, r0
    1e16:	81 1d       	adc	r24, r1
    1e18:	11 24       	eor	r1, r1
    1e1a:	91 1d       	adc	r25, r1
    1e1c:	b2 9f       	mul	r27, r18
    1e1e:	70 0d       	add	r23, r0
    1e20:	81 1d       	adc	r24, r1
    1e22:	11 24       	eor	r1, r1
    1e24:	91 1d       	adc	r25, r1
    1e26:	08 95       	ret

00001e28 <_exit>:
    1e28:	f8 94       	cli

00001e2a <__stop_program>:
    1e2a:	ff cf       	rjmp	.-2      	; 0x1e2a <__stop_program>
